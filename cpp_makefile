AUTHOR_NAME="hominsu"
AUTHOR_EMAIL="1774069959@qq.com"

GOPATH:=$(shell go env GOPATH)
VERSION=$(shell git describe --tags --always)

APP_RELATIVE_PATH=$(shell a=`basename $$PWD` && cd .. && b=`basename $$PWD` && echo $$b/$$a)
INTERNAL_PROTO_FILES=$(shell find internal -name *.proto)
API_PROTO_FILES=$(shell cd ../../../api/$(APP_RELATIVE_PATH) && find . -name *.proto)

REPO="hominsu"

APP_NAME=$(shell echo $(APP_RELATIVE_PATH) | sed -En "s/\//-/p")
DOCKER_IMAGE=$(REPO)/$(shell echo $(APP_NAME) |awk -F '@' '{print "htp-platform-" $$0 ":$(VERSION)"}')

.PHONY: grpc
# generate grpc code
grpc:
	 cd ../../../api/$(APP_RELATIVE_PATH) && protoc --proto_path=. \
           --proto_path=../../../third_party \
           --go_out=paths=source_relative:. \
           --go-grpc_out=paths=source_relative:. \
           --cpp_out=. \
           --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` \
           $(API_PROTO_FILES)

.PHONY: proto
# generate internal proto struct
proto:
	protoc --proto_path=. \
           --proto_path=../../../third_party \
           --go_out=paths=source_relative:. \
           $(INTERNAL_PROTO_FILES)

.PHONY: build
# build
build:
	mkdir -p bin/ && go build -ldflags "-X main.Version=$(VERSION)" -o ./bin/ ./...

.PHONY: test
# test
test:
	go test -v ./... -cover

.PHONY: run
run:
	cd cmd/server/ && go run .

.PHONY: docker
docker:
	cd ../../.. && \
	docker build \
	--build-arg AUTHOR_NAME=$(AUTHOR_NAME) \
	--build-arg AUTHOR_EMAIL=$(AUTHOR_EMAIL) \
	--build-arg VERSION=$(VERSION) \
	--build-arg APP_RELATIVE_PATH=$(APP_RELATIVE_PATH) \
	--file app/$(APP_RELATIVE_PATH)/Dockerfile \
	--tag $(DOCKER_IMAGE) .

.PHONY: buildx
buildx:
	cd ../../.. && \
	docker buildx build \
	--build-arg AUTHOR_NAME=$(AUTHOR_NAME) \
	--build-arg AUTHOR_EMAIL=$(AUTHOR_EMAIL) \
	--build-arg VERSION=$(VERSION) \
	--build-arg APP_RELATIVE_PATH=$(APP_RELATIVE_PATH) \
	--file app/$(APP_RELATIVE_PATH)/Dockerfile \
	--platform=linux/arm64,linux/amd64,linux/arm \
	--push \
	--tag $(DOCKER_IMAGE) .

.PHONY: api
# generate api
api: grpc

.PHONY: conf
# generate proto
conf: proto

.PHONY: all
# generate all
all: grpc proto build test

# show help
help:
	@echo ''
	@echo 'Usage:'
	@echo ' make [target]'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
	helpMessage = match(lastLine, /^# (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 2, RLENGTH); \
			printf "\033[36m%-22s\033[0m %s\n", helpCommand,helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

.DEFAULT_GOAL := help