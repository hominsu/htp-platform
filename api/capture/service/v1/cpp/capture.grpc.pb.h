// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: capture.proto
#ifndef GRPC_capture_2eproto__INCLUDED
#define GRPC_capture_2eproto__INCLUDED

#include "capture.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace capture {
namespace service {
namespace v1 {

// The cv service definition.
class Capture final {
 public:
  static constexpr char const* service_full_name() {
    return "capture.service.v1.Capture";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::capture::service::v1::ImageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>> AsyncReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>>(AsyncReadOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>> PrepareAsyncReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>>(PrepareAsyncReadOneRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::capture::service::v1::ImagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>> AsyncReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::capture::service::v1::ImageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>> AsyncReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>>(AsyncReadOneWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>> PrepareAsyncReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>>(PrepareAsyncReadOneWithBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::capture::service::v1::ImagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>> AsyncReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>>(AsyncReadAllWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>> PrepareAsyncReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>>(PrepareAsyncReadAllWithBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::capture::service::v1::ImageWithAreaReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>> AsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>>(AsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>> PrepareAsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>>(PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::capture::service::v1::ImagesWithAreaReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>> AsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>>(AsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>> PrepareAsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>>(PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>* AsyncReadOneRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>* PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>* AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageReply>* PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>* AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesReply>* PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>* AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImageWithAreaReply>* PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>* AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::capture::service::v1::ImagesWithAreaReply>* PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::capture::service::v1::ImageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>> AsyncReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>>(AsyncReadOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>> PrepareAsyncReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>>(PrepareAsyncReadOneRaw(context, request, cq));
    }
    ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::capture::service::v1::ImagesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>> AsyncReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    ::grpc::Status ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::capture::service::v1::ImageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>> AsyncReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>>(AsyncReadOneWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>> PrepareAsyncReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>>(PrepareAsyncReadOneWithBinaryRaw(context, request, cq));
    }
    ::grpc::Status ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::capture::service::v1::ImagesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>> AsyncReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>>(AsyncReadAllWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>> PrepareAsyncReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>>(PrepareAsyncReadAllWithBinaryRaw(context, request, cq));
    }
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::capture::service::v1::ImageWithAreaReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>> AsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>>(AsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>> PrepareAsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>>(PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::capture::service::v1::ImagesWithAreaReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>> AsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>>(AsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>> PrepareAsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>>(PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOne(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAll(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOneWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAllWithBinary(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>* AsyncReadOneRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>* PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>* AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageReply>* PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>* AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesReply>* PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>* AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImageWithAreaReply>* PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>* AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::capture::service::v1::ImagesWithAreaReply>* PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOne_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAll_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOneWithBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAllWithBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOneWithBinaryAndCalArea_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAllWithBinaryAndCalArea_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReadOne(::grpc::ServerContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response);
    virtual ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response);
    virtual ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response);
    virtual ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response);
    virtual ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response);
    virtual ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOne() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOne(::grpc::ServerContext* context, ::capture::service::v1::ReadOneRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::capture::service::v1::ReadAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinary(::grpc::ServerContext* context, ::capture::service::v1::ReadOneWithBinaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinary(::grpc::ServerContext* context, ::capture::service::v1::ReadAllWithBinaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImageWithAreaReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::grpc::ServerAsyncResponseWriter< ::capture::service::v1::ImagesWithAreaReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadOne<WithAsyncMethod_ReadAll<WithAsyncMethod_ReadOneWithBinary<WithAsyncMethod_ReadAllWithBinary<WithAsyncMethod_ReadOneWithBinaryAndCalArea<WithAsyncMethod_ReadAllWithBinaryAndCalArea<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOne() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneRequest, ::capture::service::v1::ImageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadOneRequest* request, ::capture::service::v1::ImageReply* response) { return this->ReadOne(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOne(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadOneRequest, ::capture::service::v1::ImageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneRequest, ::capture::service::v1::ImageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOne(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAll() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllRequest, ::capture::service::v1::ImagesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadAllRequest* request, ::capture::service::v1::ImagesReply* response) { return this->ReadAll(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAll(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadAllRequest, ::capture::service::v1::ImagesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllRequest, ::capture::service::v1::ImagesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAll(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneWithBinaryRequest, ::capture::service::v1::ImageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadOneWithBinaryRequest* request, ::capture::service::v1::ImageReply* response) { return this->ReadOneWithBinary(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOneWithBinary(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadOneWithBinaryRequest, ::capture::service::v1::ImageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneWithBinaryRequest, ::capture::service::v1::ImageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllWithBinaryRequest, ::capture::service::v1::ImagesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadAllWithBinaryRequest* request, ::capture::service::v1::ImagesReply* response) { return this->ReadAllWithBinary(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAllWithBinary(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadAllWithBinaryRequest, ::capture::service::v1::ImagesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllWithBinaryRequest, ::capture::service::v1::ImagesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::capture::service::v1::ImageWithAreaReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImageWithAreaReply* response) { return this->ReadOneWithBinaryAndCalArea(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOneWithBinaryAndCalArea(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::capture::service::v1::ImageWithAreaReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::capture::service::v1::ImageWithAreaReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::capture::service::v1::ImagesWithAreaReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::capture::service::v1::ImagesWithAreaReply* response) { return this->ReadAllWithBinaryAndCalArea(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAllWithBinaryAndCalArea(
        ::grpc::MessageAllocator< ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::capture::service::v1::ImagesWithAreaReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::capture::service::v1::ImagesWithAreaReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadOne<WithCallbackMethod_ReadAll<WithCallbackMethod_ReadOneWithBinary<WithCallbackMethod_ReadAllWithBinary<WithCallbackMethod_ReadOneWithBinaryAndCalArea<WithCallbackMethod_ReadAllWithBinaryAndCalArea<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOne() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOne() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAll() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOne() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOne(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOne(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAll() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAll(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOneWithBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAllWithBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOneWithBinaryAndCalArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAllWithBinaryAndCalArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOne() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadOneRequest, ::capture::service::v1::ImageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadOneRequest, ::capture::service::v1::ImageReply>* streamer) {
                       return this->StreamedReadOne(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadOneRequest,::capture::service::v1::ImageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAll() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadAllRequest, ::capture::service::v1::ImagesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadAllRequest, ::capture::service::v1::ImagesReply>* streamer) {
                       return this->StreamedReadAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadAllRequest,::capture::service::v1::ImagesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadOneWithBinaryRequest, ::capture::service::v1::ImageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadOneWithBinaryRequest, ::capture::service::v1::ImageReply>* streamer) {
                       return this->StreamedReadOneWithBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryRequest* /*request*/, ::capture::service::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOneWithBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadOneWithBinaryRequest,::capture::service::v1::ImageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadAllWithBinaryRequest, ::capture::service::v1::ImagesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadAllWithBinaryRequest, ::capture::service::v1::ImagesReply>* streamer) {
                       return this->StreamedReadAllWithBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryRequest* /*request*/, ::capture::service::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAllWithBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadAllWithBinaryRequest,::capture::service::v1::ImagesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::capture::service::v1::ImageWithAreaReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::capture::service::v1::ImageWithAreaReply>* streamer) {
                       return this->StreamedReadOneWithBinaryAndCalArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest,::capture::service::v1::ImageWithAreaReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::capture::service::v1::ImagesWithAreaReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::capture::service::v1::ImagesWithAreaReply>* streamer) {
                       return this->StreamedReadAllWithBinaryAndCalArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::capture::service::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest,::capture::service::v1::ImagesWithAreaReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadOne<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadOneWithBinary<WithStreamedUnaryMethod_ReadAllWithBinary<WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea<WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadOne<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadOneWithBinary<WithStreamedUnaryMethod_ReadAllWithBinary<WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea<WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace service
}  // namespace capture


#endif  // GRPC_capture_2eproto__INCLUDED
