// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v1/robot.proto

#include "v1/robot.pb.h"
#include "v1/robot.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace machine {
namespace robot {
namespace v1 {

static const char* Control_method_names[] = {
  "/machine.robot.v1.Control/AppendCoordinate",
  "/machine.robot.v1.Control/Zero",
  "/machine.robot.v1.Control/GetMotorInfo",
};

std::unique_ptr< Control::Stub> Control::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Control::Stub> stub(new Control::Stub(channel, options));
  return stub;
}

Control::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AppendCoordinate_(Control_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Zero_(Control_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMotorInfo_(Control_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Control::Stub::AppendCoordinate(::grpc::ClientContext* context, const ::machine::robot::v1::AppendCoordinateRequest& request, ::machine::robot::v1::AppendCoordinateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::machine::robot::v1::AppendCoordinateRequest, ::machine::robot::v1::AppendCoordinateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendCoordinate_, context, request, response);
}

void Control::Stub::async::AppendCoordinate(::grpc::ClientContext* context, const ::machine::robot::v1::AppendCoordinateRequest* request, ::machine::robot::v1::AppendCoordinateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::machine::robot::v1::AppendCoordinateRequest, ::machine::robot::v1::AppendCoordinateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendCoordinate_, context, request, response, std::move(f));
}

void Control::Stub::async::AppendCoordinate(::grpc::ClientContext* context, const ::machine::robot::v1::AppendCoordinateRequest* request, ::machine::robot::v1::AppendCoordinateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendCoordinate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::AppendCoordinateReply>* Control::Stub::PrepareAsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::machine::robot::v1::AppendCoordinateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::machine::robot::v1::AppendCoordinateReply, ::machine::robot::v1::AppendCoordinateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendCoordinate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::AppendCoordinateReply>* Control::Stub::AsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::machine::robot::v1::AppendCoordinateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendCoordinateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Control::Stub::Zero(::grpc::ClientContext* context, const ::machine::robot::v1::ZeroRequest& request, ::machine::robot::v1::ZeroReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::machine::robot::v1::ZeroRequest, ::machine::robot::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Zero_, context, request, response);
}

void Control::Stub::async::Zero(::grpc::ClientContext* context, const ::machine::robot::v1::ZeroRequest* request, ::machine::robot::v1::ZeroReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::machine::robot::v1::ZeroRequest, ::machine::robot::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Zero_, context, request, response, std::move(f));
}

void Control::Stub::async::Zero(::grpc::ClientContext* context, const ::machine::robot::v1::ZeroRequest* request, ::machine::robot::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Zero_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::ZeroReply>* Control::Stub::PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::machine::robot::v1::ZeroReply, ::machine::robot::v1::ZeroRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Zero_, context, request);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::ZeroReply>* Control::Stub::AsyncZeroRaw(::grpc::ClientContext* context, const ::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZeroRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Control::Stub::GetMotorInfo(::grpc::ClientContext* context, const ::machine::robot::v1::GetMotorInfoRequest& request, ::machine::robot::v1::GetMotorInfoReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::machine::robot::v1::GetMotorInfoRequest, ::machine::robot::v1::GetMotorInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMotorInfo_, context, request, response);
}

void Control::Stub::async::GetMotorInfo(::grpc::ClientContext* context, const ::machine::robot::v1::GetMotorInfoRequest* request, ::machine::robot::v1::GetMotorInfoReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::machine::robot::v1::GetMotorInfoRequest, ::machine::robot::v1::GetMotorInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMotorInfo_, context, request, response, std::move(f));
}

void Control::Stub::async::GetMotorInfo(::grpc::ClientContext* context, const ::machine::robot::v1::GetMotorInfoRequest* request, ::machine::robot::v1::GetMotorInfoReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMotorInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::GetMotorInfoReply>* Control::Stub::PrepareAsyncGetMotorInfoRaw(::grpc::ClientContext* context, const ::machine::robot::v1::GetMotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::machine::robot::v1::GetMotorInfoReply, ::machine::robot::v1::GetMotorInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMotorInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::machine::robot::v1::GetMotorInfoReply>* Control::Stub::AsyncGetMotorInfoRaw(::grpc::ClientContext* context, const ::machine::robot::v1::GetMotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMotorInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Control::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::machine::robot::v1::AppendCoordinateRequest, ::machine::robot::v1::AppendCoordinateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::machine::robot::v1::AppendCoordinateRequest* req,
             ::machine::robot::v1::AppendCoordinateReply* resp) {
               return service->AppendCoordinate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::machine::robot::v1::ZeroRequest, ::machine::robot::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::machine::robot::v1::ZeroRequest* req,
             ::machine::robot::v1::ZeroReply* resp) {
               return service->Zero(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::machine::robot::v1::GetMotorInfoRequest, ::machine::robot::v1::GetMotorInfoReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::machine::robot::v1::GetMotorInfoRequest* req,
             ::machine::robot::v1::GetMotorInfoReply* resp) {
               return service->GetMotorInfo(ctx, req, resp);
             }, this)));
}

Control::Service::~Service() {
}

::grpc::Status Control::Service::AppendCoordinate(::grpc::ServerContext* context, const ::machine::robot::v1::AppendCoordinateRequest* request, ::machine::robot::v1::AppendCoordinateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Zero(::grpc::ServerContext* context, const ::machine::robot::v1::ZeroRequest* request, ::machine::robot::v1::ZeroReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetMotorInfo(::grpc::ServerContext* context, const ::machine::robot::v1::GetMotorInfoRequest* request, ::machine::robot::v1::GetMotorInfoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace machine
}  // namespace robot
}  // namespace v1

