// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_machine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_machine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_machine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_machine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_machine_2eproto;
namespace machine {
namespace service {
namespace v1 {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class FindByUserIdRequest;
struct FindByUserIdRequestDefaultTypeInternal;
extern FindByUserIdRequestDefaultTypeInternal _FindByUserIdRequest_default_instance_;
class GetMotorStatusReply;
struct GetMotorStatusReplyDefaultTypeInternal;
extern GetMotorStatusReplyDefaultTypeInternal _GetMotorStatusReply_default_instance_;
class GetMotorStatusRequest;
struct GetMotorStatusRequestDefaultTypeInternal;
extern GetMotorStatusRequestDefaultTypeInternal _GetMotorStatusRequest_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class MachineReply;
struct MachineReplyDefaultTypeInternal;
extern MachineReplyDefaultTypeInternal _MachineReply_default_instance_;
class MachineStruct;
struct MachineStructDefaultTypeInternal;
extern MachineStructDefaultTypeInternal _MachineStruct_default_instance_;
class MachinesReply;
struct MachinesReplyDefaultTypeInternal;
extern MachinesReplyDefaultTypeInternal _MachinesReply_default_instance_;
class MotorInfo;
struct MotorInfoDefaultTypeInternal;
extern MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
class MotorStatus;
struct MotorStatusDefaultTypeInternal;
extern MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
class MoveDoneReply;
struct MoveDoneReplyDefaultTypeInternal;
extern MoveDoneReplyDefaultTypeInternal _MoveDoneReply_default_instance_;
class MoveDoneRequest;
struct MoveDoneRequestDefaultTypeInternal;
extern MoveDoneRequestDefaultTypeInternal _MoveDoneRequest_default_instance_;
class MoveReply;
struct MoveReplyDefaultTypeInternal;
extern MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class ZeroReply;
struct ZeroReplyDefaultTypeInternal;
extern ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
class ZeroRequest;
struct ZeroRequestDefaultTypeInternal;
extern ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace machine
PROTOBUF_NAMESPACE_OPEN
template<> ::machine::service::v1::CreateRequest* Arena::CreateMaybeMessage<::machine::service::v1::CreateRequest>(Arena*);
template<> ::machine::service::v1::FindByUserIdRequest* Arena::CreateMaybeMessage<::machine::service::v1::FindByUserIdRequest>(Arena*);
template<> ::machine::service::v1::GetMotorStatusReply* Arena::CreateMaybeMessage<::machine::service::v1::GetMotorStatusReply>(Arena*);
template<> ::machine::service::v1::GetMotorStatusRequest* Arena::CreateMaybeMessage<::machine::service::v1::GetMotorStatusRequest>(Arena*);
template<> ::machine::service::v1::GetRequest* Arena::CreateMaybeMessage<::machine::service::v1::GetRequest>(Arena*);
template<> ::machine::service::v1::MachineReply* Arena::CreateMaybeMessage<::machine::service::v1::MachineReply>(Arena*);
template<> ::machine::service::v1::MachineStruct* Arena::CreateMaybeMessage<::machine::service::v1::MachineStruct>(Arena*);
template<> ::machine::service::v1::MachinesReply* Arena::CreateMaybeMessage<::machine::service::v1::MachinesReply>(Arena*);
template<> ::machine::service::v1::MotorInfo* Arena::CreateMaybeMessage<::machine::service::v1::MotorInfo>(Arena*);
template<> ::machine::service::v1::MotorStatus* Arena::CreateMaybeMessage<::machine::service::v1::MotorStatus>(Arena*);
template<> ::machine::service::v1::MoveDoneReply* Arena::CreateMaybeMessage<::machine::service::v1::MoveDoneReply>(Arena*);
template<> ::machine::service::v1::MoveDoneRequest* Arena::CreateMaybeMessage<::machine::service::v1::MoveDoneRequest>(Arena*);
template<> ::machine::service::v1::MoveReply* Arena::CreateMaybeMessage<::machine::service::v1::MoveReply>(Arena*);
template<> ::machine::service::v1::MoveRequest* Arena::CreateMaybeMessage<::machine::service::v1::MoveRequest>(Arena*);
template<> ::machine::service::v1::UpdateRequest* Arena::CreateMaybeMessage<::machine::service::v1::UpdateRequest>(Arena*);
template<> ::machine::service::v1::ZeroReply* Arena::CreateMaybeMessage<::machine::service::v1::ZeroReply>(Arena*);
template<> ::machine::service::v1::ZeroRequest* Arena::CreateMaybeMessage<::machine::service::v1::ZeroRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace machine {
namespace service {
namespace v1 {

// ===================================================================

class FindByUserIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.FindByUserIdRequest) */ {
 public:
  inline FindByUserIdRequest() : FindByUserIdRequest(nullptr) {}
  ~FindByUserIdRequest() override;
  explicit constexpr FindByUserIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindByUserIdRequest(const FindByUserIdRequest& from);
  FindByUserIdRequest(FindByUserIdRequest&& from) noexcept
    : FindByUserIdRequest() {
    *this = ::std::move(from);
  }

  inline FindByUserIdRequest& operator=(const FindByUserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindByUserIdRequest& operator=(FindByUserIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindByUserIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindByUserIdRequest* internal_default_instance() {
    return reinterpret_cast<const FindByUserIdRequest*>(
               &_FindByUserIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FindByUserIdRequest& a, FindByUserIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindByUserIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindByUserIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindByUserIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindByUserIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindByUserIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindByUserIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindByUserIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.FindByUserIdRequest";
  }
  protected:
  explicit FindByUserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.FindByUserIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit constexpr CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .machine.service.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::machine::service::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::machine::service::v1::MachineStruct* release_machine();
  ::machine::service::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::machine::service::v1::MachineStruct* machine);
  private:
  const ::machine::service::v1::MachineStruct& _internal_machine() const;
  ::machine::service::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::machine::service::v1::MachineStruct* machine);
  ::machine::service::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:machine.service.v1.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::machine::service::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit constexpr UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .machine.service.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::machine::service::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::machine::service::v1::MachineStruct* release_machine();
  ::machine::service::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::machine::service::v1::MachineStruct* machine);
  private:
  const ::machine::service::v1::MachineStruct& _internal_machine() const;
  ::machine::service::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::machine::service::v1::MachineStruct* machine);
  ::machine::service::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:machine.service.v1.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::machine::service::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit constexpr MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckNameFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kDelayFieldNumber = 7,
    kMachineIdFieldNumber = 8,
    kCheckFieldNumber = 6,
  };
  // string check_name = 9;
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double rx = 4;
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5;
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double delay = 7;
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // int64 machine_id = 8;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // bool check = 6;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
  double x_;
  double y_;
  double z_;
  double rx_;
  double ry_;
  double delay_;
  int64_t machine_id_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MoveReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MoveReply) */ {
 public:
  inline MoveReply() : MoveReply(nullptr) {}
  ~MoveReply() override;
  explicit constexpr MoveReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveReply(const MoveReply& from);
  MoveReply(MoveReply&& from) noexcept
    : MoveReply() {
    *this = ::std::move(from);
  }

  inline MoveReply& operator=(const MoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveReply& operator=(MoveReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveReply* internal_default_instance() {
    return reinterpret_cast<const MoveReply*>(
               &_MoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveReply& a, MoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MoveReply";
  }
  protected:
  explicit MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MachineReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MachineReply) */ {
 public:
  inline MachineReply() : MachineReply(nullptr) {}
  ~MachineReply() override;
  explicit constexpr MachineReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineReply(const MachineReply& from);
  MachineReply(MachineReply&& from) noexcept
    : MachineReply() {
    *this = ::std::move(from);
  }

  inline MachineReply& operator=(const MachineReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineReply& operator=(MachineReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineReply* internal_default_instance() {
    return reinterpret_cast<const MachineReply*>(
               &_MachineReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MachineReply& a, MachineReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MachineReply";
  }
  protected:
  explicit MachineReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .machine.service.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::machine::service::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::machine::service::v1::MachineStruct* release_machine();
  ::machine::service::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::machine::service::v1::MachineStruct* machine);
  private:
  const ::machine::service::v1::MachineStruct& _internal_machine() const;
  ::machine::service::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::machine::service::v1::MachineStruct* machine);
  ::machine::service::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:machine.service.v1.MachineReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::machine::service::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MachinesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MachinesReply) */ {
 public:
  inline MachinesReply() : MachinesReply(nullptr) {}
  ~MachinesReply() override;
  explicit constexpr MachinesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachinesReply(const MachinesReply& from);
  MachinesReply(MachinesReply&& from) noexcept
    : MachinesReply() {
    *this = ::std::move(from);
  }

  inline MachinesReply& operator=(const MachinesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachinesReply& operator=(MachinesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachinesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachinesReply* internal_default_instance() {
    return reinterpret_cast<const MachinesReply*>(
               &_MachinesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MachinesReply& a, MachinesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MachinesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachinesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachinesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachinesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachinesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachinesReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachinesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MachinesReply";
  }
  protected:
  explicit MachinesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachinesFieldNumber = 1,
  };
  // repeated .machine.service.v1.MachineStruct machines = 1;
  int machines_size() const;
  private:
  int _internal_machines_size() const;
  public:
  void clear_machines();
  ::machine::service::v1::MachineStruct* mutable_machines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MachineStruct >*
      mutable_machines();
  private:
  const ::machine::service::v1::MachineStruct& _internal_machines(int index) const;
  ::machine::service::v1::MachineStruct* _internal_add_machines();
  public:
  const ::machine::service::v1::MachineStruct& machines(int index) const;
  ::machine::service::v1::MachineStruct* add_machines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MachineStruct >&
      machines() const;

  // @@protoc_insertion_point(class_scope:machine.service.v1.MachinesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MachineStruct > machines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MachineStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MachineStruct) */ {
 public:
  inline MachineStruct() : MachineStruct(nullptr) {}
  ~MachineStruct() override;
  explicit constexpr MachineStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineStruct(const MachineStruct& from);
  MachineStruct(MachineStruct&& from) noexcept
    : MachineStruct() {
    *this = ::std::move(from);
  }

  inline MachineStruct& operator=(const MachineStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineStruct& operator=(MachineStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineStruct* internal_default_instance() {
    return reinterpret_cast<const MachineStruct*>(
               &_MachineStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MachineStruct& a, MachineStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MachineStruct";
  }
  protected:
  explicit MachineStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kMachineIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MachineStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  int64_t machine_id_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class ZeroRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.ZeroRequest) */ {
 public:
  inline ZeroRequest() : ZeroRequest(nullptr) {}
  ~ZeroRequest() override;
  explicit constexpr ZeroRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroRequest(const ZeroRequest& from);
  ZeroRequest(ZeroRequest&& from) noexcept
    : ZeroRequest() {
    *this = ::std::move(from);
  }

  inline ZeroRequest& operator=(const ZeroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroRequest& operator=(ZeroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroRequest* internal_default_instance() {
    return reinterpret_cast<const ZeroRequest*>(
               &_ZeroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ZeroRequest& a, ZeroRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZeroRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.ZeroRequest";
  }
  protected:
  explicit ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.ZeroRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class ZeroReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.ZeroReply) */ {
 public:
  inline ZeroReply() : ZeroReply(nullptr) {}
  ~ZeroReply() override;
  explicit constexpr ZeroReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroReply(const ZeroReply& from);
  ZeroReply(ZeroReply&& from) noexcept
    : ZeroReply() {
    *this = ::std::move(from);
  }

  inline ZeroReply& operator=(const ZeroReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroReply& operator=(ZeroReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroReply* internal_default_instance() {
    return reinterpret_cast<const ZeroReply*>(
               &_ZeroReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ZeroReply& a, ZeroReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZeroReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.ZeroReply";
  }
  protected:
  explicit ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.ZeroReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class GetMotorStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.GetMotorStatusRequest) */ {
 public:
  inline GetMotorStatusRequest() : GetMotorStatusRequest(nullptr) {}
  ~GetMotorStatusRequest() override;
  explicit constexpr GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMotorStatusRequest(const GetMotorStatusRequest& from);
  GetMotorStatusRequest(GetMotorStatusRequest&& from) noexcept
    : GetMotorStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetMotorStatusRequest& operator=(const GetMotorStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotorStatusRequest& operator=(GetMotorStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMotorStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMotorStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetMotorStatusRequest*>(
               &_GetMotorStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetMotorStatusRequest& a, GetMotorStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMotorStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMotorStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMotorStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMotorStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMotorStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMotorStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotorStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.GetMotorStatusRequest";
  }
  protected:
  explicit GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.GetMotorStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class GetMotorStatusReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.GetMotorStatusReply) */ {
 public:
  inline GetMotorStatusReply() : GetMotorStatusReply(nullptr) {}
  ~GetMotorStatusReply() override;
  explicit constexpr GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMotorStatusReply(const GetMotorStatusReply& from);
  GetMotorStatusReply(GetMotorStatusReply&& from) noexcept
    : GetMotorStatusReply() {
    *this = ::std::move(from);
  }

  inline GetMotorStatusReply& operator=(const GetMotorStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotorStatusReply& operator=(GetMotorStatusReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMotorStatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMotorStatusReply* internal_default_instance() {
    return reinterpret_cast<const GetMotorStatusReply*>(
               &_GetMotorStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetMotorStatusReply& a, GetMotorStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMotorStatusReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMotorStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMotorStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMotorStatusReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMotorStatusReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMotorStatusReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotorStatusReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.GetMotorStatusReply";
  }
  protected:
  explicit GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorInfoFieldNumber = 1,
  };
  // repeated .machine.service.v1.MotorInfo motor_info = 1;
  int motor_info_size() const;
  private:
  int _internal_motor_info_size() const;
  public:
  void clear_motor_info();
  ::machine::service::v1::MotorInfo* mutable_motor_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MotorInfo >*
      mutable_motor_info();
  private:
  const ::machine::service::v1::MotorInfo& _internal_motor_info(int index) const;
  ::machine::service::v1::MotorInfo* _internal_add_motor_info();
  public:
  const ::machine::service::v1::MotorInfo& motor_info(int index) const;
  ::machine::service::v1::MotorInfo* add_motor_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MotorInfo >&
      motor_info() const;

  // @@protoc_insertion_point(class_scope:machine.service.v1.GetMotorStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MotorInfo > motor_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MotorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MotorInfo) */ {
 public:
  inline MotorInfo() : MotorInfo(nullptr) {}
  ~MotorInfo() override;
  explicit constexpr MotorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorInfo(const MotorInfo& from);
  MotorInfo(MotorInfo&& from) noexcept
    : MotorInfo() {
    *this = ::std::move(from);
  }

  inline MotorInfo& operator=(const MotorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorInfo& operator=(MotorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorInfo* internal_default_instance() {
    return reinterpret_cast<const MotorInfo*>(
               &_MotorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MotorInfo& a, MotorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MotorInfo";
  }
  protected:
  explicit MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorStatusFieldNumber = 1,
    kInstrPosFieldNumber = 2,
    kCurrentPosFieldNumber = 3,
  };
  // .machine.service.v1.MotorStatus motor_status = 1;
  bool has_motor_status() const;
  private:
  bool _internal_has_motor_status() const;
  public:
  void clear_motor_status();
  const ::machine::service::v1::MotorStatus& motor_status() const;
  PROTOBUF_NODISCARD ::machine::service::v1::MotorStatus* release_motor_status();
  ::machine::service::v1::MotorStatus* mutable_motor_status();
  void set_allocated_motor_status(::machine::service::v1::MotorStatus* motor_status);
  private:
  const ::machine::service::v1::MotorStatus& _internal_motor_status() const;
  ::machine::service::v1::MotorStatus* _internal_mutable_motor_status();
  public:
  void unsafe_arena_set_allocated_motor_status(
      ::machine::service::v1::MotorStatus* motor_status);
  ::machine::service::v1::MotorStatus* unsafe_arena_release_motor_status();

  // int64 instr_pos = 2;
  void clear_instr_pos();
  int64_t instr_pos() const;
  void set_instr_pos(int64_t value);
  private:
  int64_t _internal_instr_pos() const;
  void _internal_set_instr_pos(int64_t value);
  public:

  // int64 current_pos = 3;
  void clear_current_pos();
  int64_t current_pos() const;
  void set_current_pos(int64_t value);
  private:
  int64_t _internal_current_pos() const;
  void _internal_set_current_pos(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MotorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::machine::service::v1::MotorStatus* motor_status_;
  int64_t instr_pos_;
  int64_t current_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MotorStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MotorStatus) */ {
 public:
  inline MotorStatus() : MotorStatus(nullptr) {}
  ~MotorStatus() override;
  explicit constexpr MotorStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorStatus(const MotorStatus& from);
  MotorStatus(MotorStatus&& from) noexcept
    : MotorStatus() {
    *this = ::std::move(from);
  }

  inline MotorStatus& operator=(const MotorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorStatus& operator=(MotorStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorStatus* internal_default_instance() {
    return reinterpret_cast<const MotorStatus*>(
               &_MotorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MotorStatus& a, MotorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotorStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MotorStatus";
  }
  protected:
  explicit MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultFieldNumber = 1,
    kEnablingFieldNumber = 2,
    kRunningFieldNumber = 3,
    kInstructionCompletionFieldNumber = 4,
    kPathCompletionFieldNumber = 5,
    kZeroCompletionFieldNumber = 6,
  };
  // bool fault = 1;
  void clear_fault();
  bool fault() const;
  void set_fault(bool value);
  private:
  bool _internal_fault() const;
  void _internal_set_fault(bool value);
  public:

  // bool enabling = 2;
  void clear_enabling();
  bool enabling() const;
  void set_enabling(bool value);
  private:
  bool _internal_enabling() const;
  void _internal_set_enabling(bool value);
  public:

  // bool running = 3;
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // bool instruction_completion = 4;
  void clear_instruction_completion();
  bool instruction_completion() const;
  void set_instruction_completion(bool value);
  private:
  bool _internal_instruction_completion() const;
  void _internal_set_instruction_completion(bool value);
  public:

  // bool path_completion = 5;
  void clear_path_completion();
  bool path_completion() const;
  void set_path_completion(bool value);
  private:
  bool _internal_path_completion() const;
  void _internal_set_path_completion(bool value);
  public:

  // bool zero_completion = 6;
  void clear_zero_completion();
  bool zero_completion() const;
  void set_zero_completion(bool value);
  private:
  bool _internal_zero_completion() const;
  void _internal_set_zero_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MotorStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool fault_;
  bool enabling_;
  bool running_;
  bool instruction_completion_;
  bool path_completion_;
  bool zero_completion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MoveDoneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MoveDoneRequest) */ {
 public:
  inline MoveDoneRequest() : MoveDoneRequest(nullptr) {}
  ~MoveDoneRequest() override;
  explicit constexpr MoveDoneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDoneRequest(const MoveDoneRequest& from);
  MoveDoneRequest(MoveDoneRequest&& from) noexcept
    : MoveDoneRequest() {
    *this = ::std::move(from);
  }

  inline MoveDoneRequest& operator=(const MoveDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDoneRequest& operator=(MoveDoneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDoneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDoneRequest* internal_default_instance() {
    return reinterpret_cast<const MoveDoneRequest*>(
               &_MoveDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MoveDoneRequest& a, MoveDoneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDoneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDoneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveDoneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveDoneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveDoneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveDoneRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDoneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MoveDoneRequest";
  }
  protected:
  explicit MoveDoneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 8,
    kCheckNameFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kDelayFieldNumber = 7,
    kCheckFieldNumber = 6,
  };
  // string uuid = 8;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string check_name = 9;
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double rx = 4;
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5;
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double delay = 7;
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // bool check = 6;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MoveDoneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
  double x_;
  double y_;
  double z_;
  double rx_;
  double ry_;
  double delay_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// -------------------------------------------------------------------

class MoveDoneReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:machine.service.v1.MoveDoneReply) */ {
 public:
  inline MoveDoneReply() : MoveDoneReply(nullptr) {}
  ~MoveDoneReply() override;
  explicit constexpr MoveDoneReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDoneReply(const MoveDoneReply& from);
  MoveDoneReply(MoveDoneReply&& from) noexcept
    : MoveDoneReply() {
    *this = ::std::move(from);
  }

  inline MoveDoneReply& operator=(const MoveDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDoneReply& operator=(MoveDoneReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDoneReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDoneReply* internal_default_instance() {
    return reinterpret_cast<const MoveDoneReply*>(
               &_MoveDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MoveDoneReply& a, MoveDoneReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDoneReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDoneReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveDoneReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveDoneReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveDoneReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveDoneReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDoneReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "machine.service.v1.MoveDoneReply";
  }
  protected:
  explicit MoveDoneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:machine.service.v1.MoveDoneReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_machine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FindByUserIdRequest

// int64 user_id = 1;
inline void FindByUserIdRequest::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t FindByUserIdRequest::_internal_user_id() const {
  return user_id_;
}
inline int64_t FindByUserIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.FindByUserIdRequest.user_id)
  return _internal_user_id();
}
inline void FindByUserIdRequest::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void FindByUserIdRequest::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.FindByUserIdRequest.user_id)
}

// -------------------------------------------------------------------

// CreateRequest

// .machine.service.v1.MachineStruct machine = 1;
inline bool CreateRequest::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool CreateRequest::has_machine() const {
  return _internal_has_machine();
}
inline void CreateRequest::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::machine::service::v1::MachineStruct& CreateRequest::_internal_machine() const {
  const ::machine::service::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::machine::service::v1::MachineStruct&>(
      ::machine::service::v1::_MachineStruct_default_instance_);
}
inline const ::machine::service::v1::MachineStruct& CreateRequest::machine() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.CreateRequest.machine)
  return _internal_machine();
}
inline void CreateRequest::unsafe_arena_set_allocated_machine(
    ::machine::service::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:machine.service.v1.CreateRequest.machine)
}
inline ::machine::service::v1::MachineStruct* CreateRequest::release_machine() {
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::machine::service::v1::MachineStruct* CreateRequest::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:machine.service.v1.CreateRequest.machine)
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::machine::service::v1::MachineStruct* CreateRequest::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::machine::service::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::machine::service::v1::MachineStruct* CreateRequest::mutable_machine() {
  ::machine::service::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.CreateRequest.machine)
  return _msg;
}
inline void CreateRequest::set_allocated_machine(::machine::service::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::machine::service::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.CreateRequest.machine)
}

// -------------------------------------------------------------------

// UpdateRequest

// .machine.service.v1.MachineStruct machine = 1;
inline bool UpdateRequest::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool UpdateRequest::has_machine() const {
  return _internal_has_machine();
}
inline void UpdateRequest::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::machine::service::v1::MachineStruct& UpdateRequest::_internal_machine() const {
  const ::machine::service::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::machine::service::v1::MachineStruct&>(
      ::machine::service::v1::_MachineStruct_default_instance_);
}
inline const ::machine::service::v1::MachineStruct& UpdateRequest::machine() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.UpdateRequest.machine)
  return _internal_machine();
}
inline void UpdateRequest::unsafe_arena_set_allocated_machine(
    ::machine::service::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:machine.service.v1.UpdateRequest.machine)
}
inline ::machine::service::v1::MachineStruct* UpdateRequest::release_machine() {
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::machine::service::v1::MachineStruct* UpdateRequest::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:machine.service.v1.UpdateRequest.machine)
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::machine::service::v1::MachineStruct* UpdateRequest::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::machine::service::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::machine::service::v1::MachineStruct* UpdateRequest::mutable_machine() {
  ::machine::service::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.UpdateRequest.machine)
  return _msg;
}
inline void UpdateRequest::set_allocated_machine(::machine::service::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::machine::service::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.UpdateRequest.machine)
}

// -------------------------------------------------------------------

// GetRequest

// int64 machine_id = 1;
inline void GetRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t GetRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t GetRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.GetRequest.machine_id)
  return _internal_machine_id();
}
inline void GetRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void GetRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.GetRequest.machine_id)
}

// -------------------------------------------------------------------

// MoveRequest

// double x = 1;
inline void MoveRequest::clear_x() {
  x_ = 0;
}
inline double MoveRequest::_internal_x() const {
  return x_;
}
inline double MoveRequest::x() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.x)
  return _internal_x();
}
inline void MoveRequest::_internal_set_x(double value) {
  
  x_ = value;
}
inline void MoveRequest::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.x)
}

// double y = 2;
inline void MoveRequest::clear_y() {
  y_ = 0;
}
inline double MoveRequest::_internal_y() const {
  return y_;
}
inline double MoveRequest::y() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.y)
  return _internal_y();
}
inline void MoveRequest::_internal_set_y(double value) {
  
  y_ = value;
}
inline void MoveRequest::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.y)
}

// double z = 3;
inline void MoveRequest::clear_z() {
  z_ = 0;
}
inline double MoveRequest::_internal_z() const {
  return z_;
}
inline double MoveRequest::z() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.z)
  return _internal_z();
}
inline void MoveRequest::_internal_set_z(double value) {
  
  z_ = value;
}
inline void MoveRequest::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.z)
}

// double rx = 4;
inline void MoveRequest::clear_rx() {
  rx_ = 0;
}
inline double MoveRequest::_internal_rx() const {
  return rx_;
}
inline double MoveRequest::rx() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.rx)
  return _internal_rx();
}
inline void MoveRequest::_internal_set_rx(double value) {
  
  rx_ = value;
}
inline void MoveRequest::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.rx)
}

// double ry = 5;
inline void MoveRequest::clear_ry() {
  ry_ = 0;
}
inline double MoveRequest::_internal_ry() const {
  return ry_;
}
inline double MoveRequest::ry() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.ry)
  return _internal_ry();
}
inline void MoveRequest::_internal_set_ry(double value) {
  
  ry_ = value;
}
inline void MoveRequest::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.ry)
}

// bool check = 6;
inline void MoveRequest::clear_check() {
  check_ = false;
}
inline bool MoveRequest::_internal_check() const {
  return check_;
}
inline bool MoveRequest::check() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.check)
  return _internal_check();
}
inline void MoveRequest::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void MoveRequest::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.check)
}

// double delay = 7;
inline void MoveRequest::clear_delay() {
  delay_ = 0;
}
inline double MoveRequest::_internal_delay() const {
  return delay_;
}
inline double MoveRequest::delay() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.delay)
  return _internal_delay();
}
inline void MoveRequest::_internal_set_delay(double value) {
  
  delay_ = value;
}
inline void MoveRequest::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.delay)
}

// int64 machine_id = 8;
inline void MoveRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t MoveRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t MoveRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.machine_id)
  return _internal_machine_id();
}
inline void MoveRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void MoveRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.machine_id)
}

// string check_name = 9;
inline void MoveRequest::clear_check_name() {
  check_name_.ClearToEmpty();
}
inline const std::string& MoveRequest::check_name() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveRequest.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveRequest::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveRequest.check_name)
}
inline std::string* MoveRequest::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MoveRequest.check_name)
  return _s;
}
inline const std::string& MoveRequest::_internal_check_name() const {
  return check_name_.Get();
}
inline void MoveRequest::_internal_set_check_name(const std::string& value) {
  
  check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MoveRequest::_internal_mutable_check_name() {
  
  return check_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MoveRequest::release_check_name() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MoveRequest.check_name)
  return check_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MoveRequest::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  check_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (check_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MoveRequest.check_name)
}

// -------------------------------------------------------------------

// MoveReply

// bool status = 1;
inline void MoveReply::clear_status() {
  status_ = false;
}
inline bool MoveReply::_internal_status() const {
  return status_;
}
inline bool MoveReply::status() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveReply.status)
  return _internal_status();
}
inline void MoveReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void MoveReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveReply.status)
}

// -------------------------------------------------------------------

// MachineReply

// .machine.service.v1.MachineStruct machine = 1;
inline bool MachineReply::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool MachineReply::has_machine() const {
  return _internal_has_machine();
}
inline void MachineReply::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::machine::service::v1::MachineStruct& MachineReply::_internal_machine() const {
  const ::machine::service::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::machine::service::v1::MachineStruct&>(
      ::machine::service::v1::_MachineStruct_default_instance_);
}
inline const ::machine::service::v1::MachineStruct& MachineReply::machine() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MachineReply.machine)
  return _internal_machine();
}
inline void MachineReply::unsafe_arena_set_allocated_machine(
    ::machine::service::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:machine.service.v1.MachineReply.machine)
}
inline ::machine::service::v1::MachineStruct* MachineReply::release_machine() {
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::machine::service::v1::MachineStruct* MachineReply::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MachineReply.machine)
  
  ::machine::service::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::machine::service::v1::MachineStruct* MachineReply::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::machine::service::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::machine::service::v1::MachineStruct* MachineReply::mutable_machine() {
  ::machine::service::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MachineReply.machine)
  return _msg;
}
inline void MachineReply::set_allocated_machine(::machine::service::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::machine::service::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MachineReply.machine)
}

// -------------------------------------------------------------------

// MachinesReply

// repeated .machine.service.v1.MachineStruct machines = 1;
inline int MachinesReply::_internal_machines_size() const {
  return machines_.size();
}
inline int MachinesReply::machines_size() const {
  return _internal_machines_size();
}
inline void MachinesReply::clear_machines() {
  machines_.Clear();
}
inline ::machine::service::v1::MachineStruct* MachinesReply::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MachinesReply.machines)
  return machines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MachineStruct >*
MachinesReply::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:machine.service.v1.MachinesReply.machines)
  return &machines_;
}
inline const ::machine::service::v1::MachineStruct& MachinesReply::_internal_machines(int index) const {
  return machines_.Get(index);
}
inline const ::machine::service::v1::MachineStruct& MachinesReply::machines(int index) const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MachinesReply.machines)
  return _internal_machines(index);
}
inline ::machine::service::v1::MachineStruct* MachinesReply::_internal_add_machines() {
  return machines_.Add();
}
inline ::machine::service::v1::MachineStruct* MachinesReply::add_machines() {
  ::machine::service::v1::MachineStruct* _add = _internal_add_machines();
  // @@protoc_insertion_point(field_add:machine.service.v1.MachinesReply.machines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MachineStruct >&
MachinesReply::machines() const {
  // @@protoc_insertion_point(field_list:machine.service.v1.MachinesReply.machines)
  return machines_;
}

// -------------------------------------------------------------------

// MachineStruct

// int64 machine_id = 1;
inline void MachineStruct::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t MachineStruct::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t MachineStruct::machine_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MachineStruct.machine_id)
  return _internal_machine_id();
}
inline void MachineStruct::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void MachineStruct::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MachineStruct.machine_id)
}

// int64 user_id = 2;
inline void MachineStruct::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t MachineStruct::_internal_user_id() const {
  return user_id_;
}
inline int64_t MachineStruct::user_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MachineStruct.user_id)
  return _internal_user_id();
}
inline void MachineStruct::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void MachineStruct::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MachineStruct.user_id)
}

// string address = 3;
inline void MachineStruct::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& MachineStruct::address() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MachineStruct.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MachineStruct::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:machine.service.v1.MachineStruct.address)
}
inline std::string* MachineStruct::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MachineStruct.address)
  return _s;
}
inline const std::string& MachineStruct::_internal_address() const {
  return address_.Get();
}
inline void MachineStruct::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MachineStruct::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MachineStruct::release_address() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MachineStruct.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MachineStruct::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MachineStruct.address)
}

// -------------------------------------------------------------------

// ZeroRequest

// int64 machine_id = 1;
inline void ZeroRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t ZeroRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t ZeroRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.ZeroRequest.machine_id)
  return _internal_machine_id();
}
inline void ZeroRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void ZeroRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.ZeroRequest.machine_id)
}

// -------------------------------------------------------------------

// ZeroReply

// bool status = 1;
inline void ZeroReply::clear_status() {
  status_ = false;
}
inline bool ZeroReply::_internal_status() const {
  return status_;
}
inline bool ZeroReply::status() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.ZeroReply.status)
  return _internal_status();
}
inline void ZeroReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ZeroReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.ZeroReply.status)
}

// -------------------------------------------------------------------

// GetMotorStatusRequest

// int64 machine_id = 1;
inline void GetMotorStatusRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t GetMotorStatusRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t GetMotorStatusRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.GetMotorStatusRequest.machine_id)
  return _internal_machine_id();
}
inline void GetMotorStatusRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void GetMotorStatusRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.GetMotorStatusRequest.machine_id)
}

// -------------------------------------------------------------------

// GetMotorStatusReply

// repeated .machine.service.v1.MotorInfo motor_info = 1;
inline int GetMotorStatusReply::_internal_motor_info_size() const {
  return motor_info_.size();
}
inline int GetMotorStatusReply::motor_info_size() const {
  return _internal_motor_info_size();
}
inline void GetMotorStatusReply::clear_motor_info() {
  motor_info_.Clear();
}
inline ::machine::service::v1::MotorInfo* GetMotorStatusReply::mutable_motor_info(int index) {
  // @@protoc_insertion_point(field_mutable:machine.service.v1.GetMotorStatusReply.motor_info)
  return motor_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MotorInfo >*
GetMotorStatusReply::mutable_motor_info() {
  // @@protoc_insertion_point(field_mutable_list:machine.service.v1.GetMotorStatusReply.motor_info)
  return &motor_info_;
}
inline const ::machine::service::v1::MotorInfo& GetMotorStatusReply::_internal_motor_info(int index) const {
  return motor_info_.Get(index);
}
inline const ::machine::service::v1::MotorInfo& GetMotorStatusReply::motor_info(int index) const {
  // @@protoc_insertion_point(field_get:machine.service.v1.GetMotorStatusReply.motor_info)
  return _internal_motor_info(index);
}
inline ::machine::service::v1::MotorInfo* GetMotorStatusReply::_internal_add_motor_info() {
  return motor_info_.Add();
}
inline ::machine::service::v1::MotorInfo* GetMotorStatusReply::add_motor_info() {
  ::machine::service::v1::MotorInfo* _add = _internal_add_motor_info();
  // @@protoc_insertion_point(field_add:machine.service.v1.GetMotorStatusReply.motor_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::machine::service::v1::MotorInfo >&
GetMotorStatusReply::motor_info() const {
  // @@protoc_insertion_point(field_list:machine.service.v1.GetMotorStatusReply.motor_info)
  return motor_info_;
}

// -------------------------------------------------------------------

// MotorInfo

// .machine.service.v1.MotorStatus motor_status = 1;
inline bool MotorInfo::_internal_has_motor_status() const {
  return this != internal_default_instance() && motor_status_ != nullptr;
}
inline bool MotorInfo::has_motor_status() const {
  return _internal_has_motor_status();
}
inline void MotorInfo::clear_motor_status() {
  if (GetArenaForAllocation() == nullptr && motor_status_ != nullptr) {
    delete motor_status_;
  }
  motor_status_ = nullptr;
}
inline const ::machine::service::v1::MotorStatus& MotorInfo::_internal_motor_status() const {
  const ::machine::service::v1::MotorStatus* p = motor_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::machine::service::v1::MotorStatus&>(
      ::machine::service::v1::_MotorStatus_default_instance_);
}
inline const ::machine::service::v1::MotorStatus& MotorInfo::motor_status() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorInfo.motor_status)
  return _internal_motor_status();
}
inline void MotorInfo::unsafe_arena_set_allocated_motor_status(
    ::machine::service::v1::MotorStatus* motor_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motor_status_);
  }
  motor_status_ = motor_status;
  if (motor_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:machine.service.v1.MotorInfo.motor_status)
}
inline ::machine::service::v1::MotorStatus* MotorInfo::release_motor_status() {
  
  ::machine::service::v1::MotorStatus* temp = motor_status_;
  motor_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::machine::service::v1::MotorStatus* MotorInfo::unsafe_arena_release_motor_status() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MotorInfo.motor_status)
  
  ::machine::service::v1::MotorStatus* temp = motor_status_;
  motor_status_ = nullptr;
  return temp;
}
inline ::machine::service::v1::MotorStatus* MotorInfo::_internal_mutable_motor_status() {
  
  if (motor_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::machine::service::v1::MotorStatus>(GetArenaForAllocation());
    motor_status_ = p;
  }
  return motor_status_;
}
inline ::machine::service::v1::MotorStatus* MotorInfo::mutable_motor_status() {
  ::machine::service::v1::MotorStatus* _msg = _internal_mutable_motor_status();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MotorInfo.motor_status)
  return _msg;
}
inline void MotorInfo::set_allocated_motor_status(::machine::service::v1::MotorStatus* motor_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete motor_status_;
  }
  if (motor_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::machine::service::v1::MotorStatus>::GetOwningArena(motor_status);
    if (message_arena != submessage_arena) {
      motor_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor_status, submessage_arena);
    }
    
  } else {
    
  }
  motor_status_ = motor_status;
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MotorInfo.motor_status)
}

// int64 instr_pos = 2;
inline void MotorInfo::clear_instr_pos() {
  instr_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_instr_pos() const {
  return instr_pos_;
}
inline int64_t MotorInfo::instr_pos() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorInfo.instr_pos)
  return _internal_instr_pos();
}
inline void MotorInfo::_internal_set_instr_pos(int64_t value) {
  
  instr_pos_ = value;
}
inline void MotorInfo::set_instr_pos(int64_t value) {
  _internal_set_instr_pos(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorInfo.instr_pos)
}

// int64 current_pos = 3;
inline void MotorInfo::clear_current_pos() {
  current_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_current_pos() const {
  return current_pos_;
}
inline int64_t MotorInfo::current_pos() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorInfo.current_pos)
  return _internal_current_pos();
}
inline void MotorInfo::_internal_set_current_pos(int64_t value) {
  
  current_pos_ = value;
}
inline void MotorInfo::set_current_pos(int64_t value) {
  _internal_set_current_pos(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorInfo.current_pos)
}

// -------------------------------------------------------------------

// MotorStatus

// bool fault = 1;
inline void MotorStatus::clear_fault() {
  fault_ = false;
}
inline bool MotorStatus::_internal_fault() const {
  return fault_;
}
inline bool MotorStatus::fault() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.fault)
  return _internal_fault();
}
inline void MotorStatus::_internal_set_fault(bool value) {
  
  fault_ = value;
}
inline void MotorStatus::set_fault(bool value) {
  _internal_set_fault(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.fault)
}

// bool enabling = 2;
inline void MotorStatus::clear_enabling() {
  enabling_ = false;
}
inline bool MotorStatus::_internal_enabling() const {
  return enabling_;
}
inline bool MotorStatus::enabling() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.enabling)
  return _internal_enabling();
}
inline void MotorStatus::_internal_set_enabling(bool value) {
  
  enabling_ = value;
}
inline void MotorStatus::set_enabling(bool value) {
  _internal_set_enabling(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.enabling)
}

// bool running = 3;
inline void MotorStatus::clear_running() {
  running_ = false;
}
inline bool MotorStatus::_internal_running() const {
  return running_;
}
inline bool MotorStatus::running() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.running)
  return _internal_running();
}
inline void MotorStatus::_internal_set_running(bool value) {
  
  running_ = value;
}
inline void MotorStatus::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.running)
}

// bool instruction_completion = 4;
inline void MotorStatus::clear_instruction_completion() {
  instruction_completion_ = false;
}
inline bool MotorStatus::_internal_instruction_completion() const {
  return instruction_completion_;
}
inline bool MotorStatus::instruction_completion() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.instruction_completion)
  return _internal_instruction_completion();
}
inline void MotorStatus::_internal_set_instruction_completion(bool value) {
  
  instruction_completion_ = value;
}
inline void MotorStatus::set_instruction_completion(bool value) {
  _internal_set_instruction_completion(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.instruction_completion)
}

// bool path_completion = 5;
inline void MotorStatus::clear_path_completion() {
  path_completion_ = false;
}
inline bool MotorStatus::_internal_path_completion() const {
  return path_completion_;
}
inline bool MotorStatus::path_completion() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.path_completion)
  return _internal_path_completion();
}
inline void MotorStatus::_internal_set_path_completion(bool value) {
  
  path_completion_ = value;
}
inline void MotorStatus::set_path_completion(bool value) {
  _internal_set_path_completion(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.path_completion)
}

// bool zero_completion = 6;
inline void MotorStatus::clear_zero_completion() {
  zero_completion_ = false;
}
inline bool MotorStatus::_internal_zero_completion() const {
  return zero_completion_;
}
inline bool MotorStatus::zero_completion() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MotorStatus.zero_completion)
  return _internal_zero_completion();
}
inline void MotorStatus::_internal_set_zero_completion(bool value) {
  
  zero_completion_ = value;
}
inline void MotorStatus::set_zero_completion(bool value) {
  _internal_set_zero_completion(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MotorStatus.zero_completion)
}

// -------------------------------------------------------------------

// MoveDoneRequest

// double x = 1;
inline void MoveDoneRequest::clear_x() {
  x_ = 0;
}
inline double MoveDoneRequest::_internal_x() const {
  return x_;
}
inline double MoveDoneRequest::x() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.x)
  return _internal_x();
}
inline void MoveDoneRequest::_internal_set_x(double value) {
  
  x_ = value;
}
inline void MoveDoneRequest::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.x)
}

// double y = 2;
inline void MoveDoneRequest::clear_y() {
  y_ = 0;
}
inline double MoveDoneRequest::_internal_y() const {
  return y_;
}
inline double MoveDoneRequest::y() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.y)
  return _internal_y();
}
inline void MoveDoneRequest::_internal_set_y(double value) {
  
  y_ = value;
}
inline void MoveDoneRequest::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.y)
}

// double z = 3;
inline void MoveDoneRequest::clear_z() {
  z_ = 0;
}
inline double MoveDoneRequest::_internal_z() const {
  return z_;
}
inline double MoveDoneRequest::z() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.z)
  return _internal_z();
}
inline void MoveDoneRequest::_internal_set_z(double value) {
  
  z_ = value;
}
inline void MoveDoneRequest::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.z)
}

// double rx = 4;
inline void MoveDoneRequest::clear_rx() {
  rx_ = 0;
}
inline double MoveDoneRequest::_internal_rx() const {
  return rx_;
}
inline double MoveDoneRequest::rx() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.rx)
  return _internal_rx();
}
inline void MoveDoneRequest::_internal_set_rx(double value) {
  
  rx_ = value;
}
inline void MoveDoneRequest::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.rx)
}

// double ry = 5;
inline void MoveDoneRequest::clear_ry() {
  ry_ = 0;
}
inline double MoveDoneRequest::_internal_ry() const {
  return ry_;
}
inline double MoveDoneRequest::ry() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.ry)
  return _internal_ry();
}
inline void MoveDoneRequest::_internal_set_ry(double value) {
  
  ry_ = value;
}
inline void MoveDoneRequest::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.ry)
}

// bool check = 6;
inline void MoveDoneRequest::clear_check() {
  check_ = false;
}
inline bool MoveDoneRequest::_internal_check() const {
  return check_;
}
inline bool MoveDoneRequest::check() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.check)
  return _internal_check();
}
inline void MoveDoneRequest::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void MoveDoneRequest::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.check)
}

// double delay = 7;
inline void MoveDoneRequest::clear_delay() {
  delay_ = 0;
}
inline double MoveDoneRequest::_internal_delay() const {
  return delay_;
}
inline double MoveDoneRequest::delay() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.delay)
  return _internal_delay();
}
inline void MoveDoneRequest::_internal_set_delay(double value) {
  
  delay_ = value;
}
inline void MoveDoneRequest::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.delay)
}

// string uuid = 8;
inline void MoveDoneRequest::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& MoveDoneRequest::uuid() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveDoneRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.uuid)
}
inline std::string* MoveDoneRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MoveDoneRequest.uuid)
  return _s;
}
inline const std::string& MoveDoneRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void MoveDoneRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MoveDoneRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MoveDoneRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MoveDoneRequest.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MoveDoneRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MoveDoneRequest.uuid)
}

// string check_name = 9;
inline void MoveDoneRequest::clear_check_name() {
  check_name_.ClearToEmpty();
}
inline const std::string& MoveDoneRequest::check_name() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneRequest.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveDoneRequest::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneRequest.check_name)
}
inline std::string* MoveDoneRequest::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:machine.service.v1.MoveDoneRequest.check_name)
  return _s;
}
inline const std::string& MoveDoneRequest::_internal_check_name() const {
  return check_name_.Get();
}
inline void MoveDoneRequest::_internal_set_check_name(const std::string& value) {
  
  check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MoveDoneRequest::_internal_mutable_check_name() {
  
  return check_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MoveDoneRequest::release_check_name() {
  // @@protoc_insertion_point(field_release:machine.service.v1.MoveDoneRequest.check_name)
  return check_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MoveDoneRequest::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  check_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (check_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:machine.service.v1.MoveDoneRequest.check_name)
}

// -------------------------------------------------------------------

// MoveDoneReply

// bool status = 1;
inline void MoveDoneReply::clear_status() {
  status_ = false;
}
inline bool MoveDoneReply::_internal_status() const {
  return status_;
}
inline bool MoveDoneReply::status() const {
  // @@protoc_insertion_point(field_get:machine.service.v1.MoveDoneReply.status)
  return _internal_status();
}
inline void MoveDoneReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void MoveDoneReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:machine.service.v1.MoveDoneReply.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace service
}  // namespace machine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_machine_2eproto
