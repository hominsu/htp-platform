// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine.proto

#include "machine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace machine {
namespace service {
namespace v1 {
constexpr FindByUserIdRequest::FindByUserIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0}){}
struct FindByUserIdRequestDefaultTypeInternal {
  constexpr FindByUserIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindByUserIdRequestDefaultTypeInternal() {}
  union {
    FindByUserIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindByUserIdRequestDefaultTypeInternal _FindByUserIdRequest_default_instance_;
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
constexpr UpdateRequest::UpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct UpdateRequestDefaultTypeInternal {
  constexpr UpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRequestDefaultTypeInternal() {}
  union {
    UpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
constexpr GetRequest::GetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct GetRequestDefaultTypeInternal {
  constexpr GetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRequestDefaultTypeInternal _GetRequest_default_instance_;
constexpr MoveRequest::MoveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0)
  , rx_(0)
  , ry_(0)
  , delay_(0)
  , machine_id_(int64_t{0})
  , check_(false){}
struct MoveRequestDefaultTypeInternal {
  constexpr MoveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
constexpr MoveReply::MoveReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct MoveReplyDefaultTypeInternal {
  constexpr MoveReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveReplyDefaultTypeInternal() {}
  union {
    MoveReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
constexpr MachineReply::MachineReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct MachineReplyDefaultTypeInternal {
  constexpr MachineReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachineReplyDefaultTypeInternal() {}
  union {
    MachineReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachineReplyDefaultTypeInternal _MachineReply_default_instance_;
constexpr MachinesReply::MachinesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machines_(){}
struct MachinesReplyDefaultTypeInternal {
  constexpr MachinesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachinesReplyDefaultTypeInternal() {}
  union {
    MachinesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachinesReplyDefaultTypeInternal _MachinesReply_default_instance_;
constexpr MachineStruct::MachineStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_id_(int64_t{0})
  , user_id_(int64_t{0}){}
struct MachineStructDefaultTypeInternal {
  constexpr MachineStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachineStructDefaultTypeInternal() {}
  union {
    MachineStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachineStructDefaultTypeInternal _MachineStruct_default_instance_;
constexpr ZeroRequest::ZeroRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct ZeroRequestDefaultTypeInternal {
  constexpr ZeroRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeroRequestDefaultTypeInternal() {}
  union {
    ZeroRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
constexpr ZeroReply::ZeroReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct ZeroReplyDefaultTypeInternal {
  constexpr ZeroReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeroReplyDefaultTypeInternal() {}
  union {
    ZeroReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
constexpr GetMotorStatusRequest::GetMotorStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct GetMotorStatusRequestDefaultTypeInternal {
  constexpr GetMotorStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMotorStatusRequestDefaultTypeInternal() {}
  union {
    GetMotorStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMotorStatusRequestDefaultTypeInternal _GetMotorStatusRequest_default_instance_;
constexpr GetMotorStatusReply::GetMotorStatusReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor_info_(){}
struct GetMotorStatusReplyDefaultTypeInternal {
  constexpr GetMotorStatusReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMotorStatusReplyDefaultTypeInternal() {}
  union {
    GetMotorStatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMotorStatusReplyDefaultTypeInternal _GetMotorStatusReply_default_instance_;
constexpr MotorInfo::MotorInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor_status_(nullptr)
  , instr_pos_(int64_t{0})
  , current_pos_(int64_t{0}){}
struct MotorInfoDefaultTypeInternal {
  constexpr MotorInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorInfoDefaultTypeInternal() {}
  union {
    MotorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
constexpr MotorStatus::MotorStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fault_(false)
  , enabling_(false)
  , running_(false)
  , instruction_completion_(false)
  , path_completion_(false)
  , zero_completion_(false){}
struct MotorStatusDefaultTypeInternal {
  constexpr MotorStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorStatusDefaultTypeInternal() {}
  union {
    MotorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
constexpr MoveDoneRequest::MoveDoneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , check_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0)
  , rx_(0)
  , ry_(0)
  , delay_(0)
  , check_(false){}
struct MoveDoneRequestDefaultTypeInternal {
  constexpr MoveDoneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDoneRequestDefaultTypeInternal() {}
  union {
    MoveDoneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDoneRequestDefaultTypeInternal _MoveDoneRequest_default_instance_;
constexpr MoveDoneReply::MoveDoneReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct MoveDoneReplyDefaultTypeInternal {
  constexpr MoveDoneReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveDoneReplyDefaultTypeInternal() {}
  union {
    MoveDoneReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveDoneReplyDefaultTypeInternal _MoveDoneReply_default_instance_;
constexpr CreateCronJobRequest::CreateCronJobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cron_job_(nullptr){}
struct CreateCronJobRequestDefaultTypeInternal {
  constexpr CreateCronJobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCronJobRequestDefaultTypeInternal() {}
  union {
    CreateCronJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCronJobRequestDefaultTypeInternal _CreateCronJobRequest_default_instance_;
constexpr DeleteCronJobRequest::DeleteCronJobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct DeleteCronJobRequestDefaultTypeInternal {
  constexpr DeleteCronJobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCronJobRequestDefaultTypeInternal() {}
  union {
    DeleteCronJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCronJobRequestDefaultTypeInternal _DeleteCronJobRequest_default_instance_;
constexpr DeleteCronJobReply::DeleteCronJobReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_(int64_t{0}){}
struct DeleteCronJobReplyDefaultTypeInternal {
  constexpr DeleteCronJobReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCronJobReplyDefaultTypeInternal() {}
  union {
    DeleteCronJobReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCronJobReplyDefaultTypeInternal _DeleteCronJobReply_default_instance_;
constexpr ListCronJobRequest::ListCronJobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machineid_(int64_t{0}){}
struct ListCronJobRequestDefaultTypeInternal {
  constexpr ListCronJobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCronJobRequestDefaultTypeInternal() {}
  union {
    ListCronJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCronJobRequestDefaultTypeInternal _ListCronJobRequest_default_instance_;
constexpr CronJobReply::CronJobReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cron_job_(nullptr){}
struct CronJobReplyDefaultTypeInternal {
  constexpr CronJobReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CronJobReplyDefaultTypeInternal() {}
  union {
    CronJobReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CronJobReplyDefaultTypeInternal _CronJobReply_default_instance_;
constexpr CronJobsReply::CronJobsReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cron_jobs_(){}
struct CronJobsReplyDefaultTypeInternal {
  constexpr CronJobsReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CronJobsReplyDefaultTypeInternal() {}
  union {
    CronJobsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CronJobsReplyDefaultTypeInternal _CronJobsReply_default_instance_;
constexpr CronJob::CronJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_coordinates_()
  , check_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cron_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , machineid_(int64_t{0}){}
struct CronJobDefaultTypeInternal {
  constexpr CronJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CronJobDefaultTypeInternal() {}
  union {
    CronJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CronJobDefaultTypeInternal _CronJob_default_instance_;
constexpr CheckCoordinate::CheckCoordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crd_(nullptr)
  , seq_(int64_t{0}){}
struct CheckCoordinateDefaultTypeInternal {
  constexpr CheckCoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckCoordinateDefaultTypeInternal() {}
  union {
    CheckCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckCoordinateDefaultTypeInternal _CheckCoordinate_default_instance_;
constexpr Coordinate::Coordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0)
  , rx_(0)
  , ry_(0)
  , delay_(0)
  , machine_id_(int64_t{0})
  , check_(false){}
struct CoordinateDefaultTypeInternal {
  constexpr CoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordinateDefaultTypeInternal() {}
  union {
    Coordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordinateDefaultTypeInternal _Coordinate_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace machine
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_machine_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_machine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_machine_2eproto = nullptr;

const uint32_t TableStruct_machine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::FindByUserIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::FindByUserIdRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CreateRequest, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::UpdateRequest, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, x_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, y_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, z_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, rx_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, ry_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, check_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, delay_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, machine_id_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveRequest, check_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineReply, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachinesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachinesReply, machines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineStruct, machine_id_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineStruct, user_id_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MachineStruct, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ZeroRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ZeroRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ZeroReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ZeroReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetMotorStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetMotorStatusRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetMotorStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::GetMotorStatusReply, motor_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorInfo, motor_status_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorInfo, instr_pos_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorInfo, current_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, fault_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, enabling_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, running_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, instruction_completion_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, path_completion_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MotorStatus, zero_completion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, x_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, y_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, z_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, rx_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, ry_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, check_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, delay_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, uuid_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneRequest, check_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::MoveDoneReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CreateCronJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CreateCronJobRequest, cron_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::DeleteCronJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::DeleteCronJobRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::DeleteCronJobReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::DeleteCronJobReply, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ListCronJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::ListCronJobRequest, machineid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJobReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJobReply, cron_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJobsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJobsReply, cron_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, id_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, machineid_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, check_name_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, cron_string_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CronJob, check_coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CheckCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CheckCoordinate, seq_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::CheckCoordinate, crd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, x_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, y_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, z_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, rx_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, ry_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, check_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, delay_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, machine_id_),
  PROTOBUF_FIELD_OFFSET(::machine::service::v1::Coordinate, check_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::machine::service::v1::FindByUserIdRequest)},
  { 7, -1, -1, sizeof(::machine::service::v1::CreateRequest)},
  { 14, -1, -1, sizeof(::machine::service::v1::UpdateRequest)},
  { 21, -1, -1, sizeof(::machine::service::v1::GetRequest)},
  { 28, -1, -1, sizeof(::machine::service::v1::MoveRequest)},
  { 43, -1, -1, sizeof(::machine::service::v1::MoveReply)},
  { 50, -1, -1, sizeof(::machine::service::v1::MachineReply)},
  { 57, -1, -1, sizeof(::machine::service::v1::MachinesReply)},
  { 64, -1, -1, sizeof(::machine::service::v1::MachineStruct)},
  { 73, -1, -1, sizeof(::machine::service::v1::ZeroRequest)},
  { 80, -1, -1, sizeof(::machine::service::v1::ZeroReply)},
  { 87, -1, -1, sizeof(::machine::service::v1::GetMotorStatusRequest)},
  { 94, -1, -1, sizeof(::machine::service::v1::GetMotorStatusReply)},
  { 101, -1, -1, sizeof(::machine::service::v1::MotorInfo)},
  { 110, -1, -1, sizeof(::machine::service::v1::MotorStatus)},
  { 122, -1, -1, sizeof(::machine::service::v1::MoveDoneRequest)},
  { 137, -1, -1, sizeof(::machine::service::v1::MoveDoneReply)},
  { 144, -1, -1, sizeof(::machine::service::v1::CreateCronJobRequest)},
  { 151, -1, -1, sizeof(::machine::service::v1::DeleteCronJobRequest)},
  { 158, -1, -1, sizeof(::machine::service::v1::DeleteCronJobReply)},
  { 165, -1, -1, sizeof(::machine::service::v1::ListCronJobRequest)},
  { 172, -1, -1, sizeof(::machine::service::v1::CronJobReply)},
  { 179, -1, -1, sizeof(::machine::service::v1::CronJobsReply)},
  { 186, -1, -1, sizeof(::machine::service::v1::CronJob)},
  { 197, -1, -1, sizeof(::machine::service::v1::CheckCoordinate)},
  { 205, -1, -1, sizeof(::machine::service::v1::Coordinate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_FindByUserIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MoveReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MachineReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MachinesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MachineStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_ZeroRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_ZeroReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_GetMotorStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_GetMotorStatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MotorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MotorStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MoveDoneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_MoveDoneReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CreateCronJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_DeleteCronJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_DeleteCronJobReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_ListCronJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CronJobReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CronJobsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CronJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_CheckCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::machine::service::v1::_Coordinate_default_instance_),
};

const char descriptor_table_protodef_machine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmachine.proto\022\022machine.service.v1\"&\n\023F"
  "indByUserIdRequest\022\017\n\007user_id\030\001 \001(\003\"C\n\rC"
  "reateRequest\0222\n\007machine\030\001 \001(\0132!.machine."
  "service.v1.MachineStruct\"C\n\rUpdateReques"
  "t\0222\n\007machine\030\001 \001(\0132!.machine.service.v1."
  "MachineStruct\" \n\nGetRequest\022\022\n\nmachine_i"
  "d\030\001 \001(\003\"\214\001\n\013MoveRequest\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030"
  "\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\n\n\002rx\030\004 \001(\001\022\n\n\002ry\030\005 \001(\001"
  "\022\r\n\005check\030\006 \001(\010\022\r\n\005delay\030\007 \001(\001\022\022\n\nmachin"
  "e_id\030\010 \001(\003\022\022\n\ncheck_name\030\t \001(\t\"\033\n\tMoveRe"
  "ply\022\016\n\006status\030\001 \001(\010\"B\n\014MachineReply\0222\n\007m"
  "achine\030\001 \001(\0132!.machine.service.v1.Machin"
  "eStruct\"D\n\rMachinesReply\0223\n\010machines\030\001 \003"
  "(\0132!.machine.service.v1.MachineStruct\"E\n"
  "\rMachineStruct\022\022\n\nmachine_id\030\001 \001(\003\022\017\n\007us"
  "er_id\030\002 \001(\003\022\017\n\007address\030\003 \001(\t\"!\n\013ZeroRequ"
  "est\022\022\n\nmachine_id\030\001 \001(\003\"\033\n\tZeroReply\022\016\n\006"
  "status\030\001 \001(\010\"+\n\025GetMotorStatusRequest\022\022\n"
  "\nmachine_id\030\001 \001(\003\"H\n\023GetMotorStatusReply"
  "\0221\n\nmotor_info\030\001 \003(\0132\035.machine.service.v"
  "1.MotorInfo\"j\n\tMotorInfo\0225\n\014motor_status"
  "\030\001 \001(\0132\037.machine.service.v1.MotorStatus\022"
  "\021\n\tinstr_pos\030\002 \001(\003\022\023\n\013current_pos\030\003 \001(\003\""
  "\221\001\n\013MotorStatus\022\r\n\005fault\030\001 \001(\010\022\020\n\010enabli"
  "ng\030\002 \001(\010\022\017\n\007running\030\003 \001(\010\022\036\n\026instruction"
  "_completion\030\004 \001(\010\022\027\n\017path_completion\030\005 \001"
  "(\010\022\027\n\017zero_completion\030\006 \001(\010\"\212\001\n\017MoveDone"
  "Request\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\022\n\n\002rx\030\004 \001(\001\022\n\n\002ry\030\005 \001(\001\022\r\n\005check\030\006 \001(\010\022"
  "\r\n\005delay\030\007 \001(\001\022\014\n\004uuid\030\010 \001(\t\022\022\n\ncheck_na"
  "me\030\t \001(\t\"\037\n\rMoveDoneReply\022\016\n\006status\030\001 \001("
  "\010\"E\n\024CreateCronJobRequest\022-\n\010cron_job\030\001 "
  "\001(\0132\033.machine.service.v1.CronJob\"\"\n\024Dele"
  "teCronJobRequest\022\n\n\002id\030\001 \001(\003\"!\n\022DeleteCr"
  "onJobReply\022\013\n\003num\030\001 \001(\003\"\'\n\022ListCronJobRe"
  "quest\022\021\n\tmachineId\030\001 \001(\003\"=\n\014CronJobReply"
  "\022-\n\010cron_job\030\001 \001(\0132\033.machine.service.v1."
  "CronJob\"\?\n\rCronJobsReply\022.\n\tcron_jobs\030\001 "
  "\003(\0132\033.machine.service.v1.CronJob\"\221\001\n\007Cro"
  "nJob\022\n\n\002id\030\001 \001(\003\022\021\n\tmachineId\030\002 \001(\003\022\022\n\nc"
  "heck_name\030\003 \001(\t\022\023\n\013cron_string\030\004 \001(\t\022>\n\021"
  "check_coordinates\030\005 \003(\0132#.machine.servic"
  "e.v1.CheckCoordinate\"K\n\017CheckCoordinate\022"
  "\013\n\003seq\030\001 \001(\003\022+\n\003crd\030\002 \001(\0132\036.machine.serv"
  "ice.v1.Coordinate\"\213\001\n\nCoordinate\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\n\n\002rx\030\004 \001(\001\022\n\n"
  "\002ry\030\005 \001(\001\022\r\n\005check\030\006 \001(\010\022\r\n\005delay\030\007 \001(\001\022"
  "\022\n\nmachine_id\030\010 \001(\003\022\022\n\ncheck_name\030\t \001(\t2"
  "\306\007\n\007Machine\022\\\n\014FindByUserId\022\'.machine.se"
  "rvice.v1.FindByUserIdRequest\032!.machine.s"
  "ervice.v1.MachinesReply\"\000\022O\n\006Create\022!.ma"
  "chine.service.v1.CreateRequest\032 .machine"
  ".service.v1.MachineReply\"\000\022O\n\006Update\022!.m"
  "achine.service.v1.UpdateRequest\032 .machin"
  "e.service.v1.MachineReply\"\000\022I\n\003Get\022\036.mac"
  "hine.service.v1.GetRequest\032 .machine.ser"
  "vice.v1.MachineReply\"\000\022H\n\004Move\022\037.machine"
  ".service.v1.MoveRequest\032\035.machine.servic"
  "e.v1.MoveReply\"\000\022H\n\004Zero\022\037.machine.servi"
  "ce.v1.ZeroRequest\032\035.machine.service.v1.Z"
  "eroReply\"\000\022f\n\016GetMotorStatus\022).machine.s"
  "ervice.v1.GetMotorStatusRequest\032\'.machin"
  "e.service.v1.GetMotorStatusReply\"\000\022T\n\010Mo"
  "veDone\022#.machine.service.v1.MoveDoneRequ"
  "est\032!.machine.service.v1.MoveDoneReply\"\000"
  "\022]\n\rCreateCronJob\022(.machine.service.v1.C"
  "reateCronJobRequest\032 .machine.service.v1"
  ".CronJobReply\"\000\022c\n\rDeleteCronJob\022(.machi"
  "ne.service.v1.DeleteCronJobRequest\032&.mac"
  "hine.service.v1.DeleteCronJobReply\"\000\022Z\n\013"
  "ListCronJob\022&.machine.service.v1.ListCro"
  "nJobRequest\032!.machine.service.v1.CronJob"
  "sReply\"\000B\033Z\031api/machine/service/v1;v1b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_machine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_machine_2eproto = {
  false, false, 2925, descriptor_table_protodef_machine_2eproto, "machine.proto", 
  &descriptor_table_machine_2eproto_once, nullptr, 0, 26,
  schemas, file_default_instances, TableStruct_machine_2eproto::offsets,
  file_level_metadata_machine_2eproto, file_level_enum_descriptors_machine_2eproto, file_level_service_descriptors_machine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_machine_2eproto_getter() {
  return &descriptor_table_machine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_machine_2eproto(&descriptor_table_machine_2eproto);
namespace machine {
namespace service {
namespace v1 {

// ===================================================================

class FindByUserIdRequest::_Internal {
 public:
};

FindByUserIdRequest::FindByUserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.FindByUserIdRequest)
}
FindByUserIdRequest::FindByUserIdRequest(const FindByUserIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.FindByUserIdRequest)
}

inline void FindByUserIdRequest::SharedCtor() {
user_id_ = int64_t{0};
}

FindByUserIdRequest::~FindByUserIdRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.FindByUserIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindByUserIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindByUserIdRequest::ArenaDtor(void* object) {
  FindByUserIdRequest* _this = reinterpret_cast< FindByUserIdRequest* >(object);
  (void)_this;
}
void FindByUserIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindByUserIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindByUserIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.FindByUserIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindByUserIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindByUserIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.FindByUserIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.FindByUserIdRequest)
  return target;
}

size_t FindByUserIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.FindByUserIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindByUserIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindByUserIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindByUserIdRequest::GetClassData() const { return &_class_data_; }

void FindByUserIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindByUserIdRequest *>(to)->MergeFrom(
      static_cast<const FindByUserIdRequest &>(from));
}


void FindByUserIdRequest::MergeFrom(const FindByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.FindByUserIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindByUserIdRequest::CopyFrom(const FindByUserIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.FindByUserIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindByUserIdRequest::IsInitialized() const {
  return true;
}

void FindByUserIdRequest::InternalSwap(FindByUserIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindByUserIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[0]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
  static const ::machine::service::v1::MachineStruct& machine(const CreateRequest* msg);
};

const ::machine::service::v1::MachineStruct&
CreateRequest::_Internal::machine(const CreateRequest* msg) {
  return *msg->machine_;
}
CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::machine::service::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CreateRequest)
}

inline void CreateRequest::SharedCtor() {
machine_ = nullptr;
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }

void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRequest *>(to)->MergeFrom(
      static_cast<const CreateRequest &>(from));
}


void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::machine::service::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[1]);
}

// ===================================================================

class UpdateRequest::_Internal {
 public:
  static const ::machine::service::v1::MachineStruct& machine(const UpdateRequest* msg);
};

const ::machine::service::v1::MachineStruct&
UpdateRequest::_Internal::machine(const UpdateRequest* msg) {
  return *msg->machine_;
}
UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::machine::service::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.UpdateRequest)
}

inline void UpdateRequest::SharedCtor() {
machine_ = nullptr;
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.UpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void UpdateRequest::ArenaDtor(void* object) {
  UpdateRequest* _this = reinterpret_cast< UpdateRequest* >(object);
  (void)_this;
}
void UpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.UpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.UpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.UpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRequest::GetClassData() const { return &_class_data_; }

void UpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateRequest *>(to)->MergeFrom(
      static_cast<const UpdateRequest &>(from));
}


void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::machine::service::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[2]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.GetRequest)
}

inline void GetRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.GetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }

void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRequest *>(to)->MergeFrom(
      static_cast<const GetRequest &>(from));
}


void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[3]);
}

// ===================================================================

class MoveRequest::_Internal {
 public:
};

MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MoveRequest)
}

inline void MoveRequest::SharedCtor() {
check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MoveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  check_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveRequest::ArenaDtor(void* object) {
  MoveRequest* _this = reinterpret_cast< MoveRequest* >(object);
  (void)_this;
}
void MoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_name_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&x_)) + sizeof(check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 machine_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.MoveRequest.check_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_check(), target);
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_delay(), target);
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_machine_id(), target);
  }

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.MoveRequest.check_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 8;
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }

void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveRequest *>(to)->MergeFrom(
      static_cast<const MoveRequest &>(from));
}


void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_check_name().empty()) {
    _internal_set_check_name(from._internal_check_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = from._internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from._internal_check() != 0) {
    _internal_set_check(from._internal_check());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_name_, lhs_arena,
      &other->check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, check_)
      + sizeof(MoveRequest::check_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[4]);
}

// ===================================================================

class MoveReply::_Internal {
 public:
};

MoveReply::MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MoveReply)
}
MoveReply::MoveReply(const MoveReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MoveReply)
}

inline void MoveReply::SharedCtor() {
status_ = false;
}

MoveReply::~MoveReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MoveReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveReply::ArenaDtor(void* object) {
  MoveReply* _this = reinterpret_cast< MoveReply* >(object);
  (void)_this;
}
void MoveReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MoveReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MoveReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MoveReply)
  return target;
}

size_t MoveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MoveReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveReply::GetClassData() const { return &_class_data_; }

void MoveReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveReply *>(to)->MergeFrom(
      static_cast<const MoveReply &>(from));
}


void MoveReply::MergeFrom(const MoveReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MoveReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveReply::CopyFrom(const MoveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MoveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveReply::IsInitialized() const {
  return true;
}

void MoveReply::InternalSwap(MoveReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[5]);
}

// ===================================================================

class MachineReply::_Internal {
 public:
  static const ::machine::service::v1::MachineStruct& machine(const MachineReply* msg);
};

const ::machine::service::v1::MachineStruct&
MachineReply::_Internal::machine(const MachineReply* msg) {
  return *msg->machine_;
}
MachineReply::MachineReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MachineReply)
}
MachineReply::MachineReply(const MachineReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::machine::service::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MachineReply)
}

inline void MachineReply::SharedCtor() {
machine_ = nullptr;
}

MachineReply::~MachineReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MachineReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachineReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void MachineReply::ArenaDtor(void* object) {
  MachineReply* _this = reinterpret_cast< MachineReply* >(object);
  (void)_this;
}
void MachineReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachineReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MachineReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MachineReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MachineReply)
  return target;
}

size_t MachineReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MachineReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachineReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineReply::GetClassData() const { return &_class_data_; }

void MachineReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachineReply *>(to)->MergeFrom(
      static_cast<const MachineReply &>(from));
}


void MachineReply::MergeFrom(const MachineReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MachineReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::machine::service::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineReply::CopyFrom(const MachineReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MachineReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReply::IsInitialized() const {
  return true;
}

void MachineReply::InternalSwap(MachineReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[6]);
}

// ===================================================================

class MachinesReply::_Internal {
 public:
};

MachinesReply::MachinesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  machines_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MachinesReply)
}
MachinesReply::MachinesReply(const MachinesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      machines_(from.machines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MachinesReply)
}

inline void MachinesReply::SharedCtor() {
}

MachinesReply::~MachinesReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MachinesReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachinesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MachinesReply::ArenaDtor(void* object) {
  MachinesReply* _this = reinterpret_cast< MachinesReply* >(object);
  (void)_this;
}
void MachinesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachinesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachinesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MachinesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachinesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .machine.service.v1.MachineStruct machines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_machines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachinesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MachinesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .machine.service.v1.MachineStruct machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_machines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_machines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MachinesReply)
  return target;
}

size_t MachinesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MachinesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .machine.service.v1.MachineStruct machines = 1;
  total_size += 1UL * this->_internal_machines_size();
  for (const auto& msg : this->machines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachinesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachinesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachinesReply::GetClassData() const { return &_class_data_; }

void MachinesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachinesReply *>(to)->MergeFrom(
      static_cast<const MachinesReply &>(from));
}


void MachinesReply::MergeFrom(const MachinesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MachinesReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  machines_.MergeFrom(from.machines_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachinesReply::CopyFrom(const MachinesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MachinesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachinesReply::IsInitialized() const {
  return true;
}

void MachinesReply::InternalSwap(MachinesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  machines_.InternalSwap(&other->machines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MachinesReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[7]);
}

// ===================================================================

class MachineStruct::_Internal {
 public:
};

MachineStruct::MachineStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MachineStruct)
}
MachineStruct::MachineStruct(const MachineStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&machine_id_, &from.machine_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MachineStruct)
}

inline void MachineStruct::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&machine_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
}

MachineStruct::~MachineStruct() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MachineStruct)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachineStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MachineStruct::ArenaDtor(void* object) {
  MachineStruct* _this = reinterpret_cast< MachineStruct* >(object);
  (void)_this;
}
void MachineStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachineStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MachineStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&machine_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.MachineStruct.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MachineStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string address = 3;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.MachineStruct.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MachineStruct)
  return target;
}

size_t MachineStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MachineStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachineStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineStruct::GetClassData() const { return &_class_data_; }

void MachineStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachineStruct *>(to)->MergeFrom(
      static_cast<const MachineStruct &>(from));
}


void MachineStruct::MergeFrom(const MachineStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MachineStruct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineStruct::CopyFrom(const MachineStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MachineStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineStruct::IsInitialized() const {
  return true;
}

void MachineStruct::InternalSwap(MachineStruct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MachineStruct, user_id_)
      + sizeof(MachineStruct::user_id_)
      - PROTOBUF_FIELD_OFFSET(MachineStruct, machine_id_)>(
          reinterpret_cast<char*>(&machine_id_),
          reinterpret_cast<char*>(&other->machine_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[8]);
}

// ===================================================================

class ZeroRequest::_Internal {
 public:
};

ZeroRequest::ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.ZeroRequest)
}
ZeroRequest::ZeroRequest(const ZeroRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.ZeroRequest)
}

inline void ZeroRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

ZeroRequest::~ZeroRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.ZeroRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZeroRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroRequest::ArenaDtor(void* object) {
  ZeroRequest* _this = reinterpret_cast< ZeroRequest* >(object);
  (void)_this;
}
void ZeroRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeroRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeroRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.ZeroRequest)
  return target;
}

size_t ZeroRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.ZeroRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZeroRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroRequest::GetClassData() const { return &_class_data_; }

void ZeroRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZeroRequest *>(to)->MergeFrom(
      static_cast<const ZeroRequest &>(from));
}


void ZeroRequest::MergeFrom(const ZeroRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.ZeroRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroRequest::CopyFrom(const ZeroRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.ZeroRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroRequest::IsInitialized() const {
  return true;
}

void ZeroRequest::InternalSwap(ZeroRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[9]);
}

// ===================================================================

class ZeroReply::_Internal {
 public:
};

ZeroReply::ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.ZeroReply)
}
ZeroReply::ZeroReply(const ZeroReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.ZeroReply)
}

inline void ZeroReply::SharedCtor() {
status_ = false;
}

ZeroReply::~ZeroReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.ZeroReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZeroReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroReply::ArenaDtor(void* object) {
  ZeroReply* _this = reinterpret_cast< ZeroReply* >(object);
  (void)_this;
}
void ZeroReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeroReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeroReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.ZeroReply)
  return target;
}

size_t ZeroReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.ZeroReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZeroReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroReply::GetClassData() const { return &_class_data_; }

void ZeroReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZeroReply *>(to)->MergeFrom(
      static_cast<const ZeroReply &>(from));
}


void ZeroReply::MergeFrom(const ZeroReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.ZeroReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroReply::CopyFrom(const ZeroReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.ZeroReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroReply::IsInitialized() const {
  return true;
}

void ZeroReply::InternalSwap(ZeroReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[10]);
}

// ===================================================================

class GetMotorStatusRequest::_Internal {
 public:
};

GetMotorStatusRequest::GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.GetMotorStatusRequest)
}
GetMotorStatusRequest::GetMotorStatusRequest(const GetMotorStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.GetMotorStatusRequest)
}

inline void GetMotorStatusRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

GetMotorStatusRequest::~GetMotorStatusRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.GetMotorStatusRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMotorStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMotorStatusRequest::ArenaDtor(void* object) {
  GetMotorStatusRequest* _this = reinterpret_cast< GetMotorStatusRequest* >(object);
  (void)_this;
}
void GetMotorStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMotorStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMotorStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.GetMotorStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMotorStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMotorStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.GetMotorStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.GetMotorStatusRequest)
  return target;
}

size_t GetMotorStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.GetMotorStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMotorStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMotorStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMotorStatusRequest::GetClassData() const { return &_class_data_; }

void GetMotorStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMotorStatusRequest *>(to)->MergeFrom(
      static_cast<const GetMotorStatusRequest &>(from));
}


void GetMotorStatusRequest::MergeFrom(const GetMotorStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.GetMotorStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMotorStatusRequest::CopyFrom(const GetMotorStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.GetMotorStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotorStatusRequest::IsInitialized() const {
  return true;
}

void GetMotorStatusRequest::InternalSwap(GetMotorStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotorStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[11]);
}

// ===================================================================

class GetMotorStatusReply::_Internal {
 public:
};

GetMotorStatusReply::GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  motor_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.GetMotorStatusReply)
}
GetMotorStatusReply::GetMotorStatusReply(const GetMotorStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      motor_info_(from.motor_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.GetMotorStatusReply)
}

inline void GetMotorStatusReply::SharedCtor() {
}

GetMotorStatusReply::~GetMotorStatusReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.GetMotorStatusReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMotorStatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMotorStatusReply::ArenaDtor(void* object) {
  GetMotorStatusReply* _this = reinterpret_cast< GetMotorStatusReply* >(object);
  (void)_this;
}
void GetMotorStatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMotorStatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMotorStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.GetMotorStatusReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motor_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMotorStatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .machine.service.v1.MotorInfo motor_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motor_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMotorStatusReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.GetMotorStatusReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .machine.service.v1.MotorInfo motor_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_motor_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_motor_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.GetMotorStatusReply)
  return target;
}

size_t GetMotorStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.GetMotorStatusReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .machine.service.v1.MotorInfo motor_info = 1;
  total_size += 1UL * this->_internal_motor_info_size();
  for (const auto& msg : this->motor_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMotorStatusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMotorStatusReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMotorStatusReply::GetClassData() const { return &_class_data_; }

void GetMotorStatusReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMotorStatusReply *>(to)->MergeFrom(
      static_cast<const GetMotorStatusReply &>(from));
}


void GetMotorStatusReply::MergeFrom(const GetMotorStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.GetMotorStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  motor_info_.MergeFrom(from.motor_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMotorStatusReply::CopyFrom(const GetMotorStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.GetMotorStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotorStatusReply::IsInitialized() const {
  return true;
}

void GetMotorStatusReply::InternalSwap(GetMotorStatusReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  motor_info_.InternalSwap(&other->motor_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotorStatusReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[12]);
}

// ===================================================================

class MotorInfo::_Internal {
 public:
  static const ::machine::service::v1::MotorStatus& motor_status(const MotorInfo* msg);
};

const ::machine::service::v1::MotorStatus&
MotorInfo::_Internal::motor_status(const MotorInfo* msg) {
  return *msg->motor_status_;
}
MotorInfo::MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MotorInfo)
}
MotorInfo::MotorInfo(const MotorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motor_status()) {
    motor_status_ = new ::machine::service::v1::MotorStatus(*from.motor_status_);
  } else {
    motor_status_ = nullptr;
  }
  ::memcpy(&instr_pos_, &from.instr_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_pos_) -
    reinterpret_cast<char*>(&instr_pos_)) + sizeof(current_pos_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MotorInfo)
}

inline void MotorInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&motor_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_pos_) -
    reinterpret_cast<char*>(&motor_status_)) + sizeof(current_pos_));
}

MotorInfo::~MotorInfo() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MotorInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete motor_status_;
}

void MotorInfo::ArenaDtor(void* object) {
  MotorInfo* _this = reinterpret_cast< MotorInfo* >(object);
  (void)_this;
}
void MotorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && motor_status_ != nullptr) {
    delete motor_status_;
  }
  motor_status_ = nullptr;
  ::memset(&instr_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_pos_) -
      reinterpret_cast<char*>(&instr_pos_)) + sizeof(current_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.MotorStatus motor_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motor_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instr_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          instr_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          current_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.MotorStatus motor_status = 1;
  if (this->_internal_has_motor_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::motor_status(this), target, stream);
  }

  // int64 instr_pos = 2;
  if (this->_internal_instr_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_instr_pos(), target);
  }

  // int64 current_pos = 3;
  if (this->_internal_current_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MotorInfo)
  return target;
}

size_t MotorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MotorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.MotorStatus motor_status = 1;
  if (this->_internal_has_motor_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motor_status_);
  }

  // int64 instr_pos = 2;
  if (this->_internal_instr_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_instr_pos());
  }

  // int64 current_pos = 3;
  if (this->_internal_current_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_current_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorInfo::GetClassData() const { return &_class_data_; }

void MotorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotorInfo *>(to)->MergeFrom(
      static_cast<const MotorInfo &>(from));
}


void MotorInfo::MergeFrom(const MotorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MotorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motor_status()) {
    _internal_mutable_motor_status()->::machine::service::v1::MotorStatus::MergeFrom(from._internal_motor_status());
  }
  if (from._internal_instr_pos() != 0) {
    _internal_set_instr_pos(from._internal_instr_pos());
  }
  if (from._internal_current_pos() != 0) {
    _internal_set_current_pos(from._internal_current_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorInfo::CopyFrom(const MotorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MotorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorInfo::IsInitialized() const {
  return true;
}

void MotorInfo::InternalSwap(MotorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorInfo, current_pos_)
      + sizeof(MotorInfo::current_pos_)
      - PROTOBUF_FIELD_OFFSET(MotorInfo, motor_status_)>(
          reinterpret_cast<char*>(&motor_status_),
          reinterpret_cast<char*>(&other->motor_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[13]);
}

// ===================================================================

class MotorStatus::_Internal {
 public:
};

MotorStatus::MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MotorStatus)
}
MotorStatus::MotorStatus(const MotorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fault_, &from.fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_completion_) -
    reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MotorStatus)
}

inline void MotorStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fault_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zero_completion_) -
    reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
}

MotorStatus::~MotorStatus() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MotorStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotorStatus::ArenaDtor(void* object) {
  MotorStatus* _this = reinterpret_cast< MotorStatus* >(object);
  (void)_this;
}
void MotorStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_completion_) -
      reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enabling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool running = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool instruction_completion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          instruction_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool path_completion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          path_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool zero_completion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          zero_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fault = 1;
  if (this->_internal_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fault(), target);
  }

  // bool enabling = 2;
  if (this->_internal_enabling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabling(), target);
  }

  // bool running = 3;
  if (this->_internal_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_running(), target);
  }

  // bool instruction_completion = 4;
  if (this->_internal_instruction_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_instruction_completion(), target);
  }

  // bool path_completion = 5;
  if (this->_internal_path_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_path_completion(), target);
  }

  // bool zero_completion = 6;
  if (this->_internal_zero_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_zero_completion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MotorStatus)
  return target;
}

size_t MotorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MotorStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool fault = 1;
  if (this->_internal_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool enabling = 2;
  if (this->_internal_enabling() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 3;
  if (this->_internal_running() != 0) {
    total_size += 1 + 1;
  }

  // bool instruction_completion = 4;
  if (this->_internal_instruction_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool path_completion = 5;
  if (this->_internal_path_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool zero_completion = 6;
  if (this->_internal_zero_completion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorStatus::GetClassData() const { return &_class_data_; }

void MotorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotorStatus *>(to)->MergeFrom(
      static_cast<const MotorStatus &>(from));
}


void MotorStatus::MergeFrom(const MotorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MotorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fault() != 0) {
    _internal_set_fault(from._internal_fault());
  }
  if (from._internal_enabling() != 0) {
    _internal_set_enabling(from._internal_enabling());
  }
  if (from._internal_running() != 0) {
    _internal_set_running(from._internal_running());
  }
  if (from._internal_instruction_completion() != 0) {
    _internal_set_instruction_completion(from._internal_instruction_completion());
  }
  if (from._internal_path_completion() != 0) {
    _internal_set_path_completion(from._internal_path_completion());
  }
  if (from._internal_zero_completion() != 0) {
    _internal_set_zero_completion(from._internal_zero_completion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorStatus::CopyFrom(const MotorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MotorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorStatus::IsInitialized() const {
  return true;
}

void MotorStatus::InternalSwap(MotorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorStatus, zero_completion_)
      + sizeof(MotorStatus::zero_completion_)
      - PROTOBUF_FIELD_OFFSET(MotorStatus, fault_)>(
          reinterpret_cast<char*>(&fault_),
          reinterpret_cast<char*>(&other->fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[14]);
}

// ===================================================================

class MoveDoneRequest::_Internal {
 public:
};

MoveDoneRequest::MoveDoneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MoveDoneRequest)
}
MoveDoneRequest::MoveDoneRequest(const MoveDoneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MoveDoneRequest)
}

inline void MoveDoneRequest::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
}

MoveDoneRequest::~MoveDoneRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MoveDoneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveDoneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveDoneRequest::ArenaDtor(void* object) {
  MoveDoneRequest* _this = reinterpret_cast< MoveDoneRequest* >(object);
  (void)_this;
}
void MoveDoneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MoveDoneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  check_name_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&x_)) + sizeof(check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDoneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string uuid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.MoveDoneRequest.uuid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.MoveDoneRequest.check_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveDoneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MoveDoneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_check(), target);
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_delay(), target);
  }

  // string uuid = 8;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.MoveDoneRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_uuid(), target);
  }

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.MoveDoneRequest.check_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MoveDoneRequest)
  return target;
}

size_t MoveDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MoveDoneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 8;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 8;
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveDoneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveDoneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveDoneRequest::GetClassData() const { return &_class_data_; }

void MoveDoneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveDoneRequest *>(to)->MergeFrom(
      static_cast<const MoveDoneRequest &>(from));
}


void MoveDoneRequest::MergeFrom(const MoveDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MoveDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_check_name().empty()) {
    _internal_set_check_name(from._internal_check_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = from._internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_check() != 0) {
    _internal_set_check(from._internal_check());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveDoneRequest::CopyFrom(const MoveDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MoveDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDoneRequest::IsInitialized() const {
  return true;
}

void MoveDoneRequest::InternalSwap(MoveDoneRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_name_, lhs_arena,
      &other->check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveDoneRequest, check_)
      + sizeof(MoveDoneRequest::check_)
      - PROTOBUF_FIELD_OFFSET(MoveDoneRequest, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDoneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[15]);
}

// ===================================================================

class MoveDoneReply::_Internal {
 public:
};

MoveDoneReply::MoveDoneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.MoveDoneReply)
}
MoveDoneReply::MoveDoneReply(const MoveDoneReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.MoveDoneReply)
}

inline void MoveDoneReply::SharedCtor() {
status_ = false;
}

MoveDoneReply::~MoveDoneReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.MoveDoneReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveDoneReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveDoneReply::ArenaDtor(void* object) {
  MoveDoneReply* _this = reinterpret_cast< MoveDoneReply* >(object);
  (void)_this;
}
void MoveDoneReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.MoveDoneReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveDoneReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveDoneReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.MoveDoneReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.MoveDoneReply)
  return target;
}

size_t MoveDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.MoveDoneReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveDoneReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveDoneReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveDoneReply::GetClassData() const { return &_class_data_; }

void MoveDoneReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveDoneReply *>(to)->MergeFrom(
      static_cast<const MoveDoneReply &>(from));
}


void MoveDoneReply::MergeFrom(const MoveDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.MoveDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveDoneReply::CopyFrom(const MoveDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.MoveDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDoneReply::IsInitialized() const {
  return true;
}

void MoveDoneReply::InternalSwap(MoveDoneReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDoneReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[16]);
}

// ===================================================================

class CreateCronJobRequest::_Internal {
 public:
  static const ::machine::service::v1::CronJob& cron_job(const CreateCronJobRequest* msg);
};

const ::machine::service::v1::CronJob&
CreateCronJobRequest::_Internal::cron_job(const CreateCronJobRequest* msg) {
  return *msg->cron_job_;
}
CreateCronJobRequest::CreateCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CreateCronJobRequest)
}
CreateCronJobRequest::CreateCronJobRequest(const CreateCronJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cron_job()) {
    cron_job_ = new ::machine::service::v1::CronJob(*from.cron_job_);
  } else {
    cron_job_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CreateCronJobRequest)
}

inline void CreateCronJobRequest::SharedCtor() {
cron_job_ = nullptr;
}

CreateCronJobRequest::~CreateCronJobRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CreateCronJobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCronJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cron_job_;
}

void CreateCronJobRequest::ArenaDtor(void* object) {
  CreateCronJobRequest* _this = reinterpret_cast< CreateCronJobRequest* >(object);
  (void)_this;
}
void CreateCronJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCronJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCronJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CreateCronJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cron_job_ != nullptr) {
    delete cron_job_;
  }
  cron_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCronJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.CronJob cron_job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cron_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateCronJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CreateCronJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.CronJob cron_job = 1;
  if (this->_internal_has_cron_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cron_job(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CreateCronJobRequest)
  return target;
}

size_t CreateCronJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CreateCronJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.CronJob cron_job = 1;
  if (this->_internal_has_cron_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cron_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCronJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCronJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCronJobRequest::GetClassData() const { return &_class_data_; }

void CreateCronJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateCronJobRequest *>(to)->MergeFrom(
      static_cast<const CreateCronJobRequest &>(from));
}


void CreateCronJobRequest::MergeFrom(const CreateCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CreateCronJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cron_job()) {
    _internal_mutable_cron_job()->::machine::service::v1::CronJob::MergeFrom(from._internal_cron_job());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCronJobRequest::CopyFrom(const CreateCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CreateCronJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCronJobRequest::IsInitialized() const {
  return true;
}

void CreateCronJobRequest::InternalSwap(CreateCronJobRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cron_job_, other->cron_job_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCronJobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[17]);
}

// ===================================================================

class DeleteCronJobRequest::_Internal {
 public:
};

DeleteCronJobRequest::DeleteCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.DeleteCronJobRequest)
}
DeleteCronJobRequest::DeleteCronJobRequest(const DeleteCronJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.DeleteCronJobRequest)
}

inline void DeleteCronJobRequest::SharedCtor() {
id_ = int64_t{0};
}

DeleteCronJobRequest::~DeleteCronJobRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.DeleteCronJobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCronJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteCronJobRequest::ArenaDtor(void* object) {
  DeleteCronJobRequest* _this = reinterpret_cast< DeleteCronJobRequest* >(object);
  (void)_this;
}
void DeleteCronJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCronJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCronJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.DeleteCronJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCronJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCronJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.DeleteCronJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.DeleteCronJobRequest)
  return target;
}

size_t DeleteCronJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.DeleteCronJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCronJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCronJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCronJobRequest::GetClassData() const { return &_class_data_; }

void DeleteCronJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteCronJobRequest *>(to)->MergeFrom(
      static_cast<const DeleteCronJobRequest &>(from));
}


void DeleteCronJobRequest::MergeFrom(const DeleteCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.DeleteCronJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCronJobRequest::CopyFrom(const DeleteCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.DeleteCronJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCronJobRequest::IsInitialized() const {
  return true;
}

void DeleteCronJobRequest::InternalSwap(DeleteCronJobRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCronJobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[18]);
}

// ===================================================================

class DeleteCronJobReply::_Internal {
 public:
};

DeleteCronJobReply::DeleteCronJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.DeleteCronJobReply)
}
DeleteCronJobReply::DeleteCronJobReply(const DeleteCronJobReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.DeleteCronJobReply)
}

inline void DeleteCronJobReply::SharedCtor() {
num_ = int64_t{0};
}

DeleteCronJobReply::~DeleteCronJobReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.DeleteCronJobReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCronJobReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteCronJobReply::ArenaDtor(void* object) {
  DeleteCronJobReply* _this = reinterpret_cast< DeleteCronJobReply* >(object);
  (void)_this;
}
void DeleteCronJobReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCronJobReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCronJobReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.DeleteCronJobReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCronJobReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCronJobReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.DeleteCronJobReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.DeleteCronJobReply)
  return target;
}

size_t DeleteCronJobReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.DeleteCronJobReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCronJobReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCronJobReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCronJobReply::GetClassData() const { return &_class_data_; }

void DeleteCronJobReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteCronJobReply *>(to)->MergeFrom(
      static_cast<const DeleteCronJobReply &>(from));
}


void DeleteCronJobReply::MergeFrom(const DeleteCronJobReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.DeleteCronJobReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCronJobReply::CopyFrom(const DeleteCronJobReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.DeleteCronJobReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCronJobReply::IsInitialized() const {
  return true;
}

void DeleteCronJobReply::InternalSwap(DeleteCronJobReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCronJobReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[19]);
}

// ===================================================================

class ListCronJobRequest::_Internal {
 public:
};

ListCronJobRequest::ListCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.ListCronJobRequest)
}
ListCronJobRequest::ListCronJobRequest(const ListCronJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machineid_ = from.machineid_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.ListCronJobRequest)
}

inline void ListCronJobRequest::SharedCtor() {
machineid_ = int64_t{0};
}

ListCronJobRequest::~ListCronJobRequest() {
  // @@protoc_insertion_point(destructor:machine.service.v1.ListCronJobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCronJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCronJobRequest::ArenaDtor(void* object) {
  ListCronJobRequest* _this = reinterpret_cast< ListCronJobRequest* >(object);
  (void)_this;
}
void ListCronJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCronJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCronJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.ListCronJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machineid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCronJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machineId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCronJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.ListCronJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machineId = 1;
  if (this->_internal_machineid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machineid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.ListCronJobRequest)
  return target;
}

size_t ListCronJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.ListCronJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machineId = 1;
  if (this->_internal_machineid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machineid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCronJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCronJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCronJobRequest::GetClassData() const { return &_class_data_; }

void ListCronJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCronJobRequest *>(to)->MergeFrom(
      static_cast<const ListCronJobRequest &>(from));
}


void ListCronJobRequest::MergeFrom(const ListCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.ListCronJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machineid() != 0) {
    _internal_set_machineid(from._internal_machineid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCronJobRequest::CopyFrom(const ListCronJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.ListCronJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCronJobRequest::IsInitialized() const {
  return true;
}

void ListCronJobRequest::InternalSwap(ListCronJobRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machineid_, other->machineid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCronJobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[20]);
}

// ===================================================================

class CronJobReply::_Internal {
 public:
  static const ::machine::service::v1::CronJob& cron_job(const CronJobReply* msg);
};

const ::machine::service::v1::CronJob&
CronJobReply::_Internal::cron_job(const CronJobReply* msg) {
  return *msg->cron_job_;
}
CronJobReply::CronJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CronJobReply)
}
CronJobReply::CronJobReply(const CronJobReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cron_job()) {
    cron_job_ = new ::machine::service::v1::CronJob(*from.cron_job_);
  } else {
    cron_job_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CronJobReply)
}

inline void CronJobReply::SharedCtor() {
cron_job_ = nullptr;
}

CronJobReply::~CronJobReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CronJobReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CronJobReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cron_job_;
}

void CronJobReply::ArenaDtor(void* object) {
  CronJobReply* _this = reinterpret_cast< CronJobReply* >(object);
  (void)_this;
}
void CronJobReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CronJobReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CronJobReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CronJobReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cron_job_ != nullptr) {
    delete cron_job_;
  }
  cron_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CronJobReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .machine.service.v1.CronJob cron_job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cron_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CronJobReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CronJobReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.service.v1.CronJob cron_job = 1;
  if (this->_internal_has_cron_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cron_job(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CronJobReply)
  return target;
}

size_t CronJobReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CronJobReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.CronJob cron_job = 1;
  if (this->_internal_has_cron_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cron_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CronJobReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CronJobReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CronJobReply::GetClassData() const { return &_class_data_; }

void CronJobReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CronJobReply *>(to)->MergeFrom(
      static_cast<const CronJobReply &>(from));
}


void CronJobReply::MergeFrom(const CronJobReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CronJobReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cron_job()) {
    _internal_mutable_cron_job()->::machine::service::v1::CronJob::MergeFrom(from._internal_cron_job());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CronJobReply::CopyFrom(const CronJobReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CronJobReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CronJobReply::IsInitialized() const {
  return true;
}

void CronJobReply::InternalSwap(CronJobReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cron_job_, other->cron_job_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CronJobReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[21]);
}

// ===================================================================

class CronJobsReply::_Internal {
 public:
};

CronJobsReply::CronJobsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cron_jobs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CronJobsReply)
}
CronJobsReply::CronJobsReply(const CronJobsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cron_jobs_(from.cron_jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CronJobsReply)
}

inline void CronJobsReply::SharedCtor() {
}

CronJobsReply::~CronJobsReply() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CronJobsReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CronJobsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CronJobsReply::ArenaDtor(void* object) {
  CronJobsReply* _this = reinterpret_cast< CronJobsReply* >(object);
  (void)_this;
}
void CronJobsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CronJobsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CronJobsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CronJobsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cron_jobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CronJobsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .machine.service.v1.CronJob cron_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cron_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CronJobsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CronJobsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .machine.service.v1.CronJob cron_jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cron_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cron_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CronJobsReply)
  return target;
}

size_t CronJobsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CronJobsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .machine.service.v1.CronJob cron_jobs = 1;
  total_size += 1UL * this->_internal_cron_jobs_size();
  for (const auto& msg : this->cron_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CronJobsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CronJobsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CronJobsReply::GetClassData() const { return &_class_data_; }

void CronJobsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CronJobsReply *>(to)->MergeFrom(
      static_cast<const CronJobsReply &>(from));
}


void CronJobsReply::MergeFrom(const CronJobsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CronJobsReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cron_jobs_.MergeFrom(from.cron_jobs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CronJobsReply::CopyFrom(const CronJobsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CronJobsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CronJobsReply::IsInitialized() const {
  return true;
}

void CronJobsReply::InternalSwap(CronJobsReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cron_jobs_.InternalSwap(&other->cron_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CronJobsReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[22]);
}

// ===================================================================

class CronJob::_Internal {
 public:
};

CronJob::CronJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  check_coordinates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CronJob)
}
CronJob::CronJob(const CronJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      check_coordinates_(from.check_coordinates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_name(), 
      GetArenaForAllocation());
  }
  cron_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cron_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cron_string().empty()) {
    cron_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cron_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&machineid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(machineid_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CronJob)
}

inline void CronJob::SharedCtor() {
check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cron_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cron_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&machineid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(machineid_));
}

CronJob::~CronJob() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CronJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CronJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  check_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cron_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CronJob::ArenaDtor(void* object) {
  CronJob* _this = reinterpret_cast< CronJob* >(object);
  (void)_this;
}
void CronJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CronJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CronJob::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CronJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_coordinates_.Clear();
  check_name_.ClearToEmpty();
  cron_string_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&machineid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(machineid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CronJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 machineId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          machineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_check_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.CronJob.check_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cron_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cron_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.CronJob.cron_string"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .machine.service.v1.CheckCoordinate check_coordinates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_check_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CronJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CronJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 machineId = 2;
  if (this->_internal_machineid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_machineid(), target);
  }

  // string check_name = 3;
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.CronJob.check_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_check_name(), target);
  }

  // string cron_string = 4;
  if (!this->_internal_cron_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cron_string().data(), static_cast<int>(this->_internal_cron_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.CronJob.cron_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cron_string(), target);
  }

  // repeated .machine.service.v1.CheckCoordinate check_coordinates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_check_coordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_check_coordinates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CronJob)
  return target;
}

size_t CronJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CronJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .machine.service.v1.CheckCoordinate check_coordinates = 5;
  total_size += 1UL * this->_internal_check_coordinates_size();
  for (const auto& msg : this->check_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string check_name = 3;
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // string cron_string = 4;
  if (!this->_internal_cron_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cron_string());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 machineId = 2;
  if (this->_internal_machineid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machineid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CronJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CronJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CronJob::GetClassData() const { return &_class_data_; }

void CronJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CronJob *>(to)->MergeFrom(
      static_cast<const CronJob &>(from));
}


void CronJob::MergeFrom(const CronJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CronJob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  check_coordinates_.MergeFrom(from.check_coordinates_);
  if (!from._internal_check_name().empty()) {
    _internal_set_check_name(from._internal_check_name());
  }
  if (!from._internal_cron_string().empty()) {
    _internal_set_cron_string(from._internal_cron_string());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_machineid() != 0) {
    _internal_set_machineid(from._internal_machineid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CronJob::CopyFrom(const CronJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CronJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CronJob::IsInitialized() const {
  return true;
}

void CronJob::InternalSwap(CronJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  check_coordinates_.InternalSwap(&other->check_coordinates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_name_, lhs_arena,
      &other->check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cron_string_, lhs_arena,
      &other->cron_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CronJob, machineid_)
      + sizeof(CronJob::machineid_)
      - PROTOBUF_FIELD_OFFSET(CronJob, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CronJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[23]);
}

// ===================================================================

class CheckCoordinate::_Internal {
 public:
  static const ::machine::service::v1::Coordinate& crd(const CheckCoordinate* msg);
};

const ::machine::service::v1::Coordinate&
CheckCoordinate::_Internal::crd(const CheckCoordinate* msg) {
  return *msg->crd_;
}
CheckCoordinate::CheckCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.CheckCoordinate)
}
CheckCoordinate::CheckCoordinate(const CheckCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crd()) {
    crd_ = new ::machine::service::v1::Coordinate(*from.crd_);
  } else {
    crd_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.CheckCoordinate)
}

inline void CheckCoordinate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&crd_)) + sizeof(seq_));
}

CheckCoordinate::~CheckCoordinate() {
  // @@protoc_insertion_point(destructor:machine.service.v1.CheckCoordinate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete crd_;
}

void CheckCoordinate::ArenaDtor(void* object) {
  CheckCoordinate* _this = reinterpret_cast< CheckCoordinate* >(object);
  (void)_this;
}
void CheckCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.CheckCoordinate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && crd_ != nullptr) {
    delete crd_;
  }
  crd_ = nullptr;
  seq_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .machine.service.v1.Coordinate crd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckCoordinate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.CheckCoordinate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // .machine.service.v1.Coordinate crd = 2;
  if (this->_internal_has_crd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::crd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.CheckCoordinate)
  return target;
}

size_t CheckCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.CheckCoordinate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .machine.service.v1.Coordinate crd = 2;
  if (this->_internal_has_crd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crd_);
  }

  // int64 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckCoordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckCoordinate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckCoordinate::GetClassData() const { return &_class_data_; }

void CheckCoordinate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckCoordinate *>(to)->MergeFrom(
      static_cast<const CheckCoordinate &>(from));
}


void CheckCoordinate::MergeFrom(const CheckCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.CheckCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crd()) {
    _internal_mutable_crd()->::machine::service::v1::Coordinate::MergeFrom(from._internal_crd());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckCoordinate::CopyFrom(const CheckCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.CheckCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCoordinate::IsInitialized() const {
  return true;
}

void CheckCoordinate::InternalSwap(CheckCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckCoordinate, seq_)
      + sizeof(CheckCoordinate::seq_)
      - PROTOBUF_FIELD_OFFSET(CheckCoordinate, crd_)>(
          reinterpret_cast<char*>(&crd_),
          reinterpret_cast<char*>(&other->crd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckCoordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[24]);
}

// ===================================================================

class Coordinate::_Internal {
 public:
};

Coordinate::Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:machine.service.v1.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
  // @@protoc_insertion_point(copy_constructor:machine.service.v1.Coordinate)
}

inline void Coordinate::SharedCtor() {
check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:machine.service.v1.Coordinate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  check_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Coordinate::ArenaDtor(void* object) {
  Coordinate* _this = reinterpret_cast< Coordinate* >(object);
  (void)_this;
}
void Coordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.service.v1.Coordinate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_name_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&x_)) + sizeof(check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 machine_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "machine.service.v1.Coordinate.check_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coordinate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:machine.service.v1.Coordinate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_check(), target);
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_delay(), target);
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_machine_id(), target);
  }

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "machine.service.v1.Coordinate.check_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.service.v1.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.service.v1.Coordinate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 8;
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coordinate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coordinate::GetClassData() const { return &_class_data_; }

void Coordinate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Coordinate *>(to)->MergeFrom(
      static_cast<const Coordinate &>(from));
}


void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.service.v1.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_check_name().empty()) {
    _internal_set_check_name(from._internal_check_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = from._internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from._internal_check() != 0) {
    _internal_set_check(from._internal_check());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.service.v1.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_name_, lhs_arena,
      &other->check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinate, check_)
      + sizeof(Coordinate::check_)
      - PROTOBUF_FIELD_OFFSET(Coordinate, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_machine_2eproto_getter, &descriptor_table_machine_2eproto_once,
      file_level_metadata_machine_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace machine
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::machine::service::v1::FindByUserIdRequest* Arena::CreateMaybeMessage< ::machine::service::v1::FindByUserIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::FindByUserIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CreateRequest* Arena::CreateMaybeMessage< ::machine::service::v1::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::UpdateRequest* Arena::CreateMaybeMessage< ::machine::service::v1::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::GetRequest* Arena::CreateMaybeMessage< ::machine::service::v1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MoveRequest* Arena::CreateMaybeMessage< ::machine::service::v1::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MoveReply* Arena::CreateMaybeMessage< ::machine::service::v1::MoveReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MoveReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MachineReply* Arena::CreateMaybeMessage< ::machine::service::v1::MachineReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MachineReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MachinesReply* Arena::CreateMaybeMessage< ::machine::service::v1::MachinesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MachinesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MachineStruct* Arena::CreateMaybeMessage< ::machine::service::v1::MachineStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MachineStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::ZeroRequest* Arena::CreateMaybeMessage< ::machine::service::v1::ZeroRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::ZeroRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::ZeroReply* Arena::CreateMaybeMessage< ::machine::service::v1::ZeroReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::ZeroReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::GetMotorStatusRequest* Arena::CreateMaybeMessage< ::machine::service::v1::GetMotorStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::GetMotorStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::GetMotorStatusReply* Arena::CreateMaybeMessage< ::machine::service::v1::GetMotorStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::GetMotorStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MotorInfo* Arena::CreateMaybeMessage< ::machine::service::v1::MotorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MotorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MotorStatus* Arena::CreateMaybeMessage< ::machine::service::v1::MotorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MotorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MoveDoneRequest* Arena::CreateMaybeMessage< ::machine::service::v1::MoveDoneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MoveDoneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::MoveDoneReply* Arena::CreateMaybeMessage< ::machine::service::v1::MoveDoneReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::MoveDoneReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CreateCronJobRequest* Arena::CreateMaybeMessage< ::machine::service::v1::CreateCronJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CreateCronJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::DeleteCronJobRequest* Arena::CreateMaybeMessage< ::machine::service::v1::DeleteCronJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::DeleteCronJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::DeleteCronJobReply* Arena::CreateMaybeMessage< ::machine::service::v1::DeleteCronJobReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::DeleteCronJobReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::ListCronJobRequest* Arena::CreateMaybeMessage< ::machine::service::v1::ListCronJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::ListCronJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CronJobReply* Arena::CreateMaybeMessage< ::machine::service::v1::CronJobReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CronJobReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CronJobsReply* Arena::CreateMaybeMessage< ::machine::service::v1::CronJobsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CronJobsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CronJob* Arena::CreateMaybeMessage< ::machine::service::v1::CronJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CronJob >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::CheckCoordinate* Arena::CreateMaybeMessage< ::machine::service::v1::CheckCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::CheckCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::machine::service::v1::Coordinate* Arena::CreateMaybeMessage< ::machine::service::v1::Coordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::machine::service::v1::Coordinate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
