// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: interface.proto
#ifndef GRPC_interface_2eproto__INCLUDED
#define GRPC_interface_2eproto__INCLUDED

#include "interface.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace htpp {
namespace interface {
namespace v1 {

// The interface service definition.
class Interface final {
 public:
  static constexpr char const* service_full_name() {
    return "htpp.interface.v1.Interface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::htpp::interface::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> AsyncLogin(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::htpp::interface::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> AsyncRegister(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::htpp::interface::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> AsyncGetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(AsyncGetCurrentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> PrepareAsyncGetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(PrepareAsyncGetCurrentUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::htpp::interface::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::htpp::interface::v1::ImageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>> AsyncReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>>(AsyncReadOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>> PrepareAsyncReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>>(PrepareAsyncReadOneRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::htpp::interface::v1::ImagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>> AsyncReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::htpp::interface::v1::ImageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>> AsyncReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>>(AsyncReadOneWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>> PrepareAsyncReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>>(PrepareAsyncReadOneWithBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::htpp::interface::v1::ImagesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>> AsyncReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>>(AsyncReadAllWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>> PrepareAsyncReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>>(PrepareAsyncReadAllWithBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImageWithAreaReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>> AsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>>(AsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>> PrepareAsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>>(PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImagesWithAreaReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>> AsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>>(AsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>> PrepareAsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>>(PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::htpp::interface::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> AsyncRegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(AsyncRegisterMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> PrepareAsyncRegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(PrepareAsyncRegisterMachineRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::htpp::interface::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> AsyncUpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(AsyncUpdateMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> PrepareAsyncUpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(PrepareAsyncUpdateMachineRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::htpp::interface::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> AsyncGetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(AsyncGetMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>> PrepareAsyncGetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>>(PrepareAsyncGetMachineRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::htpp::interface::v1::MachinesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>> AsyncGetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>>(AsyncGetCurrentUserMachinesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>> PrepareAsyncGetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>>(PrepareAsyncGetCurrentUserMachinesRaw(context, request, cq));
    }
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::htpp::interface::v1::MoveReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>> AsyncMove(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>> PrepareAsyncMove(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::htpp::interface::v1::ZeroReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::htpp::interface::v1::GetMotorStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* AsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* PrepareAsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::UserReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>* AsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>* PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>* AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageReply>* PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>* AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesReply>* PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>* AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImageWithAreaReply>* PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>* AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ImagesWithAreaReply>* PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* AsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* PrepareAsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* AsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* PrepareAsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* AsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachineReply>* PrepareAsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>* AsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MachinesReply>* PrepareAsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>* AsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::MoveReply>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::interface::v1::GetMotorStatusReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::htpp::interface::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> AsyncLogin(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::htpp::interface::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> AsyncRegister(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::htpp::interface::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> AsyncGetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(AsyncGetCurrentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> PrepareAsyncGetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(PrepareAsyncGetCurrentUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::htpp::interface::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    ::grpc::Status ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::htpp::interface::v1::ImageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>> AsyncReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>>(AsyncReadOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>> PrepareAsyncReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>>(PrepareAsyncReadOneRaw(context, request, cq));
    }
    ::grpc::Status ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::htpp::interface::v1::ImagesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>> AsyncReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>>(AsyncReadAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>> PrepareAsyncReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>>(PrepareAsyncReadAllRaw(context, request, cq));
    }
    ::grpc::Status ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::htpp::interface::v1::ImageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>> AsyncReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>>(AsyncReadOneWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>> PrepareAsyncReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>>(PrepareAsyncReadOneWithBinaryRaw(context, request, cq));
    }
    ::grpc::Status ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::htpp::interface::v1::ImagesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>> AsyncReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>>(AsyncReadAllWithBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>> PrepareAsyncReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>>(PrepareAsyncReadAllWithBinaryRaw(context, request, cq));
    }
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImageWithAreaReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>> AsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>>(AsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>> PrepareAsyncReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>>(PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq));
    }
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImagesWithAreaReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>> AsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>>(AsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>> PrepareAsyncReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>>(PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq));
    }
    ::grpc::Status RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::htpp::interface::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> AsyncRegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(AsyncRegisterMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> PrepareAsyncRegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(PrepareAsyncRegisterMachineRaw(context, request, cq));
    }
    ::grpc::Status UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::htpp::interface::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> AsyncUpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(AsyncUpdateMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> PrepareAsyncUpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(PrepareAsyncUpdateMachineRaw(context, request, cq));
    }
    ::grpc::Status GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::htpp::interface::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> AsyncGetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(AsyncGetMachineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>> PrepareAsyncGetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>>(PrepareAsyncGetMachineRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::htpp::interface::v1::MachinesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>> AsyncGetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>>(AsyncGetCurrentUserMachinesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>> PrepareAsyncGetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>>(PrepareAsyncGetCurrentUserMachinesRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::htpp::interface::v1::MoveReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>> AsyncMove(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>> PrepareAsyncMove(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::htpp::interface::v1::ZeroReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::htpp::interface::v1::GetMotorStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)>) override;
      void ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)>) override;
      void ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, std::function<void(::grpc::Status)>) override;
      void Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, std::function<void(::grpc::Status)>) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, std::function<void(::grpc::Status)>) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* AsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* PrepareAsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* AsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* AsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>* AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>* PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>* AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>* PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* AsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* PrepareAsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* AsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* PrepareAsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* AsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* PrepareAsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>* AsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>* PrepareAsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>* AsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOne_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAll_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOneWithBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAllWithBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadOneWithBinaryAndCalArea_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAllWithBinaryAndCalArea_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterMachine_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMachine_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMachine_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentUserMachines_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
    const ::grpc::internal::RpcMethod rpcmethod_Zero_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMotorStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response);
    virtual ::grpc::Status GetCurrentUser(::grpc::ServerContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response);
    virtual ::grpc::Status ReadOne(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response);
    virtual ::grpc::Status ReadAll(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response);
    virtual ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response);
    virtual ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response);
    virtual ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response);
    virtual ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response);
    virtual ::grpc::Status RegisterMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response);
    virtual ::grpc::Status UpdateMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response);
    virtual ::grpc::Status GetMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response);
    virtual ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response);
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response);
    virtual ::grpc::Status Zero(::grpc::ServerContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response);
    virtual ::grpc::Status GetMotorStatus(::grpc::ServerContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::htpp::interface::v1::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::htpp::interface::v1::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUser(::grpc::ServerContext* context, ::htpp::interface::v1::GetCurrentUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::htpp::interface::v1::UpdateUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOne() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOne(::grpc::ServerContext* context, ::htpp::interface::v1::ReadOneRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAll() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::htpp::interface::v1::ReadAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinary(::grpc::ServerContext* context, ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinary(::grpc::ServerContext* context, ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImagesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImageWithAreaReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ImagesWithAreaReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterMachine(::grpc::ServerContext* context, ::htpp::interface::v1::RegisterMachineRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMachine(::grpc::ServerContext* context, ::htpp::interface::v1::UpdateMachineRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMachine() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMachine(::grpc::ServerContext* context, ::htpp::interface::v1::GetMachineRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUserMachines(::grpc::ServerContext* context, ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::MachinesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::htpp::interface::v1::MoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::MoveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Zero() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::htpp::interface::v1::ZeroRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::ZeroReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::htpp::interface::v1::GetMotorStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::interface::v1::GetMotorStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Register<WithAsyncMethod_GetCurrentUser<WithAsyncMethod_UpdateUser<WithAsyncMethod_ReadOne<WithAsyncMethod_ReadAll<WithAsyncMethod_ReadOneWithBinary<WithAsyncMethod_ReadAllWithBinary<WithAsyncMethod_ReadOneWithBinaryAndCalArea<WithAsyncMethod_ReadAllWithBinaryAndCalArea<WithAsyncMethod_RegisterMachine<WithAsyncMethod_UpdateMachine<WithAsyncMethod_GetMachine<WithAsyncMethod_GetCurrentUserMachines<WithAsyncMethod_Move<WithAsyncMethod_Zero<WithAsyncMethod_GetMotorStatus<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response) { return this->GetCurrentUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentUser(
        ::grpc::MessageAllocator< ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUser(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response) { return this->UpdateUser(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUser(
        ::grpc::MessageAllocator< ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOne() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response) { return this->ReadOne(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOne(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOne(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAll() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response) { return this->ReadAll(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAll(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAll(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response) { return this->ReadOneWithBinary(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOneWithBinary(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response) { return this->ReadAllWithBinary(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAllWithBinary(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response) { return this->ReadOneWithBinaryAndCalArea(context, request, response); }));}
    void SetMessageAllocatorFor_ReadOneWithBinaryAndCalArea(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response) { return this->ReadAllWithBinaryAndCalArea(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAllWithBinaryAndCalArea(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response) { return this->RegisterMachine(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterMachine(
        ::grpc::MessageAllocator< ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response) { return this->UpdateMachine(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMachine(
        ::grpc::MessageAllocator< ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMachine() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response) { return this->GetMachine(context, request, response); }));}
    void SetMessageAllocatorFor_GetMachine(
        ::grpc::MessageAllocator< ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response) { return this->GetCurrentUserMachines(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentUserMachines(
        ::grpc::MessageAllocator< ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUserMachines(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Move() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::MessageAllocator< ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response) { return this->Zero(context, request, response); }));}
    void SetMessageAllocatorFor_Zero(
        ::grpc::MessageAllocator< ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response) { return this->GetMotorStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetMotorStatus(
        ::grpc::MessageAllocator< ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_Register<WithCallbackMethod_GetCurrentUser<WithCallbackMethod_UpdateUser<WithCallbackMethod_ReadOne<WithCallbackMethod_ReadAll<WithCallbackMethod_ReadOneWithBinary<WithCallbackMethod_ReadAllWithBinary<WithCallbackMethod_ReadOneWithBinaryAndCalArea<WithCallbackMethod_ReadAllWithBinaryAndCalArea<WithCallbackMethod_RegisterMachine<WithCallbackMethod_UpdateMachine<WithCallbackMethod_GetMachine<WithCallbackMethod_GetCurrentUserMachines<WithCallbackMethod_Move<WithCallbackMethod_Zero<WithCallbackMethod_GetMotorStatus<Service > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOne() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAll() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMachine() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Zero() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOne() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAll() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterMachine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMachine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMachine() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMachine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUserMachines(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Zero() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOne() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOne(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOne(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAll() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAll(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOneWithBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAllWithBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadOneWithBinaryAndCalArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadOneWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAllWithBinaryAndCalArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAllWithBinaryAndCalArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterMachine(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMachine(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMachine() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMachine(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMachine(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentUserMachines(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUserMachines(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Move() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~WithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Zero(context, request, response); }));
    }
    ~WithRawCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMotorStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::LoginRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::LoginRequest,::htpp::interface::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::RegisterRequest,::htpp::interface::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply>* streamer) {
                       return this->StreamedGetCurrentUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::GetCurrentUserRequest,::htpp::interface::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply>* streamer) {
                       return this->StreamedUpdateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateUserRequest* /*request*/, ::htpp::interface::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::UpdateUserRequest,::htpp::interface::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOne() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply>* streamer) {
                       return this->StreamedReadOne(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOne(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadOneRequest,::htpp::interface::v1::ImageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAll() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply>* streamer) {
                       return this->StreamedReadAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAll(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadAllRequest,::htpp::interface::v1::ImagesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOneWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOneWithBinary() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply>* streamer) {
                       return this->StreamedReadOneWithBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOneWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOneWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOneWithBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadOneWithBinaryRequest,::htpp::interface::v1::ImageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAllWithBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAllWithBinary() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply>* streamer) {
                       return this->StreamedReadAllWithBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAllWithBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAllWithBinary(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryRequest* /*request*/, ::htpp::interface::v1::ImagesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAllWithBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadAllWithBinaryRequest,::htpp::interface::v1::ImagesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply>* streamer) {
                       return this->StreamedReadOneWithBinaryAndCalArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadOneWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImageWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest,::htpp::interface::v1::ImageWithAreaReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply>* streamer) {
                       return this->StreamedReadAllWithBinaryAndCalArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAllWithBinaryAndCalArea(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* /*request*/, ::htpp::interface::v1::ImagesWithAreaReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest,::htpp::interface::v1::ImagesWithAreaReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterMachine() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply>* streamer) {
                       return this->StreamedRegisterMachine(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::RegisterMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterMachine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::RegisterMachineRequest,::htpp::interface::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMachine() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply>* streamer) {
                       return this->StreamedUpdateMachine(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::UpdateMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMachine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::UpdateMachineRequest,::htpp::interface::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMachine() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply>* streamer) {
                       return this->StreamedGetMachine(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMachine(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMachineRequest* /*request*/, ::htpp::interface::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMachine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::GetMachineRequest,::htpp::interface::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentUserMachines : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentUserMachines() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply>* streamer) {
                       return this->StreamedGetCurrentUserMachines(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentUserMachines() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentUserMachines(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* /*request*/, ::htpp::interface::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentUserMachines(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::GetCurrentUserMachinesRequest,::htpp::interface::v1::MachinesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::MoveRequest* /*request*/, ::htpp::interface::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::MoveRequest,::htpp::interface::v1::MoveReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Zero() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply>* streamer) {
                       return this->StreamedZero(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::ZeroRequest* /*request*/, ::htpp::interface::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZero(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::ZeroRequest,::htpp::interface::v1::ZeroReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply>* streamer) {
                       return this->StreamedGetMotorStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::interface::v1::GetMotorStatusRequest* /*request*/, ::htpp::interface::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMotorStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::interface::v1::GetMotorStatusRequest,::htpp::interface::v1::GetMotorStatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_GetCurrentUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_ReadOne<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadOneWithBinary<WithStreamedUnaryMethod_ReadAllWithBinary<WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea<WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea<WithStreamedUnaryMethod_RegisterMachine<WithStreamedUnaryMethod_UpdateMachine<WithStreamedUnaryMethod_GetMachine<WithStreamedUnaryMethod_GetCurrentUserMachines<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_GetCurrentUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_ReadOne<WithStreamedUnaryMethod_ReadAll<WithStreamedUnaryMethod_ReadOneWithBinary<WithStreamedUnaryMethod_ReadAllWithBinary<WithStreamedUnaryMethod_ReadOneWithBinaryAndCalArea<WithStreamedUnaryMethod_ReadAllWithBinaryAndCalArea<WithStreamedUnaryMethod_RegisterMachine<WithStreamedUnaryMethod_UpdateMachine<WithStreamedUnaryMethod_GetMachine<WithStreamedUnaryMethod_GetCurrentUserMachines<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace interface
}  // namespace htpp


#endif  // GRPC_interface_2eproto__INCLUDED
