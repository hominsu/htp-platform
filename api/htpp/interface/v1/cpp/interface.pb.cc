// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace htpp {
namespace interface {
namespace v1 {
constexpr LoginRequest_User::LoginRequest_User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginRequest_UserDefaultTypeInternal {
  constexpr LoginRequest_UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginRequest_UserDefaultTypeInternal() {}
  union {
    LoginRequest_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginRequest_UserDefaultTypeInternal _LoginRequest_User_default_instance_;
constexpr LoginRequest::LoginRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr){}
struct LoginRequestDefaultTypeInternal {
  constexpr LoginRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
constexpr RegisterRequest_User::RegisterRequest_User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegisterRequest_UserDefaultTypeInternal {
  constexpr RegisterRequest_UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterRequest_UserDefaultTypeInternal() {}
  union {
    RegisterRequest_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequest_UserDefaultTypeInternal _RegisterRequest_User_default_instance_;
constexpr RegisterRequest::RegisterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr){}
struct RegisterRequestDefaultTypeInternal {
  constexpr RegisterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
constexpr GetCurrentUserRequest::GetCurrentUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct GetCurrentUserRequestDefaultTypeInternal {
  constexpr GetCurrentUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCurrentUserRequestDefaultTypeInternal() {}
  union {
    GetCurrentUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCurrentUserRequestDefaultTypeInternal _GetCurrentUserRequest_default_instance_;
constexpr UpdateUserRequest_User::UpdateUserRequest_User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct UpdateUserRequest_UserDefaultTypeInternal {
  constexpr UpdateUserRequest_UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUserRequest_UserDefaultTypeInternal() {}
  union {
    UpdateUserRequest_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUserRequest_UserDefaultTypeInternal _UpdateUserRequest_User_default_instance_;
constexpr UpdateUserRequest::UpdateUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr){}
struct UpdateUserRequestDefaultTypeInternal {
  constexpr UpdateUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateUserRequestDefaultTypeInternal() {}
  union {
    UpdateUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
constexpr UserReply_User::UserReply_User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct UserReply_UserDefaultTypeInternal {
  constexpr UserReply_UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserReply_UserDefaultTypeInternal() {}
  union {
    UserReply_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserReply_UserDefaultTypeInternal _UserReply_User_default_instance_;
constexpr UserReply::UserReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(nullptr){}
struct UserReplyDefaultTypeInternal {
  constexpr UserReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserReplyDefaultTypeInternal() {}
  union {
    UserReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserReplyDefaultTypeInternal _UserReply_default_instance_;
constexpr ReadOneRequest::ReadOneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct ReadOneRequestDefaultTypeInternal {
  constexpr ReadOneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadOneRequestDefaultTypeInternal() {}
  union {
    ReadOneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadOneRequestDefaultTypeInternal _ReadOneRequest_default_instance_;
constexpr ReadAllRequest::ReadAllRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReadAllRequestDefaultTypeInternal {
  constexpr ReadAllRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadAllRequestDefaultTypeInternal() {}
  union {
    ReadAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadAllRequestDefaultTypeInternal _ReadAllRequest_default_instance_;
constexpr ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct ReadOneWithBinaryRequestDefaultTypeInternal {
  constexpr ReadOneWithBinaryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadOneWithBinaryRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadOneWithBinaryRequestDefaultTypeInternal _ReadOneWithBinaryRequest_default_instance_;
constexpr ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReadAllWithBinaryRequestDefaultTypeInternal {
  constexpr ReadAllWithBinaryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadAllWithBinaryRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadAllWithBinaryRequestDefaultTypeInternal _ReadAllWithBinaryRequest_default_instance_;
constexpr ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal {
  constexpr ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryAndCalAreaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadOneWithBinaryAndCalAreaRequest_default_instance_;
constexpr ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal {
  constexpr ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryAndCalAreaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadAllWithBinaryAndCalAreaRequest_default_instance_;
constexpr ImageReply::ImageReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr){}
struct ImageReplyDefaultTypeInternal {
  constexpr ImageReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageReplyDefaultTypeInternal() {}
  union {
    ImageReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageReplyDefaultTypeInternal _ImageReply_default_instance_;
constexpr ImagesReply::ImagesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_(){}
struct ImagesReplyDefaultTypeInternal {
  constexpr ImagesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImagesReplyDefaultTypeInternal() {}
  union {
    ImagesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImagesReplyDefaultTypeInternal _ImagesReply_default_instance_;
constexpr ImageWithAreaReply::ImageWithAreaReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr)
  , pixels_(int64_t{0})
  , area_(0){}
struct ImageWithAreaReplyDefaultTypeInternal {
  constexpr ImageWithAreaReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageWithAreaReplyDefaultTypeInternal() {}
  union {
    ImageWithAreaReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageWithAreaReplyDefaultTypeInternal _ImageWithAreaReply_default_instance_;
constexpr ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr)
  , pixels_(int64_t{0})
  , area_(0){}
struct ImagesWithAreaReply_DataDefaultTypeInternal {
  constexpr ImagesWithAreaReply_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImagesWithAreaReply_DataDefaultTypeInternal() {}
  union {
    ImagesWithAreaReply_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImagesWithAreaReply_DataDefaultTypeInternal _ImagesWithAreaReply_Data_default_instance_;
constexpr ImagesWithAreaReply::ImagesWithAreaReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(){}
struct ImagesWithAreaReplyDefaultTypeInternal {
  constexpr ImagesWithAreaReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImagesWithAreaReplyDefaultTypeInternal() {}
  union {
    ImagesWithAreaReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImagesWithAreaReplyDefaultTypeInternal _ImagesWithAreaReply_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr GetCurrentUserMachinesRequest::GetCurrentUserMachinesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(int64_t{0}){}
struct GetCurrentUserMachinesRequestDefaultTypeInternal {
  constexpr GetCurrentUserMachinesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCurrentUserMachinesRequestDefaultTypeInternal() {}
  union {
    GetCurrentUserMachinesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCurrentUserMachinesRequestDefaultTypeInternal _GetCurrentUserMachinesRequest_default_instance_;
constexpr RegisterMachineRequest::RegisterMachineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct RegisterMachineRequestDefaultTypeInternal {
  constexpr RegisterMachineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterMachineRequestDefaultTypeInternal() {}
  union {
    RegisterMachineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterMachineRequestDefaultTypeInternal _RegisterMachineRequest_default_instance_;
constexpr UpdateMachineRequest::UpdateMachineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct UpdateMachineRequestDefaultTypeInternal {
  constexpr UpdateMachineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateMachineRequestDefaultTypeInternal() {}
  union {
    UpdateMachineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateMachineRequestDefaultTypeInternal _UpdateMachineRequest_default_instance_;
constexpr GetMachineRequest::GetMachineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct GetMachineRequestDefaultTypeInternal {
  constexpr GetMachineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMachineRequestDefaultTypeInternal() {}
  union {
    GetMachineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMachineRequestDefaultTypeInternal _GetMachineRequest_default_instance_;
constexpr MachineReply::MachineReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_(nullptr){}
struct MachineReplyDefaultTypeInternal {
  constexpr MachineReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachineReplyDefaultTypeInternal() {}
  union {
    MachineReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachineReplyDefaultTypeInternal _MachineReply_default_instance_;
constexpr MachinesReply::MachinesReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machines_(){}
struct MachinesReplyDefaultTypeInternal {
  constexpr MachinesReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachinesReplyDefaultTypeInternal() {}
  union {
    MachinesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachinesReplyDefaultTypeInternal _MachinesReply_default_instance_;
constexpr MachineStruct::MachineStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_id_(int64_t{0})
  , user_id_(int64_t{0}){}
struct MachineStructDefaultTypeInternal {
  constexpr MachineStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachineStructDefaultTypeInternal() {}
  union {
    MachineStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachineStructDefaultTypeInternal _MachineStruct_default_instance_;
constexpr MoveRequest::MoveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , z_(0)
  , rx_(0)
  , ry_(0)
  , delay_(0)
  , machine_id_(int64_t{0})
  , check_(false){}
struct MoveRequestDefaultTypeInternal {
  constexpr MoveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
constexpr MoveReply::MoveReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct MoveReplyDefaultTypeInternal {
  constexpr MoveReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveReplyDefaultTypeInternal() {}
  union {
    MoveReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
constexpr ZeroRequest::ZeroRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct ZeroRequestDefaultTypeInternal {
  constexpr ZeroRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeroRequestDefaultTypeInternal() {}
  union {
    ZeroRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
constexpr ZeroReply::ZeroReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct ZeroReplyDefaultTypeInternal {
  constexpr ZeroReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZeroReplyDefaultTypeInternal() {}
  union {
    ZeroReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
constexpr GetMotorStatusRequest::GetMotorStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_id_(int64_t{0}){}
struct GetMotorStatusRequestDefaultTypeInternal {
  constexpr GetMotorStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMotorStatusRequestDefaultTypeInternal() {}
  union {
    GetMotorStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMotorStatusRequestDefaultTypeInternal _GetMotorStatusRequest_default_instance_;
constexpr GetMotorStatusReply::GetMotorStatusReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor_info_(){}
struct GetMotorStatusReplyDefaultTypeInternal {
  constexpr GetMotorStatusReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetMotorStatusReplyDefaultTypeInternal() {}
  union {
    GetMotorStatusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetMotorStatusReplyDefaultTypeInternal _GetMotorStatusReply_default_instance_;
constexpr MotorInfo::MotorInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motor_status_(nullptr)
  , instr_pos_(int64_t{0})
  , current_pos_(int64_t{0}){}
struct MotorInfoDefaultTypeInternal {
  constexpr MotorInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorInfoDefaultTypeInternal() {}
  union {
    MotorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
constexpr MotorStatus::MotorStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fault_(false)
  , enabling_(false)
  , running_(false)
  , instruction_completion_(false)
  , path_completion_(false)
  , zero_completion_(false){}
struct MotorStatusDefaultTypeInternal {
  constexpr MotorStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorStatusDefaultTypeInternal() {}
  union {
    MotorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
}  // namespace v1
}  // namespace interface
}  // namespace htpp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interface_2eproto[36];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_interface_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interface_2eproto = nullptr;

const uint32_t TableStruct_interface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::LoginRequest_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::LoginRequest_User, email_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::LoginRequest_User, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::LoginRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest_User, username_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest_User, email_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest_User, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetCurrentUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetCurrentUserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest_User, id_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest_User, email_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest_User, username_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest_User, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply_User, id_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply_User, email_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply_User, token_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply_User, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UserReply, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneWithBinaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneWithBinaryRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadAllWithBinaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageReply, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesReply, images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageWithAreaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageWithAreaReply, image_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageWithAreaReply, pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImageWithAreaReply, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply_Data, image_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply_Data, pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply_Data, area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ImagesWithAreaReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::Image, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetCurrentUserMachinesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetCurrentUserMachinesRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterMachineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::RegisterMachineRequest, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateMachineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::UpdateMachineRequest, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMachineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMachineRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineReply, machine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachinesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachinesReply, machines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineStruct, machine_id_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineStruct, user_id_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MachineStruct, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, x_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, y_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, z_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, rx_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, ry_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, check_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, delay_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, machine_id_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveRequest, check_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MoveReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ZeroRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ZeroRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ZeroReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::ZeroReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMotorStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMotorStatusRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMotorStatusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::GetMotorStatusReply, motor_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorInfo, motor_status_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorInfo, instr_pos_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorInfo, current_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, fault_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, enabling_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, running_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, instruction_completion_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, path_completion_),
  PROTOBUF_FIELD_OFFSET(::htpp::interface::v1::MotorStatus, zero_completion_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::htpp::interface::v1::LoginRequest_User)},
  { 8, -1, -1, sizeof(::htpp::interface::v1::LoginRequest)},
  { 15, -1, -1, sizeof(::htpp::interface::v1::RegisterRequest_User)},
  { 24, -1, -1, sizeof(::htpp::interface::v1::RegisterRequest)},
  { 31, -1, -1, sizeof(::htpp::interface::v1::GetCurrentUserRequest)},
  { 38, -1, -1, sizeof(::htpp::interface::v1::UpdateUserRequest_User)},
  { 48, -1, -1, sizeof(::htpp::interface::v1::UpdateUserRequest)},
  { 55, -1, -1, sizeof(::htpp::interface::v1::UserReply_User)},
  { 65, -1, -1, sizeof(::htpp::interface::v1::UserReply)},
  { 72, -1, -1, sizeof(::htpp::interface::v1::ReadOneRequest)},
  { 79, -1, -1, sizeof(::htpp::interface::v1::ReadAllRequest)},
  { 85, -1, -1, sizeof(::htpp::interface::v1::ReadOneWithBinaryRequest)},
  { 92, -1, -1, sizeof(::htpp::interface::v1::ReadAllWithBinaryRequest)},
  { 98, -1, -1, sizeof(::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest)},
  { 105, -1, -1, sizeof(::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest)},
  { 111, -1, -1, sizeof(::htpp::interface::v1::ImageReply)},
  { 118, -1, -1, sizeof(::htpp::interface::v1::ImagesReply)},
  { 125, -1, -1, sizeof(::htpp::interface::v1::ImageWithAreaReply)},
  { 134, -1, -1, sizeof(::htpp::interface::v1::ImagesWithAreaReply_Data)},
  { 143, -1, -1, sizeof(::htpp::interface::v1::ImagesWithAreaReply)},
  { 150, -1, -1, sizeof(::htpp::interface::v1::Image)},
  { 157, -1, -1, sizeof(::htpp::interface::v1::GetCurrentUserMachinesRequest)},
  { 164, -1, -1, sizeof(::htpp::interface::v1::RegisterMachineRequest)},
  { 171, -1, -1, sizeof(::htpp::interface::v1::UpdateMachineRequest)},
  { 178, -1, -1, sizeof(::htpp::interface::v1::GetMachineRequest)},
  { 185, -1, -1, sizeof(::htpp::interface::v1::MachineReply)},
  { 192, -1, -1, sizeof(::htpp::interface::v1::MachinesReply)},
  { 199, -1, -1, sizeof(::htpp::interface::v1::MachineStruct)},
  { 208, -1, -1, sizeof(::htpp::interface::v1::MoveRequest)},
  { 223, -1, -1, sizeof(::htpp::interface::v1::MoveReply)},
  { 230, -1, -1, sizeof(::htpp::interface::v1::ZeroRequest)},
  { 237, -1, -1, sizeof(::htpp::interface::v1::ZeroReply)},
  { 244, -1, -1, sizeof(::htpp::interface::v1::GetMotorStatusRequest)},
  { 251, -1, -1, sizeof(::htpp::interface::v1::GetMotorStatusReply)},
  { 258, -1, -1, sizeof(::htpp::interface::v1::MotorInfo)},
  { 267, -1, -1, sizeof(::htpp::interface::v1::MotorStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_LoginRequest_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_RegisterRequest_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_GetCurrentUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_UpdateUserRequest_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_UpdateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_UserReply_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_UserReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadOneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadOneWithBinaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadAllWithBinaryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadOneWithBinaryAndCalAreaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ReadAllWithBinaryAndCalAreaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ImageReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ImagesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ImageWithAreaReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ImagesWithAreaReply_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ImagesWithAreaReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_GetCurrentUserMachinesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_RegisterMachineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_UpdateMachineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_GetMachineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MachineReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MachinesReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MachineStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MoveReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ZeroRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_ZeroReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_GetMotorStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_GetMotorStatusReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MotorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::htpp::interface::v1::_MotorStatus_default_instance_),
};

const char descriptor_table_protodef_interface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017interface.proto\022\021htpp.interface.v1\032\034go"
  "ogle/api/annotations.proto\032.protoc-gen-o"
  "penapiv2/options/annotations.proto\"k\n\014Lo"
  "ginRequest\0222\n\004user\030\001 \001(\0132$.htpp.interfac"
  "e.v1.LoginRequest.User\032\'\n\004User\022\r\n\005email\030"
  "\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\203\001\n\017RegisterRequ"
  "est\0225\n\004user\030\001 \001(\0132\'.htpp.interface.v1.Re"
  "gisterRequest.User\0329\n\004User\022\020\n\010username\030\001"
  " \001(\t\022\r\n\005email\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"#\n"
  "\025GetCurrentUserRequest\022\n\n\002id\030\001 \001(\003\"\223\001\n\021U"
  "pdateUserRequest\0227\n\004user\030\001 \001(\0132).htpp.in"
  "terface.v1.UpdateUserRequest.User\032E\n\004Use"
  "r\022\n\n\002id\030\001 \001(\003\022\r\n\005email\030\002 \001(\t\022\020\n\010username"
  "\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\"\200\001\n\tUserReply\022/"
  "\n\004user\030\001 \001(\0132!.htpp.interface.v1.UserRep"
  "ly.User\032B\n\004User\022\n\n\002id\030\001 \001(\003\022\r\n\005email\030\002 \001"
  "(\t\022\r\n\005token\030\003 \001(\t\022\020\n\010username\030\004 \001(\t\"\034\n\016R"
  "eadOneRequest\022\n\n\002id\030\001 \001(\003\"\020\n\016ReadAllRequ"
  "est\"&\n\030ReadOneWithBinaryRequest\022\n\n\002id\030\001 "
  "\001(\003\"\032\n\030ReadAllWithBinaryRequest\"0\n\"ReadO"
  "neWithBinaryAndCalAreaRequest\022\n\n\002id\030\001 \001("
  "\003\"$\n\"ReadAllWithBinaryAndCalAreaRequest\""
  "5\n\nImageReply\022\'\n\005image\030\001 \001(\0132\030.htpp.inte"
  "rface.v1.Image\"7\n\013ImagesReply\022(\n\006images\030"
  "\001 \003(\0132\030.htpp.interface.v1.Image\"[\n\022Image"
  "WithAreaReply\022\'\n\005image\030\001 \001(\0132\030.htpp.inte"
  "rface.v1.Image\022\016\n\006pixels\030\002 \001(\003\022\014\n\004area\030\003"
  " \001(\001\"\237\001\n\023ImagesWithAreaReply\0229\n\004data\030\001 \003"
  "(\0132+.htpp.interface.v1.ImagesWithAreaRep"
  "ly.Data\032M\n\004Data\022\'\n\005image\030\001 \001(\0132\030.htpp.in"
  "terface.v1.Image\022\016\n\006pixels\030\002 \001(\003\022\014\n\004area"
  "\030\003 \001(\001\"\025\n\005Image\022\014\n\004data\030\001 \001(\014\"0\n\035GetCurr"
  "entUserMachinesRequest\022\017\n\007user_id\030\001 \001(\003\""
  "K\n\026RegisterMachineRequest\0221\n\007machine\030\001 \001"
  "(\0132 .htpp.interface.v1.MachineStruct\"I\n\024"
  "UpdateMachineRequest\0221\n\007machine\030\001 \001(\0132 ."
  "htpp.interface.v1.MachineStruct\"\'\n\021GetMa"
  "chineRequest\022\022\n\nmachine_id\030\001 \001(\003\"A\n\014Mach"
  "ineReply\0221\n\007machine\030\001 \001(\0132 .htpp.interfa"
  "ce.v1.MachineStruct\"C\n\rMachinesReply\0222\n\010"
  "machines\030\001 \003(\0132 .htpp.interface.v1.Machi"
  "neStruct\"E\n\rMachineStruct\022\022\n\nmachine_id\030"
  "\001 \001(\003\022\017\n\007user_id\030\002 \001(\003\022\017\n\007address\030\003 \001(\t\""
  "\214\001\n\013MoveRequest\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n"
  "\001z\030\003 \001(\001\022\n\n\002rx\030\004 \001(\001\022\n\n\002ry\030\005 \001(\001\022\r\n\005chec"
  "k\030\006 \001(\010\022\r\n\005delay\030\007 \001(\001\022\022\n\nmachine_id\030\010 \001"
  "(\003\022\022\n\ncheck_name\030\t \001(\t\"\033\n\tMoveReply\022\016\n\006s"
  "tatus\030\001 \001(\010\"!\n\013ZeroRequest\022\022\n\nmachine_id"
  "\030\001 \001(\003\"\033\n\tZeroReply\022\016\n\006status\030\001 \001(\010\"+\n\025G"
  "etMotorStatusRequest\022\022\n\nmachine_id\030\001 \001(\003"
  "\"G\n\023GetMotorStatusReply\0220\n\nmotor_info\030\001 "
  "\003(\0132\034.htpp.interface.v1.MotorInfo\"i\n\tMot"
  "orInfo\0224\n\014motor_status\030\001 \001(\0132\036.htpp.inte"
  "rface.v1.MotorStatus\022\021\n\tinstr_pos\030\002 \001(\003\022"
  "\023\n\013current_pos\030\003 \001(\003\"\221\001\n\013MotorStatus\022\r\n\005"
  "fault\030\001 \001(\010\022\020\n\010enabling\030\002 \001(\010\022\017\n\007running"
  "\030\003 \001(\010\022\036\n\026instruction_completion\030\004 \001(\010\022\027"
  "\n\017path_completion\030\005 \001(\010\022\027\n\017zero_completi"
  "on\030\006 \001(\0102\245\020\n\tInterface\022b\n\005Login\022\037.htpp.i"
  "nterface.v1.LoginRequest\032\034.htpp.interfac"
  "e.v1.UserReply\"\032\202\323\344\223\002\024\"\017/v1/users/login:"
  "\001*\022b\n\010Register\022\".htpp.interface.v1.Regis"
  "terRequest\032\034.htpp.interface.v1.UserReply"
  "\"\024\202\323\344\223\002\016\"\t/v1/users:\001*\022o\n\016GetCurrentUser"
  "\022(.htpp.interface.v1.GetCurrentUserReque"
  "st\032\034.htpp.interface.v1.UserReply\"\025\202\323\344\223\002\017"
  "\022\r/v1/user/{id}\022e\n\nUpdateUser\022$.htpp.int"
  "erface.v1.UpdateUserRequest\032\034.htpp.inter"
  "face.v1.UserReply\"\023\202\323\344\223\002\r\032\010/v1/user:\001*\022e"
  "\n\007ReadOne\022!.htpp.interface.v1.ReadOneReq"
  "uest\032\035.htpp.interface.v1.ImageReply\"\030\202\323\344"
  "\223\002\022\022\020/v1/capture/{id}\022a\n\007ReadAll\022!.htpp."
  "interface.v1.ReadAllRequest\032\036.htpp.inter"
  "face.v1.ImagesReply\"\023\202\323\344\223\002\r\022\013/v1/capture"
  "\022\200\001\n\021ReadOneWithBinary\022+.htpp.interface."
  "v1.ReadOneWithBinaryRequest\032\035.htpp.inter"
  "face.v1.ImageReply\"\037\202\323\344\223\002\031\022\027/v1/capture/"
  "{id}/binary\022|\n\021ReadAllWithBinary\022+.htpp."
  "interface.v1.ReadAllWithBinaryRequest\032\036."
  "htpp.interface.v1.ImagesReply\"\032\202\323\344\223\002\024\022\022/"
  "v1/capture/binary\022\241\001\n\033ReadOneWithBinaryA"
  "ndCalArea\0225.htpp.interface.v1.ReadOneWit"
  "hBinaryAndCalAreaRequest\032%.htpp.interfac"
  "e.v1.ImageWithAreaReply\"$\202\323\344\223\002\036\022\034/v1/cap"
  "ture/{id}/binary/area\022\235\001\n\033ReadAllWithBin"
  "aryAndCalArea\0225.htpp.interface.v1.ReadAl"
  "lWithBinaryAndCalAreaRequest\032&.htpp.inte"
  "rface.v1.ImagesWithAreaReply\"\037\202\323\344\223\002\031\022\027/v"
  "1/capture/binary/area\022v\n\017RegisterMachine"
  "\022).htpp.interface.v1.RegisterMachineRequ"
  "est\032\037.htpp.interface.v1.MachineReply\"\027\202\323"
  "\344\223\002\021\"\014/v1/machines:\001*\022q\n\rUpdateMachine\022\'"
  ".htpp.interface.v1.UpdateMachineRequest\032"
  "\037.htpp.interface.v1.MachineReply\"\026\202\323\344\223\002\020"
  "\032\013/v1/machine:\001*\022v\n\nGetMachine\022$.htpp.in"
  "terface.v1.GetMachineRequest\032\037.htpp.inte"
  "rface.v1.MachineReply\"!\202\323\344\223\002\033\022\031/v1/machi"
  "nes/{machine_id}\022\213\001\n\026GetCurrentUserMachi"
  "nes\0220.htpp.interface.v1.GetCurrentUserMa"
  "chinesRequest\032 .htpp.interface.v1.Machin"
  "esReply\"\035\202\323\344\223\002\027\022\025/v1/machine/{user_id}\022o"
  "\n\004Move\022\036.htpp.interface.v1.MoveRequest\032\034"
  ".htpp.interface.v1.MoveReply\")\202\323\344\223\002#\"\036/v"
  "1/machines/{machine_id}/move:\001*\022x\n\004Zero\022"
  "\036.htpp.interface.v1.ZeroRequest\032\034.htpp.i"
  "nterface.v1.ZeroReply\"2\202\323\344\223\002,\"\036/v1/machi"
  "nes/{machine_id}/zero:\nmachine_id\022\214\001\n\016Ge"
  "tMotorStatus\022(.htpp.interface.v1.GetMoto"
  "rStatusRequest\032&.htpp.interface.v1.GetMo"
  "torStatusReply\"(\202\323\344\223\002\"\022 /v1/machines/{ma"
  "chine_id}/statusB\264\001Z\030api/htpp/interface/"
  "v1;v1\222A\226\001\022m\n\032htp-platform Interface API\""
  "J\n\014htp-platform\022\'https://github.com/homi"
  "nsu/htp-platform\032\0211774069959@qq.com2\0031.0"
  "*\001\0022\020application/json:\020application/jsonb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_interface_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto = {
  false, false, 4607, descriptor_table_protodef_interface_2eproto, "interface.proto", 
  &descriptor_table_interface_2eproto_once, descriptor_table_interface_2eproto_deps, 2, 36,
  schemas, file_default_instances, TableStruct_interface_2eproto::offsets,
  file_level_metadata_interface_2eproto, file_level_enum_descriptors_interface_2eproto, file_level_service_descriptors_interface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_interface_2eproto_getter() {
  return &descriptor_table_interface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interface_2eproto(&descriptor_table_interface_2eproto);
namespace htpp {
namespace interface {
namespace v1 {

// ===================================================================

class LoginRequest_User::_Internal {
 public:
};

LoginRequest_User::LoginRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.LoginRequest.User)
}
LoginRequest_User::LoginRequest_User(const LoginRequest_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.LoginRequest.User)
}

inline void LoginRequest_User::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest_User::~LoginRequest_User() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.LoginRequest.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginRequest_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest_User::ArenaDtor(void* object) {
  LoginRequest_User* _this = reinterpret_cast< LoginRequest_User* >(object);
  (void)_this;
}
void LoginRequest_User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginRequest_User::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.LoginRequest.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.LoginRequest.User.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.LoginRequest.User.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.LoginRequest.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.LoginRequest.User.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.LoginRequest.User.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.LoginRequest.User)
  return target;
}

size_t LoginRequest_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.LoginRequest.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginRequest_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest_User::GetClassData() const { return &_class_data_; }

void LoginRequest_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginRequest_User *>(to)->MergeFrom(
      static_cast<const LoginRequest_User &>(from));
}


void LoginRequest_User::MergeFrom(const LoginRequest_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.LoginRequest.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest_User::CopyFrom(const LoginRequest_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.LoginRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest_User::IsInitialized() const {
  return true;
}

void LoginRequest_User::InternalSwap(LoginRequest_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest_User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[0]);
}

// ===================================================================

class LoginRequest::_Internal {
 public:
  static const ::htpp::interface::v1::LoginRequest_User& user(const LoginRequest* msg);
};

const ::htpp::interface::v1::LoginRequest_User&
LoginRequest::_Internal::user(const LoginRequest* msg) {
  return *msg->user_;
}
LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::htpp::interface::v1::LoginRequest_User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.LoginRequest)
}

inline void LoginRequest::SharedCtor() {
user_ = nullptr;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.LoginRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.LoginRequest.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.LoginRequest.User user = 1;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.LoginRequest.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }

void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoginRequest *>(to)->MergeFrom(
      static_cast<const LoginRequest &>(from));
}


void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _internal_mutable_user()->::htpp::interface::v1::LoginRequest_User::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[1]);
}

// ===================================================================

class RegisterRequest_User::_Internal {
 public:
};

RegisterRequest_User::RegisterRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.RegisterRequest.User)
}
RegisterRequest_User::RegisterRequest_User(const RegisterRequest_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.RegisterRequest.User)
}

inline void RegisterRequest_User::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRequest_User::~RegisterRequest_User() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.RegisterRequest.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterRequest_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest_User::ArenaDtor(void* object) {
  RegisterRequest_User* _this = reinterpret_cast< RegisterRequest_User* >(object);
  (void)_this;
}
void RegisterRequest_User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterRequest_User::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.RegisterRequest.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  email_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.RegisterRequest.User.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.RegisterRequest.User.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.RegisterRequest.User.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.RegisterRequest.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.RegisterRequest.User.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.RegisterRequest.User.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.RegisterRequest.User.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.RegisterRequest.User)
  return target;
}

size_t RegisterRequest_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.RegisterRequest.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterRequest_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest_User::GetClassData() const { return &_class_data_; }

void RegisterRequest_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterRequest_User *>(to)->MergeFrom(
      static_cast<const RegisterRequest_User &>(from));
}


void RegisterRequest_User::MergeFrom(const RegisterRequest_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.RegisterRequest.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest_User::CopyFrom(const RegisterRequest_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.RegisterRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest_User::IsInitialized() const {
  return true;
}

void RegisterRequest_User::InternalSwap(RegisterRequest_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest_User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[2]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::htpp::interface::v1::RegisterRequest_User& user(const RegisterRequest* msg);
};

const ::htpp::interface::v1::RegisterRequest_User&
RegisterRequest::_Internal::user(const RegisterRequest* msg) {
  return *msg->user_;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::htpp::interface::v1::RegisterRequest_User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.RegisterRequest)
}

inline void RegisterRequest::SharedCtor() {
user_ = nullptr;
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.RegisterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast< RegisterRequest* >(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.RegisterRequest.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.RegisterRequest.User user = 1;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.RegisterRequest.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }

void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterRequest *>(to)->MergeFrom(
      static_cast<const RegisterRequest &>(from));
}


void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _internal_mutable_user()->::htpp::interface::v1::RegisterRequest_User::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[3]);
}

// ===================================================================

class GetCurrentUserRequest::_Internal {
 public:
};

GetCurrentUserRequest::GetCurrentUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.GetCurrentUserRequest)
}
GetCurrentUserRequest::GetCurrentUserRequest(const GetCurrentUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.GetCurrentUserRequest)
}

inline void GetCurrentUserRequest::SharedCtor() {
id_ = int64_t{0};
}

GetCurrentUserRequest::~GetCurrentUserRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.GetCurrentUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCurrentUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCurrentUserRequest::ArenaDtor(void* object) {
  GetCurrentUserRequest* _this = reinterpret_cast< GetCurrentUserRequest* >(object);
  (void)_this;
}
void GetCurrentUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCurrentUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.GetCurrentUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.GetCurrentUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.GetCurrentUserRequest)
  return target;
}

size_t GetCurrentUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.GetCurrentUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentUserRequest::GetClassData() const { return &_class_data_; }

void GetCurrentUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentUserRequest *>(to)->MergeFrom(
      static_cast<const GetCurrentUserRequest &>(from));
}


void GetCurrentUserRequest::MergeFrom(const GetCurrentUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.GetCurrentUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentUserRequest::CopyFrom(const GetCurrentUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.GetCurrentUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentUserRequest::IsInitialized() const {
  return true;
}

void GetCurrentUserRequest::InternalSwap(GetCurrentUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[4]);
}

// ===================================================================

class UpdateUserRequest_User::_Internal {
 public:
};

UpdateUserRequest_User::UpdateUserRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.UpdateUserRequest.User)
}
UpdateUserRequest_User::UpdateUserRequest_User(const UpdateUserRequest_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.UpdateUserRequest.User)
}

inline void UpdateUserRequest_User::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

UpdateUserRequest_User::~UpdateUserRequest_User() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.UpdateUserRequest.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUserRequest_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateUserRequest_User::ArenaDtor(void* object) {
  UpdateUserRequest_User* _this = reinterpret_cast< UpdateUserRequest_User* >(object);
  (void)_this;
}
void UpdateUserRequest_User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserRequest_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUserRequest_User::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.UpdateUserRequest.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  username_.ClearToEmpty();
  password_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UpdateUserRequest.User.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UpdateUserRequest.User.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UpdateUserRequest.User.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserRequest_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.UpdateUserRequest.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UpdateUserRequest.User.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UpdateUserRequest.User.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // string password = 5;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UpdateUserRequest.User.password");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.UpdateUserRequest.User)
  return target;
}

size_t UpdateUserRequest_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.UpdateUserRequest.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 5;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserRequest_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUserRequest_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserRequest_User::GetClassData() const { return &_class_data_; }

void UpdateUserRequest_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateUserRequest_User *>(to)->MergeFrom(
      static_cast<const UpdateUserRequest_User &>(from));
}


void UpdateUserRequest_User::MergeFrom(const UpdateUserRequest_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.UpdateUserRequest.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserRequest_User::CopyFrom(const UpdateUserRequest_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.UpdateUserRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest_User::IsInitialized() const {
  return true;
}

void UpdateUserRequest_User::InternalSwap(UpdateUserRequest_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest_User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[5]);
}

// ===================================================================

class UpdateUserRequest::_Internal {
 public:
  static const ::htpp::interface::v1::UpdateUserRequest_User& user(const UpdateUserRequest* msg);
};

const ::htpp::interface::v1::UpdateUserRequest_User&
UpdateUserRequest::_Internal::user(const UpdateUserRequest* msg) {
  return *msg->user_;
}
UpdateUserRequest::UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.UpdateUserRequest)
}
UpdateUserRequest::UpdateUserRequest(const UpdateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::htpp::interface::v1::UpdateUserRequest_User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.UpdateUserRequest)
}

inline void UpdateUserRequest::SharedCtor() {
user_ = nullptr;
}

UpdateUserRequest::~UpdateUserRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.UpdateUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateUserRequest::ArenaDtor(void* object) {
  UpdateUserRequest* _this = reinterpret_cast< UpdateUserRequest* >(object);
  (void)_this;
}
void UpdateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.UpdateUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.UpdateUserRequest.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.UpdateUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.UpdateUserRequest.User user = 1;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.UpdateUserRequest)
  return target;
}

size_t UpdateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.UpdateUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.UpdateUserRequest.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserRequest::GetClassData() const { return &_class_data_; }

void UpdateUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateUserRequest *>(to)->MergeFrom(
      static_cast<const UpdateUserRequest &>(from));
}


void UpdateUserRequest::MergeFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _internal_mutable_user()->::htpp::interface::v1::UpdateUserRequest_User::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserRequest::CopyFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest::IsInitialized() const {
  return true;
}

void UpdateUserRequest::InternalSwap(UpdateUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[6]);
}

// ===================================================================

class UserReply_User::_Internal {
 public:
};

UserReply_User::UserReply_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.UserReply.User)
}
UserReply_User::UserReply_User(const UserReply_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.UserReply.User)
}

inline void UserReply_User::SharedCtor() {
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

UserReply_User::~UserReply_User() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.UserReply.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserReply_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserReply_User::ArenaDtor(void* object) {
  UserReply_User* _this = reinterpret_cast< UserReply_User* >(object);
  (void)_this;
}
void UserReply_User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserReply_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserReply_User::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.UserReply.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmpty();
  token_.ClearToEmpty();
  username_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserReply_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UserReply.User.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UserReply.User.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.UserReply.User.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserReply_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.UserReply.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UserReply.User.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UserReply.User.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.UserReply.User.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.UserReply.User)
  return target;
}

size_t UserReply_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.UserReply.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserReply_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserReply_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserReply_User::GetClassData() const { return &_class_data_; }

void UserReply_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserReply_User *>(to)->MergeFrom(
      static_cast<const UserReply_User &>(from));
}


void UserReply_User::MergeFrom(const UserReply_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.UserReply.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserReply_User::CopyFrom(const UserReply_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.UserReply.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReply_User::IsInitialized() const {
  return true;
}

void UserReply_User::InternalSwap(UserReply_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserReply_User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[7]);
}

// ===================================================================

class UserReply::_Internal {
 public:
  static const ::htpp::interface::v1::UserReply_User& user(const UserReply* msg);
};

const ::htpp::interface::v1::UserReply_User&
UserReply::_Internal::user(const UserReply* msg) {
  return *msg->user_;
}
UserReply::UserReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.UserReply)
}
UserReply::UserReply(const UserReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::htpp::interface::v1::UserReply_User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.UserReply)
}

inline void UserReply::SharedCtor() {
user_ = nullptr;
}

UserReply::~UserReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.UserReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UserReply::ArenaDtor(void* object) {
  UserReply* _this = reinterpret_cast< UserReply* >(object);
  (void)_this;
}
void UserReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.UserReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.UserReply.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.UserReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.UserReply.User user = 1;
  if (this->_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.UserReply)
  return target;
}

size_t UserReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.UserReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.UserReply.User user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserReply::GetClassData() const { return &_class_data_; }

void UserReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserReply *>(to)->MergeFrom(
      static_cast<const UserReply &>(from));
}


void UserReply::MergeFrom(const UserReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.UserReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _internal_mutable_user()->::htpp::interface::v1::UserReply_User::MergeFrom(from._internal_user());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserReply::CopyFrom(const UserReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.UserReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReply::IsInitialized() const {
  return true;
}

void UserReply::InternalSwap(UserReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[8]);
}

// ===================================================================

class ReadOneRequest::_Internal {
 public:
};

ReadOneRequest::ReadOneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadOneRequest)
}
ReadOneRequest::ReadOneRequest(const ReadOneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadOneRequest)
}

inline void ReadOneRequest::SharedCtor() {
id_ = int64_t{0};
}

ReadOneRequest::~ReadOneRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ReadOneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadOneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneRequest::ArenaDtor(void* object) {
  ReadOneRequest* _this = reinterpret_cast< ReadOneRequest* >(object);
  (void)_this;
}
void ReadOneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadOneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ReadOneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ReadOneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ReadOneRequest)
  return target;
}

size_t ReadOneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ReadOneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadOneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneRequest::GetClassData() const { return &_class_data_; }

void ReadOneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadOneRequest *>(to)->MergeFrom(
      static_cast<const ReadOneRequest &>(from));
}


void ReadOneRequest::MergeFrom(const ReadOneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ReadOneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneRequest::CopyFrom(const ReadOneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ReadOneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneRequest::IsInitialized() const {
  return true;
}

void ReadOneRequest::InternalSwap(ReadOneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[9]);
}

// ===================================================================

class ReadAllRequest::_Internal {
 public:
};

ReadAllRequest::ReadAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadAllRequest)
}
ReadAllRequest::ReadAllRequest(const ReadAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadAllRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[10]);
}

// ===================================================================

class ReadOneWithBinaryRequest::_Internal {
 public:
};

ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadOneWithBinaryRequest)
}
ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(const ReadOneWithBinaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadOneWithBinaryRequest)
}

inline void ReadOneWithBinaryRequest::SharedCtor() {
id_ = int64_t{0};
}

ReadOneWithBinaryRequest::~ReadOneWithBinaryRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ReadOneWithBinaryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadOneWithBinaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryRequest::ArenaDtor(void* object) {
  ReadOneWithBinaryRequest* _this = reinterpret_cast< ReadOneWithBinaryRequest* >(object);
  (void)_this;
}
void ReadOneWithBinaryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOneWithBinaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadOneWithBinaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ReadOneWithBinaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ReadOneWithBinaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ReadOneWithBinaryRequest)
  return target;
}

size_t ReadOneWithBinaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ReadOneWithBinaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadOneWithBinaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryRequest::GetClassData() const { return &_class_data_; }

void ReadOneWithBinaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadOneWithBinaryRequest *>(to)->MergeFrom(
      static_cast<const ReadOneWithBinaryRequest &>(from));
}


void ReadOneWithBinaryRequest::MergeFrom(const ReadOneWithBinaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ReadOneWithBinaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryRequest::CopyFrom(const ReadOneWithBinaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ReadOneWithBinaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryRequest::InternalSwap(ReadOneWithBinaryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[11]);
}

// ===================================================================

class ReadAllWithBinaryRequest::_Internal {
 public:
};

ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadAllWithBinaryRequest)
}
ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(const ReadAllWithBinaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadAllWithBinaryRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[12]);
}

// ===================================================================

class ReadOneWithBinaryAndCalAreaRequest::_Internal {
 public:
};

ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
}
ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(const ReadOneWithBinaryAndCalAreaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
}

inline void ReadOneWithBinaryAndCalAreaRequest::SharedCtor() {
id_ = int64_t{0};
}

ReadOneWithBinaryAndCalAreaRequest::~ReadOneWithBinaryAndCalAreaRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadOneWithBinaryAndCalAreaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryAndCalAreaRequest::ArenaDtor(void* object) {
  ReadOneWithBinaryAndCalAreaRequest* _this = reinterpret_cast< ReadOneWithBinaryAndCalAreaRequest* >(object);
  (void)_this;
}
void ReadOneWithBinaryAndCalAreaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadOneWithBinaryAndCalAreaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadOneWithBinaryAndCalAreaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryAndCalAreaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryAndCalAreaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  return target;
}

size_t ReadOneWithBinaryAndCalAreaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryAndCalAreaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadOneWithBinaryAndCalAreaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryAndCalAreaRequest::GetClassData() const { return &_class_data_; }

void ReadOneWithBinaryAndCalAreaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadOneWithBinaryAndCalAreaRequest *>(to)->MergeFrom(
      static_cast<const ReadOneWithBinaryAndCalAreaRequest &>(from));
}


void ReadOneWithBinaryAndCalAreaRequest::MergeFrom(const ReadOneWithBinaryAndCalAreaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryAndCalAreaRequest::CopyFrom(const ReadOneWithBinaryAndCalAreaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryAndCalAreaRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryAndCalAreaRequest::InternalSwap(ReadOneWithBinaryAndCalAreaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryAndCalAreaRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[13]);
}

// ===================================================================

class ReadAllWithBinaryAndCalAreaRequest::_Internal {
 public:
};

ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ReadAllWithBinaryAndCalAreaRequest)
}
ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(const ReadAllWithBinaryAndCalAreaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ReadAllWithBinaryAndCalAreaRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryAndCalAreaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryAndCalAreaRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryAndCalAreaRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[14]);
}

// ===================================================================

class ImageReply::_Internal {
 public:
  static const ::htpp::interface::v1::Image& image(const ImageReply* msg);
};

const ::htpp::interface::v1::Image&
ImageReply::_Internal::image(const ImageReply* msg) {
  return *msg->image_;
}
ImageReply::ImageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ImageReply)
}
ImageReply::ImageReply(const ImageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::htpp::interface::v1::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ImageReply)
}

inline void ImageReply::SharedCtor() {
image_ = nullptr;
}

ImageReply::~ImageReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ImageReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageReply::ArenaDtor(void* object) {
  ImageReply* _this = reinterpret_cast< ImageReply* >(object);
  (void)_this;
}
void ImageReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ImageReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ImageReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ImageReply)
  return target;
}

size_t ImageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ImageReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageReply::GetClassData() const { return &_class_data_; }

void ImageReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageReply *>(to)->MergeFrom(
      static_cast<const ImageReply &>(from));
}


void ImageReply::MergeFrom(const ImageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ImageReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::htpp::interface::v1::Image::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageReply::CopyFrom(const ImageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReply::IsInitialized() const {
  return true;
}

void ImageReply::InternalSwap(ImageReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[15]);
}

// ===================================================================

class ImagesReply::_Internal {
 public:
};

ImagesReply::ImagesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  images_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ImagesReply)
}
ImagesReply::ImagesReply(const ImagesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ImagesReply)
}

inline void ImagesReply::SharedCtor() {
}

ImagesReply::~ImagesReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ImagesReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImagesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImagesReply::ArenaDtor(void* object) {
  ImagesReply* _this = reinterpret_cast< ImagesReply* >(object);
  (void)_this;
}
void ImagesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImagesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImagesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ImagesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.interface.v1.Image images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ImagesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.Image images = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ImagesReply)
  return target;
}

size_t ImagesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ImagesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.Image images = 1;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImagesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesReply::GetClassData() const { return &_class_data_; }

void ImagesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImagesReply *>(to)->MergeFrom(
      static_cast<const ImagesReply &>(from));
}


void ImagesReply::MergeFrom(const ImagesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ImagesReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesReply::CopyFrom(const ImagesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ImagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesReply::IsInitialized() const {
  return true;
}

void ImagesReply::InternalSwap(ImagesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[16]);
}

// ===================================================================

class ImageWithAreaReply::_Internal {
 public:
  static const ::htpp::interface::v1::Image& image(const ImageWithAreaReply* msg);
};

const ::htpp::interface::v1::Image&
ImageWithAreaReply::_Internal::image(const ImageWithAreaReply* msg) {
  return *msg->image_;
}
ImageWithAreaReply::ImageWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ImageWithAreaReply)
}
ImageWithAreaReply::ImageWithAreaReply(const ImageWithAreaReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::htpp::interface::v1::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&pixels_, &from.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&pixels_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ImageWithAreaReply)
}

inline void ImageWithAreaReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&image_)) + sizeof(area_));
}

ImageWithAreaReply::~ImageWithAreaReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ImageWithAreaReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageWithAreaReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImageWithAreaReply::ArenaDtor(void* object) {
  ImageWithAreaReply* _this = reinterpret_cast< ImageWithAreaReply* >(object);
  (void)_this;
}
void ImageWithAreaReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageWithAreaReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageWithAreaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ImageWithAreaReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&pixels_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageWithAreaReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageWithAreaReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ImageWithAreaReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // int64 pixels = 2;
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ImageWithAreaReply)
  return target;
}

size_t ImageWithAreaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ImageWithAreaReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int64 pixels = 2;
  if (this->_internal_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageWithAreaReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageWithAreaReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageWithAreaReply::GetClassData() const { return &_class_data_; }

void ImageWithAreaReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageWithAreaReply *>(to)->MergeFrom(
      static_cast<const ImageWithAreaReply &>(from));
}


void ImageWithAreaReply::MergeFrom(const ImageWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ImageWithAreaReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::htpp::interface::v1::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_pixels() != 0) {
    _internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _internal_set_area(from._internal_area());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageWithAreaReply::CopyFrom(const ImageWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ImageWithAreaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageWithAreaReply::IsInitialized() const {
  return true;
}

void ImageWithAreaReply::InternalSwap(ImageWithAreaReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageWithAreaReply, area_)
      + sizeof(ImageWithAreaReply::area_)
      - PROTOBUF_FIELD_OFFSET(ImageWithAreaReply, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageWithAreaReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[17]);
}

// ===================================================================

class ImagesWithAreaReply_Data::_Internal {
 public:
  static const ::htpp::interface::v1::Image& image(const ImagesWithAreaReply_Data* msg);
};

const ::htpp::interface::v1::Image&
ImagesWithAreaReply_Data::_Internal::image(const ImagesWithAreaReply_Data* msg) {
  return *msg->image_;
}
ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ImagesWithAreaReply.Data)
}
ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(const ImagesWithAreaReply_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::htpp::interface::v1::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  ::memcpy(&pixels_, &from.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&pixels_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ImagesWithAreaReply.Data)
}

inline void ImagesWithAreaReply_Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&image_)) + sizeof(area_));
}

ImagesWithAreaReply_Data::~ImagesWithAreaReply_Data() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ImagesWithAreaReply.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImagesWithAreaReply_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void ImagesWithAreaReply_Data::ArenaDtor(void* object) {
  ImagesWithAreaReply_Data* _this = reinterpret_cast< ImagesWithAreaReply_Data* >(object);
  (void)_this;
}
void ImagesWithAreaReply_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImagesWithAreaReply_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImagesWithAreaReply_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ImagesWithAreaReply.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  ::memset(&pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&pixels_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaReply_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaReply_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ImagesWithAreaReply.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // int64 pixels = 2;
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ImagesWithAreaReply.Data)
  return target;
}

size_t ImagesWithAreaReply_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ImagesWithAreaReply.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int64 pixels = 2;
  if (this->_internal_pixels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaReply_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImagesWithAreaReply_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaReply_Data::GetClassData() const { return &_class_data_; }

void ImagesWithAreaReply_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImagesWithAreaReply_Data *>(to)->MergeFrom(
      static_cast<const ImagesWithAreaReply_Data &>(from));
}


void ImagesWithAreaReply_Data::MergeFrom(const ImagesWithAreaReply_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ImagesWithAreaReply.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::htpp::interface::v1::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_pixels() != 0) {
    _internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _internal_set_area(from._internal_area());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaReply_Data::CopyFrom(const ImagesWithAreaReply_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ImagesWithAreaReply.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaReply_Data::IsInitialized() const {
  return true;
}

void ImagesWithAreaReply_Data::InternalSwap(ImagesWithAreaReply_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagesWithAreaReply_Data, area_)
      + sizeof(ImagesWithAreaReply_Data::area_)
      - PROTOBUF_FIELD_OFFSET(ImagesWithAreaReply_Data, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaReply_Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[18]);
}

// ===================================================================

class ImagesWithAreaReply::_Internal {
 public:
};

ImagesWithAreaReply::ImagesWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ImagesWithAreaReply)
}
ImagesWithAreaReply::ImagesWithAreaReply(const ImagesWithAreaReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ImagesWithAreaReply)
}

inline void ImagesWithAreaReply::SharedCtor() {
}

ImagesWithAreaReply::~ImagesWithAreaReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ImagesWithAreaReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImagesWithAreaReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImagesWithAreaReply::ArenaDtor(void* object) {
  ImagesWithAreaReply* _this = reinterpret_cast< ImagesWithAreaReply* >(object);
  (void)_this;
}
void ImagesWithAreaReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImagesWithAreaReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImagesWithAreaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ImagesWithAreaReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.interface.v1.ImagesWithAreaReply.Data data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ImagesWithAreaReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.ImagesWithAreaReply.Data data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ImagesWithAreaReply)
  return target;
}

size_t ImagesWithAreaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ImagesWithAreaReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.ImagesWithAreaReply.Data data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImagesWithAreaReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaReply::GetClassData() const { return &_class_data_; }

void ImagesWithAreaReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImagesWithAreaReply *>(to)->MergeFrom(
      static_cast<const ImagesWithAreaReply &>(from));
}


void ImagesWithAreaReply::MergeFrom(const ImagesWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ImagesWithAreaReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaReply::CopyFrom(const ImagesWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ImagesWithAreaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaReply::IsInitialized() const {
  return true;
}

void ImagesWithAreaReply::InternalSwap(ImagesWithAreaReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[19]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.Image)
}

inline void Image::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[20]);
}

// ===================================================================

class GetCurrentUserMachinesRequest::_Internal {
 public:
};

GetCurrentUserMachinesRequest::GetCurrentUserMachinesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.GetCurrentUserMachinesRequest)
}
GetCurrentUserMachinesRequest::GetCurrentUserMachinesRequest(const GetCurrentUserMachinesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.GetCurrentUserMachinesRequest)
}

inline void GetCurrentUserMachinesRequest::SharedCtor() {
user_id_ = int64_t{0};
}

GetCurrentUserMachinesRequest::~GetCurrentUserMachinesRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.GetCurrentUserMachinesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCurrentUserMachinesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCurrentUserMachinesRequest::ArenaDtor(void* object) {
  GetCurrentUserMachinesRequest* _this = reinterpret_cast< GetCurrentUserMachinesRequest* >(object);
  (void)_this;
}
void GetCurrentUserMachinesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCurrentUserMachinesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentUserMachinesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.GetCurrentUserMachinesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentUserMachinesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentUserMachinesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.GetCurrentUserMachinesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.GetCurrentUserMachinesRequest)
  return target;
}

size_t GetCurrentUserMachinesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.GetCurrentUserMachinesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentUserMachinesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentUserMachinesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentUserMachinesRequest::GetClassData() const { return &_class_data_; }

void GetCurrentUserMachinesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentUserMachinesRequest *>(to)->MergeFrom(
      static_cast<const GetCurrentUserMachinesRequest &>(from));
}


void GetCurrentUserMachinesRequest::MergeFrom(const GetCurrentUserMachinesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.GetCurrentUserMachinesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentUserMachinesRequest::CopyFrom(const GetCurrentUserMachinesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.GetCurrentUserMachinesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentUserMachinesRequest::IsInitialized() const {
  return true;
}

void GetCurrentUserMachinesRequest::InternalSwap(GetCurrentUserMachinesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentUserMachinesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[21]);
}

// ===================================================================

class RegisterMachineRequest::_Internal {
 public:
  static const ::htpp::interface::v1::MachineStruct& machine(const RegisterMachineRequest* msg);
};

const ::htpp::interface::v1::MachineStruct&
RegisterMachineRequest::_Internal::machine(const RegisterMachineRequest* msg) {
  return *msg->machine_;
}
RegisterMachineRequest::RegisterMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.RegisterMachineRequest)
}
RegisterMachineRequest::RegisterMachineRequest(const RegisterMachineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::htpp::interface::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.RegisterMachineRequest)
}

inline void RegisterMachineRequest::SharedCtor() {
machine_ = nullptr;
}

RegisterMachineRequest::~RegisterMachineRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.RegisterMachineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterMachineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void RegisterMachineRequest::ArenaDtor(void* object) {
  RegisterMachineRequest* _this = reinterpret_cast< RegisterMachineRequest* >(object);
  (void)_this;
}
void RegisterMachineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterMachineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterMachineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.RegisterMachineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterMachineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterMachineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.RegisterMachineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.RegisterMachineRequest)
  return target;
}

size_t RegisterMachineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.RegisterMachineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterMachineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterMachineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterMachineRequest::GetClassData() const { return &_class_data_; }

void RegisterMachineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterMachineRequest *>(to)->MergeFrom(
      static_cast<const RegisterMachineRequest &>(from));
}


void RegisterMachineRequest::MergeFrom(const RegisterMachineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.RegisterMachineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::htpp::interface::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterMachineRequest::CopyFrom(const RegisterMachineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.RegisterMachineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMachineRequest::IsInitialized() const {
  return true;
}

void RegisterMachineRequest::InternalSwap(RegisterMachineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterMachineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[22]);
}

// ===================================================================

class UpdateMachineRequest::_Internal {
 public:
  static const ::htpp::interface::v1::MachineStruct& machine(const UpdateMachineRequest* msg);
};

const ::htpp::interface::v1::MachineStruct&
UpdateMachineRequest::_Internal::machine(const UpdateMachineRequest* msg) {
  return *msg->machine_;
}
UpdateMachineRequest::UpdateMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.UpdateMachineRequest)
}
UpdateMachineRequest::UpdateMachineRequest(const UpdateMachineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::htpp::interface::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.UpdateMachineRequest)
}

inline void UpdateMachineRequest::SharedCtor() {
machine_ = nullptr;
}

UpdateMachineRequest::~UpdateMachineRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.UpdateMachineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateMachineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void UpdateMachineRequest::ArenaDtor(void* object) {
  UpdateMachineRequest* _this = reinterpret_cast< UpdateMachineRequest* >(object);
  (void)_this;
}
void UpdateMachineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMachineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateMachineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.UpdateMachineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMachineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMachineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.UpdateMachineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.UpdateMachineRequest)
  return target;
}

size_t UpdateMachineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.UpdateMachineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMachineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateMachineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMachineRequest::GetClassData() const { return &_class_data_; }

void UpdateMachineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateMachineRequest *>(to)->MergeFrom(
      static_cast<const UpdateMachineRequest &>(from));
}


void UpdateMachineRequest::MergeFrom(const UpdateMachineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.UpdateMachineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::htpp::interface::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMachineRequest::CopyFrom(const UpdateMachineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.UpdateMachineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMachineRequest::IsInitialized() const {
  return true;
}

void UpdateMachineRequest::InternalSwap(UpdateMachineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMachineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[23]);
}

// ===================================================================

class GetMachineRequest::_Internal {
 public:
};

GetMachineRequest::GetMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.GetMachineRequest)
}
GetMachineRequest::GetMachineRequest(const GetMachineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.GetMachineRequest)
}

inline void GetMachineRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

GetMachineRequest::~GetMachineRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.GetMachineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMachineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMachineRequest::ArenaDtor(void* object) {
  GetMachineRequest* _this = reinterpret_cast< GetMachineRequest* >(object);
  (void)_this;
}
void GetMachineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMachineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMachineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.GetMachineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMachineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMachineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.GetMachineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.GetMachineRequest)
  return target;
}

size_t GetMachineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.GetMachineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMachineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMachineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMachineRequest::GetClassData() const { return &_class_data_; }

void GetMachineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMachineRequest *>(to)->MergeFrom(
      static_cast<const GetMachineRequest &>(from));
}


void GetMachineRequest::MergeFrom(const GetMachineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.GetMachineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMachineRequest::CopyFrom(const GetMachineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.GetMachineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMachineRequest::IsInitialized() const {
  return true;
}

void GetMachineRequest::InternalSwap(GetMachineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMachineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[24]);
}

// ===================================================================

class MachineReply::_Internal {
 public:
  static const ::htpp::interface::v1::MachineStruct& machine(const MachineReply* msg);
};

const ::htpp::interface::v1::MachineStruct&
MachineReply::_Internal::machine(const MachineReply* msg) {
  return *msg->machine_;
}
MachineReply::MachineReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MachineReply)
}
MachineReply::MachineReply(const MachineReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machine()) {
    machine_ = new ::htpp::interface::v1::MachineStruct(*from.machine_);
  } else {
    machine_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MachineReply)
}

inline void MachineReply::SharedCtor() {
machine_ = nullptr;
}

MachineReply::~MachineReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MachineReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachineReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete machine_;
}

void MachineReply::ArenaDtor(void* object) {
  MachineReply* _this = reinterpret_cast< MachineReply* >(object);
  (void)_this;
}
void MachineReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachineReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MachineReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.MachineStruct machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MachineReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::machine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MachineReply)
  return target;
}

size_t MachineReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MachineReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.MachineStruct machine = 1;
  if (this->_internal_has_machine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machine_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachineReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineReply::GetClassData() const { return &_class_data_; }

void MachineReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachineReply *>(to)->MergeFrom(
      static_cast<const MachineReply &>(from));
}


void MachineReply::MergeFrom(const MachineReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MachineReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_machine()) {
    _internal_mutable_machine()->::htpp::interface::v1::MachineStruct::MergeFrom(from._internal_machine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineReply::CopyFrom(const MachineReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MachineReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReply::IsInitialized() const {
  return true;
}

void MachineReply::InternalSwap(MachineReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_, other->machine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[25]);
}

// ===================================================================

class MachinesReply::_Internal {
 public:
};

MachinesReply::MachinesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  machines_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MachinesReply)
}
MachinesReply::MachinesReply(const MachinesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      machines_(from.machines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MachinesReply)
}

inline void MachinesReply::SharedCtor() {
}

MachinesReply::~MachinesReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MachinesReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachinesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MachinesReply::ArenaDtor(void* object) {
  MachinesReply* _this = reinterpret_cast< MachinesReply* >(object);
  (void)_this;
}
void MachinesReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachinesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachinesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MachinesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachinesReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.interface.v1.MachineStruct machines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_machines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachinesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MachinesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.MachineStruct machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_machines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_machines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MachinesReply)
  return target;
}

size_t MachinesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MachinesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.MachineStruct machines = 1;
  total_size += 1UL * this->_internal_machines_size();
  for (const auto& msg : this->machines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachinesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachinesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachinesReply::GetClassData() const { return &_class_data_; }

void MachinesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachinesReply *>(to)->MergeFrom(
      static_cast<const MachinesReply &>(from));
}


void MachinesReply::MergeFrom(const MachinesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MachinesReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  machines_.MergeFrom(from.machines_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachinesReply::CopyFrom(const MachinesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MachinesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachinesReply::IsInitialized() const {
  return true;
}

void MachinesReply::InternalSwap(MachinesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  machines_.InternalSwap(&other->machines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MachinesReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[26]);
}

// ===================================================================

class MachineStruct::_Internal {
 public:
};

MachineStruct::MachineStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MachineStruct)
}
MachineStruct::MachineStruct(const MachineStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&machine_id_, &from.machine_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MachineStruct)
}

inline void MachineStruct::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&machine_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
}

MachineStruct::~MachineStruct() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MachineStruct)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MachineStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MachineStruct::ArenaDtor(void* object) {
  MachineStruct* _this = reinterpret_cast< MachineStruct* >(object);
  (void)_this;
}
void MachineStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MachineStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MachineStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&machine_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&machine_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.MachineStruct.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MachineStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // string address = 3;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.MachineStruct.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MachineStruct)
  return target;
}

size_t MachineStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MachineStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MachineStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineStruct::GetClassData() const { return &_class_data_; }

void MachineStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MachineStruct *>(to)->MergeFrom(
      static_cast<const MachineStruct &>(from));
}


void MachineStruct::MergeFrom(const MachineStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MachineStruct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineStruct::CopyFrom(const MachineStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MachineStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineStruct::IsInitialized() const {
  return true;
}

void MachineStruct::InternalSwap(MachineStruct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MachineStruct, user_id_)
      + sizeof(MachineStruct::user_id_)
      - PROTOBUF_FIELD_OFFSET(MachineStruct, machine_id_)>(
          reinterpret_cast<char*>(&machine_id_),
          reinterpret_cast<char*>(&other->machine_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[27]);
}

// ===================================================================

class MoveRequest::_Internal {
 public:
};

MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MoveRequest)
}

inline void MoveRequest::SharedCtor() {
check_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_) -
    reinterpret_cast<char*>(&x_)) + sizeof(check_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MoveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  check_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveRequest::ArenaDtor(void* object) {
  MoveRequest* _this = reinterpret_cast< MoveRequest* >(object);
  (void)_this;
}
void MoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_name_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_) -
      reinterpret_cast<char*>(&x_)) + sizeof(check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 machine_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "htpp.interface.v1.MoveRequest.check_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_check(), target);
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_delay(), target);
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_machine_id(), target);
  }

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.interface.v1.MoveRequest.check_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_name = 9;
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double delay = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 8;
  }

  // int64 machine_id = 8;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  // bool check = 6;
  if (this->_internal_check() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }

void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveRequest *>(to)->MergeFrom(
      static_cast<const MoveRequest &>(from));
}


void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_check_name().empty()) {
    _internal_set_check_name(from._internal_check_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = from._internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  if (from._internal_check() != 0) {
    _internal_set_check(from._internal_check());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_name_, lhs_arena,
      &other->check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, check_)
      + sizeof(MoveRequest::check_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[28]);
}

// ===================================================================

class MoveReply::_Internal {
 public:
};

MoveReply::MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MoveReply)
}
MoveReply::MoveReply(const MoveReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MoveReply)
}

inline void MoveReply::SharedCtor() {
status_ = false;
}

MoveReply::~MoveReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MoveReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveReply::ArenaDtor(void* object) {
  MoveReply* _this = reinterpret_cast< MoveReply* >(object);
  (void)_this;
}
void MoveReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MoveReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MoveReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MoveReply)
  return target;
}

size_t MoveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MoveReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveReply::GetClassData() const { return &_class_data_; }

void MoveReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveReply *>(to)->MergeFrom(
      static_cast<const MoveReply &>(from));
}


void MoveReply::MergeFrom(const MoveReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MoveReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveReply::CopyFrom(const MoveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MoveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveReply::IsInitialized() const {
  return true;
}

void MoveReply::InternalSwap(MoveReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[29]);
}

// ===================================================================

class ZeroRequest::_Internal {
 public:
};

ZeroRequest::ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ZeroRequest)
}
ZeroRequest::ZeroRequest(const ZeroRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ZeroRequest)
}

inline void ZeroRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

ZeroRequest::~ZeroRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ZeroRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZeroRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroRequest::ArenaDtor(void* object) {
  ZeroRequest* _this = reinterpret_cast< ZeroRequest* >(object);
  (void)_this;
}
void ZeroRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeroRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeroRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ZeroRequest)
  return target;
}

size_t ZeroRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ZeroRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZeroRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroRequest::GetClassData() const { return &_class_data_; }

void ZeroRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZeroRequest *>(to)->MergeFrom(
      static_cast<const ZeroRequest &>(from));
}


void ZeroRequest::MergeFrom(const ZeroRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ZeroRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroRequest::CopyFrom(const ZeroRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ZeroRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroRequest::IsInitialized() const {
  return true;
}

void ZeroRequest::InternalSwap(ZeroRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[30]);
}

// ===================================================================

class ZeroReply::_Internal {
 public:
};

ZeroReply::ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.ZeroReply)
}
ZeroReply::ZeroReply(const ZeroReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.ZeroReply)
}

inline void ZeroReply::SharedCtor() {
status_ = false;
}

ZeroReply::~ZeroReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.ZeroReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZeroReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroReply::ArenaDtor(void* object) {
  ZeroReply* _this = reinterpret_cast< ZeroReply* >(object);
  (void)_this;
}
void ZeroReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeroReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZeroReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.ZeroReply)
  return target;
}

size_t ZeroReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.ZeroReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZeroReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroReply::GetClassData() const { return &_class_data_; }

void ZeroReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZeroReply *>(to)->MergeFrom(
      static_cast<const ZeroReply &>(from));
}


void ZeroReply::MergeFrom(const ZeroReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.ZeroReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroReply::CopyFrom(const ZeroReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.ZeroReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroReply::IsInitialized() const {
  return true;
}

void ZeroReply::InternalSwap(ZeroReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[31]);
}

// ===================================================================

class GetMotorStatusRequest::_Internal {
 public:
};

GetMotorStatusRequest::GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.GetMotorStatusRequest)
}
GetMotorStatusRequest::GetMotorStatusRequest(const GetMotorStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.GetMotorStatusRequest)
}

inline void GetMotorStatusRequest::SharedCtor() {
machine_id_ = int64_t{0};
}

GetMotorStatusRequest::~GetMotorStatusRequest() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.GetMotorStatusRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMotorStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMotorStatusRequest::ArenaDtor(void* object) {
  GetMotorStatusRequest* _this = reinterpret_cast< GetMotorStatusRequest* >(object);
  (void)_this;
}
void GetMotorStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMotorStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMotorStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.GetMotorStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMotorStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMotorStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.GetMotorStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.GetMotorStatusRequest)
  return target;
}

size_t GetMotorStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.GetMotorStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->_internal_machine_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_machine_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMotorStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMotorStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMotorStatusRequest::GetClassData() const { return &_class_data_; }

void GetMotorStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMotorStatusRequest *>(to)->MergeFrom(
      static_cast<const GetMotorStatusRequest &>(from));
}


void GetMotorStatusRequest::MergeFrom(const GetMotorStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.GetMotorStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMotorStatusRequest::CopyFrom(const GetMotorStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.GetMotorStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotorStatusRequest::IsInitialized() const {
  return true;
}

void GetMotorStatusRequest::InternalSwap(GetMotorStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotorStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[32]);
}

// ===================================================================

class GetMotorStatusReply::_Internal {
 public:
};

GetMotorStatusReply::GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  motor_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.GetMotorStatusReply)
}
GetMotorStatusReply::GetMotorStatusReply(const GetMotorStatusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      motor_info_(from.motor_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.GetMotorStatusReply)
}

inline void GetMotorStatusReply::SharedCtor() {
}

GetMotorStatusReply::~GetMotorStatusReply() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.GetMotorStatusReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetMotorStatusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMotorStatusReply::ArenaDtor(void* object) {
  GetMotorStatusReply* _this = reinterpret_cast< GetMotorStatusReply* >(object);
  (void)_this;
}
void GetMotorStatusReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMotorStatusReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetMotorStatusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.GetMotorStatusReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motor_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMotorStatusReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.interface.v1.MotorInfo motor_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motor_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMotorStatusReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.GetMotorStatusReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.MotorInfo motor_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_motor_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_motor_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.GetMotorStatusReply)
  return target;
}

size_t GetMotorStatusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.GetMotorStatusReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.interface.v1.MotorInfo motor_info = 1;
  total_size += 1UL * this->_internal_motor_info_size();
  for (const auto& msg : this->motor_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMotorStatusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetMotorStatusReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMotorStatusReply::GetClassData() const { return &_class_data_; }

void GetMotorStatusReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetMotorStatusReply *>(to)->MergeFrom(
      static_cast<const GetMotorStatusReply &>(from));
}


void GetMotorStatusReply::MergeFrom(const GetMotorStatusReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.GetMotorStatusReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  motor_info_.MergeFrom(from.motor_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMotorStatusReply::CopyFrom(const GetMotorStatusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.GetMotorStatusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotorStatusReply::IsInitialized() const {
  return true;
}

void GetMotorStatusReply::InternalSwap(GetMotorStatusReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  motor_info_.InternalSwap(&other->motor_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotorStatusReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[33]);
}

// ===================================================================

class MotorInfo::_Internal {
 public:
  static const ::htpp::interface::v1::MotorStatus& motor_status(const MotorInfo* msg);
};

const ::htpp::interface::v1::MotorStatus&
MotorInfo::_Internal::motor_status(const MotorInfo* msg) {
  return *msg->motor_status_;
}
MotorInfo::MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MotorInfo)
}
MotorInfo::MotorInfo(const MotorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motor_status()) {
    motor_status_ = new ::htpp::interface::v1::MotorStatus(*from.motor_status_);
  } else {
    motor_status_ = nullptr;
  }
  ::memcpy(&instr_pos_, &from.instr_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_pos_) -
    reinterpret_cast<char*>(&instr_pos_)) + sizeof(current_pos_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MotorInfo)
}

inline void MotorInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&motor_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_pos_) -
    reinterpret_cast<char*>(&motor_status_)) + sizeof(current_pos_));
}

MotorInfo::~MotorInfo() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MotorInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete motor_status_;
}

void MotorInfo::ArenaDtor(void* object) {
  MotorInfo* _this = reinterpret_cast< MotorInfo* >(object);
  (void)_this;
}
void MotorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && motor_status_ != nullptr) {
    delete motor_status_;
  }
  motor_status_ = nullptr;
  ::memset(&instr_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_pos_) -
      reinterpret_cast<char*>(&instr_pos_)) + sizeof(current_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.interface.v1.MotorStatus motor_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motor_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instr_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          instr_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          current_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.interface.v1.MotorStatus motor_status = 1;
  if (this->_internal_has_motor_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::motor_status(this), target, stream);
  }

  // int64 instr_pos = 2;
  if (this->_internal_instr_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_instr_pos(), target);
  }

  // int64 current_pos = 3;
  if (this->_internal_current_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MotorInfo)
  return target;
}

size_t MotorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MotorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.interface.v1.MotorStatus motor_status = 1;
  if (this->_internal_has_motor_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motor_status_);
  }

  // int64 instr_pos = 2;
  if (this->_internal_instr_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_instr_pos());
  }

  // int64 current_pos = 3;
  if (this->_internal_current_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_current_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorInfo::GetClassData() const { return &_class_data_; }

void MotorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotorInfo *>(to)->MergeFrom(
      static_cast<const MotorInfo &>(from));
}


void MotorInfo::MergeFrom(const MotorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MotorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motor_status()) {
    _internal_mutable_motor_status()->::htpp::interface::v1::MotorStatus::MergeFrom(from._internal_motor_status());
  }
  if (from._internal_instr_pos() != 0) {
    _internal_set_instr_pos(from._internal_instr_pos());
  }
  if (from._internal_current_pos() != 0) {
    _internal_set_current_pos(from._internal_current_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorInfo::CopyFrom(const MotorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MotorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorInfo::IsInitialized() const {
  return true;
}

void MotorInfo::InternalSwap(MotorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorInfo, current_pos_)
      + sizeof(MotorInfo::current_pos_)
      - PROTOBUF_FIELD_OFFSET(MotorInfo, motor_status_)>(
          reinterpret_cast<char*>(&motor_status_),
          reinterpret_cast<char*>(&other->motor_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[34]);
}

// ===================================================================

class MotorStatus::_Internal {
 public:
};

MotorStatus::MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:htpp.interface.v1.MotorStatus)
}
MotorStatus::MotorStatus(const MotorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fault_, &from.fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_completion_) -
    reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
  // @@protoc_insertion_point(copy_constructor:htpp.interface.v1.MotorStatus)
}

inline void MotorStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fault_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zero_completion_) -
    reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
}

MotorStatus::~MotorStatus() {
  // @@protoc_insertion_point(destructor:htpp.interface.v1.MotorStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotorStatus::ArenaDtor(void* object) {
  MotorStatus* _this = reinterpret_cast< MotorStatus* >(object);
  (void)_this;
}
void MotorStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.interface.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_completion_) -
      reinterpret_cast<char*>(&fault_)) + sizeof(zero_completion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enabling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool running = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool instruction_completion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          instruction_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool path_completion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          path_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool zero_completion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          zero_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.interface.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fault = 1;
  if (this->_internal_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fault(), target);
  }

  // bool enabling = 2;
  if (this->_internal_enabling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabling(), target);
  }

  // bool running = 3;
  if (this->_internal_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_running(), target);
  }

  // bool instruction_completion = 4;
  if (this->_internal_instruction_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_instruction_completion(), target);
  }

  // bool path_completion = 5;
  if (this->_internal_path_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_path_completion(), target);
  }

  // bool zero_completion = 6;
  if (this->_internal_zero_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_zero_completion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.interface.v1.MotorStatus)
  return target;
}

size_t MotorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.interface.v1.MotorStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool fault = 1;
  if (this->_internal_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool enabling = 2;
  if (this->_internal_enabling() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 3;
  if (this->_internal_running() != 0) {
    total_size += 1 + 1;
  }

  // bool instruction_completion = 4;
  if (this->_internal_instruction_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool path_completion = 5;
  if (this->_internal_path_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool zero_completion = 6;
  if (this->_internal_zero_completion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorStatus::GetClassData() const { return &_class_data_; }

void MotorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotorStatus *>(to)->MergeFrom(
      static_cast<const MotorStatus &>(from));
}


void MotorStatus::MergeFrom(const MotorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:htpp.interface.v1.MotorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fault() != 0) {
    _internal_set_fault(from._internal_fault());
  }
  if (from._internal_enabling() != 0) {
    _internal_set_enabling(from._internal_enabling());
  }
  if (from._internal_running() != 0) {
    _internal_set_running(from._internal_running());
  }
  if (from._internal_instruction_completion() != 0) {
    _internal_set_instruction_completion(from._internal_instruction_completion());
  }
  if (from._internal_path_completion() != 0) {
    _internal_set_path_completion(from._internal_path_completion());
  }
  if (from._internal_zero_completion() != 0) {
    _internal_set_zero_completion(from._internal_zero_completion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorStatus::CopyFrom(const MotorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.interface.v1.MotorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorStatus::IsInitialized() const {
  return true;
}

void MotorStatus::InternalSwap(MotorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorStatus, zero_completion_)
      + sizeof(MotorStatus::zero_completion_)
      - PROTOBUF_FIELD_OFFSET(MotorStatus, fault_)>(
          reinterpret_cast<char*>(&fault_),
          reinterpret_cast<char*>(&other->fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace interface
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::LoginRequest_User* Arena::CreateMaybeMessage< ::htpp::interface::v1::LoginRequest_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::LoginRequest_User >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::LoginRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::RegisterRequest_User* Arena::CreateMaybeMessage< ::htpp::interface::v1::RegisterRequest_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::RegisterRequest_User >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::RegisterRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::GetCurrentUserRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::GetCurrentUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::GetCurrentUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::UpdateUserRequest_User* Arena::CreateMaybeMessage< ::htpp::interface::v1::UpdateUserRequest_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::UpdateUserRequest_User >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::UpdateUserRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::UpdateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::UpdateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::UserReply_User* Arena::CreateMaybeMessage< ::htpp::interface::v1::UserReply_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::UserReply_User >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::UserReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::UserReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::UserReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadOneRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadOneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadOneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadAllRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadOneWithBinaryRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadOneWithBinaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadOneWithBinaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadAllWithBinaryRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadAllWithBinaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadAllWithBinaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ImageReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::ImageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ImageReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ImagesReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::ImagesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ImagesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ImageWithAreaReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::ImageWithAreaReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ImageWithAreaReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ImagesWithAreaReply_Data* Arena::CreateMaybeMessage< ::htpp::interface::v1::ImagesWithAreaReply_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ImagesWithAreaReply_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ImagesWithAreaReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::ImagesWithAreaReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ImagesWithAreaReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::Image* Arena::CreateMaybeMessage< ::htpp::interface::v1::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::GetCurrentUserMachinesRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::GetCurrentUserMachinesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::GetCurrentUserMachinesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::RegisterMachineRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::RegisterMachineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::RegisterMachineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::UpdateMachineRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::UpdateMachineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::UpdateMachineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::GetMachineRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::GetMachineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::GetMachineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MachineReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::MachineReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MachineReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MachinesReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::MachinesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MachinesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MachineStruct* Arena::CreateMaybeMessage< ::htpp::interface::v1::MachineStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MachineStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MoveRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MoveReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::MoveReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MoveReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ZeroRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::ZeroRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ZeroRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::ZeroReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::ZeroReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::ZeroReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::GetMotorStatusRequest* Arena::CreateMaybeMessage< ::htpp::interface::v1::GetMotorStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::GetMotorStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::GetMotorStatusReply* Arena::CreateMaybeMessage< ::htpp::interface::v1::GetMotorStatusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::GetMotorStatusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MotorInfo* Arena::CreateMaybeMessage< ::htpp::interface::v1::MotorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MotorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::interface::v1::MotorStatus* Arena::CreateMaybeMessage< ::htpp::interface::v1::MotorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::interface::v1::MotorStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
