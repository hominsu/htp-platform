// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[45]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto;
namespace htpp {
namespace interface {
namespace v1 {
class CheckCoordinate;
struct CheckCoordinateDefaultTypeInternal;
extern CheckCoordinateDefaultTypeInternal _CheckCoordinate_default_instance_;
class Coordinate;
struct CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class CreateCronJobRequest;
struct CreateCronJobRequestDefaultTypeInternal;
extern CreateCronJobRequestDefaultTypeInternal _CreateCronJobRequest_default_instance_;
class CronJob;
struct CronJobDefaultTypeInternal;
extern CronJobDefaultTypeInternal _CronJob_default_instance_;
class CronJobReply;
struct CronJobReplyDefaultTypeInternal;
extern CronJobReplyDefaultTypeInternal _CronJobReply_default_instance_;
class CronJobsReply;
struct CronJobsReplyDefaultTypeInternal;
extern CronJobsReplyDefaultTypeInternal _CronJobsReply_default_instance_;
class DeleteCronJobReply;
struct DeleteCronJobReplyDefaultTypeInternal;
extern DeleteCronJobReplyDefaultTypeInternal _DeleteCronJobReply_default_instance_;
class DeleteCronJobRequest;
struct DeleteCronJobRequestDefaultTypeInternal;
extern DeleteCronJobRequestDefaultTypeInternal _DeleteCronJobRequest_default_instance_;
class GetCurrentUserMachinesRequest;
struct GetCurrentUserMachinesRequestDefaultTypeInternal;
extern GetCurrentUserMachinesRequestDefaultTypeInternal _GetCurrentUserMachinesRequest_default_instance_;
class GetCurrentUserRequest;
struct GetCurrentUserRequestDefaultTypeInternal;
extern GetCurrentUserRequestDefaultTypeInternal _GetCurrentUserRequest_default_instance_;
class GetMachineRequest;
struct GetMachineRequestDefaultTypeInternal;
extern GetMachineRequestDefaultTypeInternal _GetMachineRequest_default_instance_;
class GetMotorStatusReply;
struct GetMotorStatusReplyDefaultTypeInternal;
extern GetMotorStatusReplyDefaultTypeInternal _GetMotorStatusReply_default_instance_;
class GetMotorStatusRequest;
struct GetMotorStatusRequestDefaultTypeInternal;
extern GetMotorStatusRequestDefaultTypeInternal _GetMotorStatusRequest_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageReply;
struct ImageReplyDefaultTypeInternal;
extern ImageReplyDefaultTypeInternal _ImageReply_default_instance_;
class ImageWithAreaReply;
struct ImageWithAreaReplyDefaultTypeInternal;
extern ImageWithAreaReplyDefaultTypeInternal _ImageWithAreaReply_default_instance_;
class ImagesReply;
struct ImagesReplyDefaultTypeInternal;
extern ImagesReplyDefaultTypeInternal _ImagesReply_default_instance_;
class ImagesWithAreaReply;
struct ImagesWithAreaReplyDefaultTypeInternal;
extern ImagesWithAreaReplyDefaultTypeInternal _ImagesWithAreaReply_default_instance_;
class ImagesWithAreaReply_Data;
struct ImagesWithAreaReply_DataDefaultTypeInternal;
extern ImagesWithAreaReply_DataDefaultTypeInternal _ImagesWithAreaReply_Data_default_instance_;
class ListCronJobRequest;
struct ListCronJobRequestDefaultTypeInternal;
extern ListCronJobRequestDefaultTypeInternal _ListCronJobRequest_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginRequest_User;
struct LoginRequest_UserDefaultTypeInternal;
extern LoginRequest_UserDefaultTypeInternal _LoginRequest_User_default_instance_;
class MachineReply;
struct MachineReplyDefaultTypeInternal;
extern MachineReplyDefaultTypeInternal _MachineReply_default_instance_;
class MachineStruct;
struct MachineStructDefaultTypeInternal;
extern MachineStructDefaultTypeInternal _MachineStruct_default_instance_;
class MachinesReply;
struct MachinesReplyDefaultTypeInternal;
extern MachinesReplyDefaultTypeInternal _MachinesReply_default_instance_;
class MotorInfo;
struct MotorInfoDefaultTypeInternal;
extern MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
class MotorStatus;
struct MotorStatusDefaultTypeInternal;
extern MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
class MoveReply;
struct MoveReplyDefaultTypeInternal;
extern MoveReplyDefaultTypeInternal _MoveReply_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class ReadAllRequest;
struct ReadAllRequestDefaultTypeInternal;
extern ReadAllRequestDefaultTypeInternal _ReadAllRequest_default_instance_;
class ReadAllWithBinaryAndCalAreaRequest;
struct ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal;
extern ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadAllWithBinaryAndCalAreaRequest_default_instance_;
class ReadAllWithBinaryRequest;
struct ReadAllWithBinaryRequestDefaultTypeInternal;
extern ReadAllWithBinaryRequestDefaultTypeInternal _ReadAllWithBinaryRequest_default_instance_;
class ReadOneRequest;
struct ReadOneRequestDefaultTypeInternal;
extern ReadOneRequestDefaultTypeInternal _ReadOneRequest_default_instance_;
class ReadOneWithBinaryAndCalAreaRequest;
struct ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal;
extern ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadOneWithBinaryAndCalAreaRequest_default_instance_;
class ReadOneWithBinaryRequest;
struct ReadOneWithBinaryRequestDefaultTypeInternal;
extern ReadOneWithBinaryRequestDefaultTypeInternal _ReadOneWithBinaryRequest_default_instance_;
class RegisterMachineRequest;
struct RegisterMachineRequestDefaultTypeInternal;
extern RegisterMachineRequestDefaultTypeInternal _RegisterMachineRequest_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterRequest_User;
struct RegisterRequest_UserDefaultTypeInternal;
extern RegisterRequest_UserDefaultTypeInternal _RegisterRequest_User_default_instance_;
class UpdateMachineRequest;
struct UpdateMachineRequestDefaultTypeInternal;
extern UpdateMachineRequestDefaultTypeInternal _UpdateMachineRequest_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserRequest_User;
struct UpdateUserRequest_UserDefaultTypeInternal;
extern UpdateUserRequest_UserDefaultTypeInternal _UpdateUserRequest_User_default_instance_;
class UserReply;
struct UserReplyDefaultTypeInternal;
extern UserReplyDefaultTypeInternal _UserReply_default_instance_;
class UserReply_User;
struct UserReply_UserDefaultTypeInternal;
extern UserReply_UserDefaultTypeInternal _UserReply_User_default_instance_;
class ZeroReply;
struct ZeroReplyDefaultTypeInternal;
extern ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
class ZeroRequest;
struct ZeroRequestDefaultTypeInternal;
extern ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
}  // namespace v1
}  // namespace interface
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> ::htpp::interface::v1::CheckCoordinate* Arena::CreateMaybeMessage<::htpp::interface::v1::CheckCoordinate>(Arena*);
template<> ::htpp::interface::v1::Coordinate* Arena::CreateMaybeMessage<::htpp::interface::v1::Coordinate>(Arena*);
template<> ::htpp::interface::v1::CreateCronJobRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::CreateCronJobRequest>(Arena*);
template<> ::htpp::interface::v1::CronJob* Arena::CreateMaybeMessage<::htpp::interface::v1::CronJob>(Arena*);
template<> ::htpp::interface::v1::CronJobReply* Arena::CreateMaybeMessage<::htpp::interface::v1::CronJobReply>(Arena*);
template<> ::htpp::interface::v1::CronJobsReply* Arena::CreateMaybeMessage<::htpp::interface::v1::CronJobsReply>(Arena*);
template<> ::htpp::interface::v1::DeleteCronJobReply* Arena::CreateMaybeMessage<::htpp::interface::v1::DeleteCronJobReply>(Arena*);
template<> ::htpp::interface::v1::DeleteCronJobRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::DeleteCronJobRequest>(Arena*);
template<> ::htpp::interface::v1::GetCurrentUserMachinesRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::GetCurrentUserMachinesRequest>(Arena*);
template<> ::htpp::interface::v1::GetCurrentUserRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::GetCurrentUserRequest>(Arena*);
template<> ::htpp::interface::v1::GetMachineRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::GetMachineRequest>(Arena*);
template<> ::htpp::interface::v1::GetMotorStatusReply* Arena::CreateMaybeMessage<::htpp::interface::v1::GetMotorStatusReply>(Arena*);
template<> ::htpp::interface::v1::GetMotorStatusRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::GetMotorStatusRequest>(Arena*);
template<> ::htpp::interface::v1::Image* Arena::CreateMaybeMessage<::htpp::interface::v1::Image>(Arena*);
template<> ::htpp::interface::v1::ImageReply* Arena::CreateMaybeMessage<::htpp::interface::v1::ImageReply>(Arena*);
template<> ::htpp::interface::v1::ImageWithAreaReply* Arena::CreateMaybeMessage<::htpp::interface::v1::ImageWithAreaReply>(Arena*);
template<> ::htpp::interface::v1::ImagesReply* Arena::CreateMaybeMessage<::htpp::interface::v1::ImagesReply>(Arena*);
template<> ::htpp::interface::v1::ImagesWithAreaReply* Arena::CreateMaybeMessage<::htpp::interface::v1::ImagesWithAreaReply>(Arena*);
template<> ::htpp::interface::v1::ImagesWithAreaReply_Data* Arena::CreateMaybeMessage<::htpp::interface::v1::ImagesWithAreaReply_Data>(Arena*);
template<> ::htpp::interface::v1::ListCronJobRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ListCronJobRequest>(Arena*);
template<> ::htpp::interface::v1::LoginRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::LoginRequest>(Arena*);
template<> ::htpp::interface::v1::LoginRequest_User* Arena::CreateMaybeMessage<::htpp::interface::v1::LoginRequest_User>(Arena*);
template<> ::htpp::interface::v1::MachineReply* Arena::CreateMaybeMessage<::htpp::interface::v1::MachineReply>(Arena*);
template<> ::htpp::interface::v1::MachineStruct* Arena::CreateMaybeMessage<::htpp::interface::v1::MachineStruct>(Arena*);
template<> ::htpp::interface::v1::MachinesReply* Arena::CreateMaybeMessage<::htpp::interface::v1::MachinesReply>(Arena*);
template<> ::htpp::interface::v1::MotorInfo* Arena::CreateMaybeMessage<::htpp::interface::v1::MotorInfo>(Arena*);
template<> ::htpp::interface::v1::MotorStatus* Arena::CreateMaybeMessage<::htpp::interface::v1::MotorStatus>(Arena*);
template<> ::htpp::interface::v1::MoveReply* Arena::CreateMaybeMessage<::htpp::interface::v1::MoveReply>(Arena*);
template<> ::htpp::interface::v1::MoveRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::MoveRequest>(Arena*);
template<> ::htpp::interface::v1::ReadAllRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadAllRequest>(Arena*);
template<> ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest>(Arena*);
template<> ::htpp::interface::v1::ReadAllWithBinaryRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadAllWithBinaryRequest>(Arena*);
template<> ::htpp::interface::v1::ReadOneRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadOneRequest>(Arena*);
template<> ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest>(Arena*);
template<> ::htpp::interface::v1::ReadOneWithBinaryRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ReadOneWithBinaryRequest>(Arena*);
template<> ::htpp::interface::v1::RegisterMachineRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::RegisterMachineRequest>(Arena*);
template<> ::htpp::interface::v1::RegisterRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::RegisterRequest>(Arena*);
template<> ::htpp::interface::v1::RegisterRequest_User* Arena::CreateMaybeMessage<::htpp::interface::v1::RegisterRequest_User>(Arena*);
template<> ::htpp::interface::v1::UpdateMachineRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::UpdateMachineRequest>(Arena*);
template<> ::htpp::interface::v1::UpdateUserRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::UpdateUserRequest>(Arena*);
template<> ::htpp::interface::v1::UpdateUserRequest_User* Arena::CreateMaybeMessage<::htpp::interface::v1::UpdateUserRequest_User>(Arena*);
template<> ::htpp::interface::v1::UserReply* Arena::CreateMaybeMessage<::htpp::interface::v1::UserReply>(Arena*);
template<> ::htpp::interface::v1::UserReply_User* Arena::CreateMaybeMessage<::htpp::interface::v1::UserReply_User>(Arena*);
template<> ::htpp::interface::v1::ZeroReply* Arena::CreateMaybeMessage<::htpp::interface::v1::ZeroReply>(Arena*);
template<> ::htpp::interface::v1::ZeroRequest* Arena::CreateMaybeMessage<::htpp::interface::v1::ZeroRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace htpp {
namespace interface {
namespace v1 {

// ===================================================================

class LoginRequest_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.LoginRequest.User) */ {
 public:
  inline LoginRequest_User() : LoginRequest_User(nullptr) {}
  ~LoginRequest_User() override;
  explicit constexpr LoginRequest_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest_User(const LoginRequest_User& from);
  LoginRequest_User(LoginRequest_User&& from) noexcept
    : LoginRequest_User() {
    *this = ::std::move(from);
  }

  inline LoginRequest_User& operator=(const LoginRequest_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest_User& operator=(LoginRequest_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest_User* internal_default_instance() {
    return reinterpret_cast<const LoginRequest_User*>(
               &_LoginRequest_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest_User& a, LoginRequest_User& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest_User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.LoginRequest.User";
  }
  protected:
  explicit LoginRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.LoginRequest.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginRequest_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.interface.v1.LoginRequest.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::interface::v1::LoginRequest_User& user() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::LoginRequest_User* release_user();
  ::htpp::interface::v1::LoginRequest_User* mutable_user();
  void set_allocated_user(::htpp::interface::v1::LoginRequest_User* user);
  private:
  const ::htpp::interface::v1::LoginRequest_User& _internal_user() const;
  ::htpp::interface::v1::LoginRequest_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::interface::v1::LoginRequest_User* user);
  ::htpp::interface::v1::LoginRequest_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::LoginRequest_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.RegisterRequest.User) */ {
 public:
  inline RegisterRequest_User() : RegisterRequest_User(nullptr) {}
  ~RegisterRequest_User() override;
  explicit constexpr RegisterRequest_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest_User(const RegisterRequest_User& from);
  RegisterRequest_User(RegisterRequest_User&& from) noexcept
    : RegisterRequest_User() {
    *this = ::std::move(from);
  }

  inline RegisterRequest_User& operator=(const RegisterRequest_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest_User& operator=(RegisterRequest_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest_User* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest_User*>(
               &_RegisterRequest_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterRequest_User& a, RegisterRequest_User& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest_User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.RegisterRequest.User";
  }
  protected:
  explicit RegisterRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.RegisterRequest.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RegisterRequest_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.interface.v1.RegisterRequest.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::interface::v1::RegisterRequest_User& user() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::RegisterRequest_User* release_user();
  ::htpp::interface::v1::RegisterRequest_User* mutable_user();
  void set_allocated_user(::htpp::interface::v1::RegisterRequest_User* user);
  private:
  const ::htpp::interface::v1::RegisterRequest_User& _internal_user() const;
  ::htpp::interface::v1::RegisterRequest_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::interface::v1::RegisterRequest_User* user);
  ::htpp::interface::v1::RegisterRequest_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::RegisterRequest_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.GetCurrentUserRequest) */ {
 public:
  inline GetCurrentUserRequest() : GetCurrentUserRequest(nullptr) {}
  ~GetCurrentUserRequest() override;
  explicit constexpr GetCurrentUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentUserRequest(const GetCurrentUserRequest& from);
  GetCurrentUserRequest(GetCurrentUserRequest&& from) noexcept
    : GetCurrentUserRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentUserRequest& operator=(const GetCurrentUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentUserRequest& operator=(GetCurrentUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentUserRequest*>(
               &_GetCurrentUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetCurrentUserRequest& a, GetCurrentUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.GetCurrentUserRequest";
  }
  protected:
  explicit GetCurrentUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.GetCurrentUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.UpdateUserRequest.User) */ {
 public:
  inline UpdateUserRequest_User() : UpdateUserRequest_User(nullptr) {}
  ~UpdateUserRequest_User() override;
  explicit constexpr UpdateUserRequest_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest_User(const UpdateUserRequest_User& from);
  UpdateUserRequest_User(UpdateUserRequest_User&& from) noexcept
    : UpdateUserRequest_User() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest_User& operator=(const UpdateUserRequest_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest_User& operator=(UpdateUserRequest_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest_User* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest_User*>(
               &_UpdateUserRequest_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUserRequest_User& a, UpdateUserRequest_User& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserRequest_User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.UpdateUserRequest.User";
  }
  protected:
  explicit UpdateUserRequest_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUsernameFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string username = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.UpdateUserRequest.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit constexpr UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateUserRequest_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.interface.v1.UpdateUserRequest.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::interface::v1::UpdateUserRequest_User& user() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::UpdateUserRequest_User* release_user();
  ::htpp::interface::v1::UpdateUserRequest_User* mutable_user();
  void set_allocated_user(::htpp::interface::v1::UpdateUserRequest_User* user);
  private:
  const ::htpp::interface::v1::UpdateUserRequest_User& _internal_user() const;
  ::htpp::interface::v1::UpdateUserRequest_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::interface::v1::UpdateUserRequest_User* user);
  ::htpp::interface::v1::UpdateUserRequest_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::UpdateUserRequest_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class UserReply_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.UserReply.User) */ {
 public:
  inline UserReply_User() : UserReply_User(nullptr) {}
  ~UserReply_User() override;
  explicit constexpr UserReply_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserReply_User(const UserReply_User& from);
  UserReply_User(UserReply_User&& from) noexcept
    : UserReply_User() {
    *this = ::std::move(from);
  }

  inline UserReply_User& operator=(const UserReply_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReply_User& operator=(UserReply_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserReply_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserReply_User* internal_default_instance() {
    return reinterpret_cast<const UserReply_User*>(
               &_UserReply_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserReply_User& a, UserReply_User& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReply_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserReply_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserReply_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserReply_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserReply_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserReply_User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReply_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.UserReply.User";
  }
  protected:
  explicit UserReply_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kTokenFieldNumber = 3,
    kUsernameFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string username = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.UserReply.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class UserReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.UserReply) */ {
 public:
  inline UserReply() : UserReply(nullptr) {}
  ~UserReply() override;
  explicit constexpr UserReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserReply(const UserReply& from);
  UserReply(UserReply&& from) noexcept
    : UserReply() {
    *this = ::std::move(from);
  }

  inline UserReply& operator=(const UserReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReply& operator=(UserReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserReply* internal_default_instance() {
    return reinterpret_cast<const UserReply*>(
               &_UserReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserReply& a, UserReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.UserReply";
  }
  protected:
  explicit UserReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserReply_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.interface.v1.UserReply.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::interface::v1::UserReply_User& user() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::UserReply_User* release_user();
  ::htpp::interface::v1::UserReply_User* mutable_user();
  void set_allocated_user(::htpp::interface::v1::UserReply_User* user);
  private:
  const ::htpp::interface::v1::UserReply_User& _internal_user() const;
  ::htpp::interface::v1::UserReply_User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::interface::v1::UserReply_User* user);
  ::htpp::interface::v1::UserReply_User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.UserReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::UserReply_User* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadOneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadOneRequest) */ {
 public:
  inline ReadOneRequest() : ReadOneRequest(nullptr) {}
  ~ReadOneRequest() override;
  explicit constexpr ReadOneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOneRequest(const ReadOneRequest& from);
  ReadOneRequest(ReadOneRequest&& from) noexcept
    : ReadOneRequest() {
    *this = ::std::move(from);
  }

  inline ReadOneRequest& operator=(const ReadOneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOneRequest& operator=(ReadOneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOneRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOneRequest*>(
               &_ReadOneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadOneRequest& a, ReadOneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOneRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadOneRequest";
  }
  protected:
  explicit ReadOneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadOneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadAllRequest) */ {
 public:
  inline ReadAllRequest() : ReadAllRequest(nullptr) {}
  explicit constexpr ReadAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadAllRequest(const ReadAllRequest& from);
  ReadAllRequest(ReadAllRequest&& from) noexcept
    : ReadAllRequest() {
    *this = ::std::move(from);
  }

  inline ReadAllRequest& operator=(const ReadAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAllRequest& operator=(ReadAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadAllRequest* internal_default_instance() {
    return reinterpret_cast<const ReadAllRequest*>(
               &_ReadAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReadAllRequest& a, ReadAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadAllRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadAllRequest";
  }
  protected:
  explicit ReadAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadOneWithBinaryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadOneWithBinaryRequest) */ {
 public:
  inline ReadOneWithBinaryRequest() : ReadOneWithBinaryRequest(nullptr) {}
  ~ReadOneWithBinaryRequest() override;
  explicit constexpr ReadOneWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOneWithBinaryRequest(const ReadOneWithBinaryRequest& from);
  ReadOneWithBinaryRequest(ReadOneWithBinaryRequest&& from) noexcept
    : ReadOneWithBinaryRequest() {
    *this = ::std::move(from);
  }

  inline ReadOneWithBinaryRequest& operator=(const ReadOneWithBinaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOneWithBinaryRequest& operator=(ReadOneWithBinaryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOneWithBinaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOneWithBinaryRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOneWithBinaryRequest*>(
               &_ReadOneWithBinaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadOneWithBinaryRequest& a, ReadOneWithBinaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOneWithBinaryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOneWithBinaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOneWithBinaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOneWithBinaryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOneWithBinaryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOneWithBinaryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOneWithBinaryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadOneWithBinaryRequest";
  }
  protected:
  explicit ReadOneWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadOneWithBinaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadAllWithBinaryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadAllWithBinaryRequest) */ {
 public:
  inline ReadAllWithBinaryRequest() : ReadAllWithBinaryRequest(nullptr) {}
  explicit constexpr ReadAllWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadAllWithBinaryRequest(const ReadAllWithBinaryRequest& from);
  ReadAllWithBinaryRequest(ReadAllWithBinaryRequest&& from) noexcept
    : ReadAllWithBinaryRequest() {
    *this = ::std::move(from);
  }

  inline ReadAllWithBinaryRequest& operator=(const ReadAllWithBinaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAllWithBinaryRequest& operator=(ReadAllWithBinaryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadAllWithBinaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadAllWithBinaryRequest* internal_default_instance() {
    return reinterpret_cast<const ReadAllWithBinaryRequest*>(
               &_ReadAllWithBinaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReadAllWithBinaryRequest& a, ReadAllWithBinaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAllWithBinaryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadAllWithBinaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadAllWithBinaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadAllWithBinaryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadAllWithBinaryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadAllWithBinaryRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadAllWithBinaryRequest";
  }
  protected:
  explicit ReadAllWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadAllWithBinaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadOneWithBinaryAndCalAreaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest) */ {
 public:
  inline ReadOneWithBinaryAndCalAreaRequest() : ReadOneWithBinaryAndCalAreaRequest(nullptr) {}
  ~ReadOneWithBinaryAndCalAreaRequest() override;
  explicit constexpr ReadOneWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOneWithBinaryAndCalAreaRequest(const ReadOneWithBinaryAndCalAreaRequest& from);
  ReadOneWithBinaryAndCalAreaRequest(ReadOneWithBinaryAndCalAreaRequest&& from) noexcept
    : ReadOneWithBinaryAndCalAreaRequest() {
    *this = ::std::move(from);
  }

  inline ReadOneWithBinaryAndCalAreaRequest& operator=(const ReadOneWithBinaryAndCalAreaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOneWithBinaryAndCalAreaRequest& operator=(ReadOneWithBinaryAndCalAreaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOneWithBinaryAndCalAreaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOneWithBinaryAndCalAreaRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOneWithBinaryAndCalAreaRequest*>(
               &_ReadOneWithBinaryAndCalAreaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReadOneWithBinaryAndCalAreaRequest& a, ReadOneWithBinaryAndCalAreaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOneWithBinaryAndCalAreaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOneWithBinaryAndCalAreaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOneWithBinaryAndCalAreaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOneWithBinaryAndCalAreaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOneWithBinaryAndCalAreaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOneWithBinaryAndCalAreaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOneWithBinaryAndCalAreaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest";
  }
  protected:
  explicit ReadOneWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ReadAllWithBinaryAndCalAreaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ReadAllWithBinaryAndCalAreaRequest) */ {
 public:
  inline ReadAllWithBinaryAndCalAreaRequest() : ReadAllWithBinaryAndCalAreaRequest(nullptr) {}
  explicit constexpr ReadAllWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadAllWithBinaryAndCalAreaRequest(const ReadAllWithBinaryAndCalAreaRequest& from);
  ReadAllWithBinaryAndCalAreaRequest(ReadAllWithBinaryAndCalAreaRequest&& from) noexcept
    : ReadAllWithBinaryAndCalAreaRequest() {
    *this = ::std::move(from);
  }

  inline ReadAllWithBinaryAndCalAreaRequest& operator=(const ReadAllWithBinaryAndCalAreaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAllWithBinaryAndCalAreaRequest& operator=(ReadAllWithBinaryAndCalAreaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadAllWithBinaryAndCalAreaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadAllWithBinaryAndCalAreaRequest* internal_default_instance() {
    return reinterpret_cast<const ReadAllWithBinaryAndCalAreaRequest*>(
               &_ReadAllWithBinaryAndCalAreaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadAllWithBinaryAndCalAreaRequest& a, ReadAllWithBinaryAndCalAreaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAllWithBinaryAndCalAreaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadAllWithBinaryAndCalAreaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadAllWithBinaryAndCalAreaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadAllWithBinaryAndCalAreaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadAllWithBinaryAndCalAreaRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadAllWithBinaryAndCalAreaRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ReadAllWithBinaryAndCalAreaRequest";
  }
  protected:
  explicit ReadAllWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ReadAllWithBinaryAndCalAreaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ImageReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ImageReply) */ {
 public:
  inline ImageReply() : ImageReply(nullptr) {}
  ~ImageReply() override;
  explicit constexpr ImageReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageReply(const ImageReply& from);
  ImageReply(ImageReply&& from) noexcept
    : ImageReply() {
    *this = ::std::move(from);
  }

  inline ImageReply& operator=(const ImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageReply& operator=(ImageReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageReply* internal_default_instance() {
    return reinterpret_cast<const ImageReply*>(
               &_ImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ImageReply& a, ImageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ImageReply";
  }
  protected:
  explicit ImageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // .htpp.interface.v1.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::htpp::interface::v1::Image& image() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::Image* release_image();
  ::htpp::interface::v1::Image* mutable_image();
  void set_allocated_image(::htpp::interface::v1::Image* image);
  private:
  const ::htpp::interface::v1::Image& _internal_image() const;
  ::htpp::interface::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::htpp::interface::v1::Image* image);
  ::htpp::interface::v1::Image* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ImageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ImagesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ImagesReply) */ {
 public:
  inline ImagesReply() : ImagesReply(nullptr) {}
  ~ImagesReply() override;
  explicit constexpr ImagesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImagesReply(const ImagesReply& from);
  ImagesReply(ImagesReply&& from) noexcept
    : ImagesReply() {
    *this = ::std::move(from);
  }

  inline ImagesReply& operator=(const ImagesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImagesReply& operator=(ImagesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImagesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImagesReply* internal_default_instance() {
    return reinterpret_cast<const ImagesReply*>(
               &_ImagesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ImagesReply& a, ImagesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ImagesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImagesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImagesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImagesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImagesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImagesReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImagesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ImagesReply";
  }
  protected:
  explicit ImagesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated .htpp.interface.v1.Image images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::htpp::interface::v1::Image* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::Image >*
      mutable_images();
  private:
  const ::htpp::interface::v1::Image& _internal_images(int index) const;
  ::htpp::interface::v1::Image* _internal_add_images();
  public:
  const ::htpp::interface::v1::Image& images(int index) const;
  ::htpp::interface::v1::Image* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::Image >&
      images() const;

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ImagesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::Image > images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ImageWithAreaReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ImageWithAreaReply) */ {
 public:
  inline ImageWithAreaReply() : ImageWithAreaReply(nullptr) {}
  ~ImageWithAreaReply() override;
  explicit constexpr ImageWithAreaReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageWithAreaReply(const ImageWithAreaReply& from);
  ImageWithAreaReply(ImageWithAreaReply&& from) noexcept
    : ImageWithAreaReply() {
    *this = ::std::move(from);
  }

  inline ImageWithAreaReply& operator=(const ImageWithAreaReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageWithAreaReply& operator=(ImageWithAreaReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageWithAreaReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageWithAreaReply* internal_default_instance() {
    return reinterpret_cast<const ImageWithAreaReply*>(
               &_ImageWithAreaReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ImageWithAreaReply& a, ImageWithAreaReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageWithAreaReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageWithAreaReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageWithAreaReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageWithAreaReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageWithAreaReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageWithAreaReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageWithAreaReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ImageWithAreaReply";
  }
  protected:
  explicit ImageWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kPixelsFieldNumber = 2,
    kAreaFieldNumber = 3,
  };
  // .htpp.interface.v1.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::htpp::interface::v1::Image& image() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::Image* release_image();
  ::htpp::interface::v1::Image* mutable_image();
  void set_allocated_image(::htpp::interface::v1::Image* image);
  private:
  const ::htpp::interface::v1::Image& _internal_image() const;
  ::htpp::interface::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::htpp::interface::v1::Image* image);
  ::htpp::interface::v1::Image* unsafe_arena_release_image();

  // int64 pixels = 2;
  void clear_pixels();
  int64_t pixels() const;
  void set_pixels(int64_t value);
  private:
  int64_t _internal_pixels() const;
  void _internal_set_pixels(int64_t value);
  public:

  // double area = 3;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ImageWithAreaReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::Image* image_;
  int64_t pixels_;
  double area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ImagesWithAreaReply_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ImagesWithAreaReply.Data) */ {
 public:
  inline ImagesWithAreaReply_Data() : ImagesWithAreaReply_Data(nullptr) {}
  ~ImagesWithAreaReply_Data() override;
  explicit constexpr ImagesWithAreaReply_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImagesWithAreaReply_Data(const ImagesWithAreaReply_Data& from);
  ImagesWithAreaReply_Data(ImagesWithAreaReply_Data&& from) noexcept
    : ImagesWithAreaReply_Data() {
    *this = ::std::move(from);
  }

  inline ImagesWithAreaReply_Data& operator=(const ImagesWithAreaReply_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImagesWithAreaReply_Data& operator=(ImagesWithAreaReply_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImagesWithAreaReply_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImagesWithAreaReply_Data* internal_default_instance() {
    return reinterpret_cast<const ImagesWithAreaReply_Data*>(
               &_ImagesWithAreaReply_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ImagesWithAreaReply_Data& a, ImagesWithAreaReply_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(ImagesWithAreaReply_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImagesWithAreaReply_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImagesWithAreaReply_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImagesWithAreaReply_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImagesWithAreaReply_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImagesWithAreaReply_Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImagesWithAreaReply_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ImagesWithAreaReply.Data";
  }
  protected:
  explicit ImagesWithAreaReply_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kPixelsFieldNumber = 2,
    kAreaFieldNumber = 3,
  };
  // .htpp.interface.v1.Image image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::htpp::interface::v1::Image& image() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::Image* release_image();
  ::htpp::interface::v1::Image* mutable_image();
  void set_allocated_image(::htpp::interface::v1::Image* image);
  private:
  const ::htpp::interface::v1::Image& _internal_image() const;
  ::htpp::interface::v1::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::htpp::interface::v1::Image* image);
  ::htpp::interface::v1::Image* unsafe_arena_release_image();

  // int64 pixels = 2;
  void clear_pixels();
  int64_t pixels() const;
  void set_pixels(int64_t value);
  private:
  int64_t _internal_pixels() const;
  void _internal_set_pixels(int64_t value);
  public:

  // double area = 3;
  void clear_area();
  double area() const;
  void set_area(double value);
  private:
  double _internal_area() const;
  void _internal_set_area(double value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ImagesWithAreaReply.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::Image* image_;
  int64_t pixels_;
  double area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ImagesWithAreaReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ImagesWithAreaReply) */ {
 public:
  inline ImagesWithAreaReply() : ImagesWithAreaReply(nullptr) {}
  ~ImagesWithAreaReply() override;
  explicit constexpr ImagesWithAreaReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImagesWithAreaReply(const ImagesWithAreaReply& from);
  ImagesWithAreaReply(ImagesWithAreaReply&& from) noexcept
    : ImagesWithAreaReply() {
    *this = ::std::move(from);
  }

  inline ImagesWithAreaReply& operator=(const ImagesWithAreaReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImagesWithAreaReply& operator=(ImagesWithAreaReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImagesWithAreaReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImagesWithAreaReply* internal_default_instance() {
    return reinterpret_cast<const ImagesWithAreaReply*>(
               &_ImagesWithAreaReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ImagesWithAreaReply& a, ImagesWithAreaReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ImagesWithAreaReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImagesWithAreaReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImagesWithAreaReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImagesWithAreaReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImagesWithAreaReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImagesWithAreaReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImagesWithAreaReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ImagesWithAreaReply";
  }
  protected:
  explicit ImagesWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImagesWithAreaReply_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .htpp.interface.v1.ImagesWithAreaReply.Data data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::htpp::interface::v1::ImagesWithAreaReply_Data* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::ImagesWithAreaReply_Data >*
      mutable_data();
  private:
  const ::htpp::interface::v1::ImagesWithAreaReply_Data& _internal_data(int index) const;
  ::htpp::interface::v1::ImagesWithAreaReply_Data* _internal_add_data();
  public:
  const ::htpp::interface::v1::ImagesWithAreaReply_Data& data(int index) const;
  ::htpp::interface::v1::ImagesWithAreaReply_Data* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::ImagesWithAreaReply_Data >&
      data() const;

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ImagesWithAreaReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::ImagesWithAreaReply_Data > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentUserMachinesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.GetCurrentUserMachinesRequest) */ {
 public:
  inline GetCurrentUserMachinesRequest() : GetCurrentUserMachinesRequest(nullptr) {}
  ~GetCurrentUserMachinesRequest() override;
  explicit constexpr GetCurrentUserMachinesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentUserMachinesRequest(const GetCurrentUserMachinesRequest& from);
  GetCurrentUserMachinesRequest(GetCurrentUserMachinesRequest&& from) noexcept
    : GetCurrentUserMachinesRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentUserMachinesRequest& operator=(const GetCurrentUserMachinesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentUserMachinesRequest& operator=(GetCurrentUserMachinesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentUserMachinesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentUserMachinesRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentUserMachinesRequest*>(
               &_GetCurrentUserMachinesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetCurrentUserMachinesRequest& a, GetCurrentUserMachinesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentUserMachinesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentUserMachinesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentUserMachinesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentUserMachinesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentUserMachinesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentUserMachinesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentUserMachinesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.GetCurrentUserMachinesRequest";
  }
  protected:
  explicit GetCurrentUserMachinesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 user_id = 1;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.GetCurrentUserMachinesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class RegisterMachineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.RegisterMachineRequest) */ {
 public:
  inline RegisterMachineRequest() : RegisterMachineRequest(nullptr) {}
  ~RegisterMachineRequest() override;
  explicit constexpr RegisterMachineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterMachineRequest(const RegisterMachineRequest& from);
  RegisterMachineRequest(RegisterMachineRequest&& from) noexcept
    : RegisterMachineRequest() {
    *this = ::std::move(from);
  }

  inline RegisterMachineRequest& operator=(const RegisterMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMachineRequest& operator=(RegisterMachineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterMachineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterMachineRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterMachineRequest*>(
               &_RegisterMachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RegisterMachineRequest& a, RegisterMachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMachineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMachineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterMachineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterMachineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterMachineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterMachineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMachineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.RegisterMachineRequest";
  }
  protected:
  explicit RegisterMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .htpp.interface.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::htpp::interface::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::MachineStruct* release_machine();
  ::htpp::interface::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::htpp::interface::v1::MachineStruct* machine);
  private:
  const ::htpp::interface::v1::MachineStruct& _internal_machine() const;
  ::htpp::interface::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::htpp::interface::v1::MachineStruct* machine);
  ::htpp::interface::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.RegisterMachineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class UpdateMachineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.UpdateMachineRequest) */ {
 public:
  inline UpdateMachineRequest() : UpdateMachineRequest(nullptr) {}
  ~UpdateMachineRequest() override;
  explicit constexpr UpdateMachineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMachineRequest(const UpdateMachineRequest& from);
  UpdateMachineRequest(UpdateMachineRequest&& from) noexcept
    : UpdateMachineRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMachineRequest& operator=(const UpdateMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMachineRequest& operator=(UpdateMachineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMachineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMachineRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMachineRequest*>(
               &_UpdateMachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateMachineRequest& a, UpdateMachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMachineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMachineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMachineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMachineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateMachineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateMachineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMachineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.UpdateMachineRequest";
  }
  protected:
  explicit UpdateMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .htpp.interface.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::htpp::interface::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::MachineStruct* release_machine();
  ::htpp::interface::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::htpp::interface::v1::MachineStruct* machine);
  private:
  const ::htpp::interface::v1::MachineStruct& _internal_machine() const;
  ::htpp::interface::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::htpp::interface::v1::MachineStruct* machine);
  ::htpp::interface::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.UpdateMachineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetMachineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.GetMachineRequest) */ {
 public:
  inline GetMachineRequest() : GetMachineRequest(nullptr) {}
  ~GetMachineRequest() override;
  explicit constexpr GetMachineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMachineRequest(const GetMachineRequest& from);
  GetMachineRequest(GetMachineRequest&& from) noexcept
    : GetMachineRequest() {
    *this = ::std::move(from);
  }

  inline GetMachineRequest& operator=(const GetMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMachineRequest& operator=(GetMachineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMachineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMachineRequest* internal_default_instance() {
    return reinterpret_cast<const GetMachineRequest*>(
               &_GetMachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetMachineRequest& a, GetMachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMachineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMachineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMachineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMachineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMachineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMachineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMachineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.GetMachineRequest";
  }
  protected:
  explicit GetMachineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.GetMachineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MachineReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MachineReply) */ {
 public:
  inline MachineReply() : MachineReply(nullptr) {}
  ~MachineReply() override;
  explicit constexpr MachineReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineReply(const MachineReply& from);
  MachineReply(MachineReply&& from) noexcept
    : MachineReply() {
    *this = ::std::move(from);
  }

  inline MachineReply& operator=(const MachineReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineReply& operator=(MachineReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineReply* internal_default_instance() {
    return reinterpret_cast<const MachineReply*>(
               &_MachineReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MachineReply& a, MachineReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MachineReply";
  }
  protected:
  explicit MachineReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineFieldNumber = 1,
  };
  // .htpp.interface.v1.MachineStruct machine = 1;
  bool has_machine() const;
  private:
  bool _internal_has_machine() const;
  public:
  void clear_machine();
  const ::htpp::interface::v1::MachineStruct& machine() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::MachineStruct* release_machine();
  ::htpp::interface::v1::MachineStruct* mutable_machine();
  void set_allocated_machine(::htpp::interface::v1::MachineStruct* machine);
  private:
  const ::htpp::interface::v1::MachineStruct& _internal_machine() const;
  ::htpp::interface::v1::MachineStruct* _internal_mutable_machine();
  public:
  void unsafe_arena_set_allocated_machine(
      ::htpp::interface::v1::MachineStruct* machine);
  ::htpp::interface::v1::MachineStruct* unsafe_arena_release_machine();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MachineReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::MachineStruct* machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MachinesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MachinesReply) */ {
 public:
  inline MachinesReply() : MachinesReply(nullptr) {}
  ~MachinesReply() override;
  explicit constexpr MachinesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachinesReply(const MachinesReply& from);
  MachinesReply(MachinesReply&& from) noexcept
    : MachinesReply() {
    *this = ::std::move(from);
  }

  inline MachinesReply& operator=(const MachinesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachinesReply& operator=(MachinesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachinesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachinesReply* internal_default_instance() {
    return reinterpret_cast<const MachinesReply*>(
               &_MachinesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MachinesReply& a, MachinesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MachinesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachinesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachinesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachinesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachinesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachinesReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachinesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MachinesReply";
  }
  protected:
  explicit MachinesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachinesFieldNumber = 1,
  };
  // repeated .htpp.interface.v1.MachineStruct machines = 1;
  int machines_size() const;
  private:
  int _internal_machines_size() const;
  public:
  void clear_machines();
  ::htpp::interface::v1::MachineStruct* mutable_machines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MachineStruct >*
      mutable_machines();
  private:
  const ::htpp::interface::v1::MachineStruct& _internal_machines(int index) const;
  ::htpp::interface::v1::MachineStruct* _internal_add_machines();
  public:
  const ::htpp::interface::v1::MachineStruct& machines(int index) const;
  ::htpp::interface::v1::MachineStruct* add_machines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MachineStruct >&
      machines() const;

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MachinesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MachineStruct > machines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MachineStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MachineStruct) */ {
 public:
  inline MachineStruct() : MachineStruct(nullptr) {}
  ~MachineStruct() override;
  explicit constexpr MachineStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineStruct(const MachineStruct& from);
  MachineStruct(MachineStruct&& from) noexcept
    : MachineStruct() {
    *this = ::std::move(from);
  }

  inline MachineStruct& operator=(const MachineStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineStruct& operator=(MachineStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineStruct* internal_default_instance() {
    return reinterpret_cast<const MachineStruct*>(
               &_MachineStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MachineStruct& a, MachineStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MachineStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MachineStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MachineStruct";
  }
  protected:
  explicit MachineStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kMachineIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  int64_t user_id() const;
  void set_user_id(int64_t value);
  private:
  int64_t _internal_user_id() const;
  void _internal_set_user_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MachineStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  int64_t machine_id_;
  int64_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit constexpr MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckNameFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kDelayFieldNumber = 7,
    kMachineIdFieldNumber = 8,
    kCheckFieldNumber = 6,
  };
  // string check_name = 9;
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double rx = 4;
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5;
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double delay = 7;
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // int64 machine_id = 8;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // bool check = 6;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
  double x_;
  double y_;
  double z_;
  double rx_;
  double ry_;
  double delay_;
  int64_t machine_id_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MoveReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MoveReply) */ {
 public:
  inline MoveReply() : MoveReply(nullptr) {}
  ~MoveReply() override;
  explicit constexpr MoveReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveReply(const MoveReply& from);
  MoveReply(MoveReply&& from) noexcept
    : MoveReply() {
    *this = ::std::move(from);
  }

  inline MoveReply& operator=(const MoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveReply& operator=(MoveReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveReply* internal_default_instance() {
    return reinterpret_cast<const MoveReply*>(
               &_MoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MoveReply& a, MoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MoveReply";
  }
  protected:
  explicit MoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ZeroRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ZeroRequest) */ {
 public:
  inline ZeroRequest() : ZeroRequest(nullptr) {}
  ~ZeroRequest() override;
  explicit constexpr ZeroRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroRequest(const ZeroRequest& from);
  ZeroRequest(ZeroRequest&& from) noexcept
    : ZeroRequest() {
    *this = ::std::move(from);
  }

  inline ZeroRequest& operator=(const ZeroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroRequest& operator=(ZeroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroRequest* internal_default_instance() {
    return reinterpret_cast<const ZeroRequest*>(
               &_ZeroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ZeroRequest& a, ZeroRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZeroRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ZeroRequest";
  }
  protected:
  explicit ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ZeroRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ZeroReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ZeroReply) */ {
 public:
  inline ZeroReply() : ZeroReply(nullptr) {}
  ~ZeroReply() override;
  explicit constexpr ZeroReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroReply(const ZeroReply& from);
  ZeroReply(ZeroReply&& from) noexcept
    : ZeroReply() {
    *this = ::std::move(from);
  }

  inline ZeroReply& operator=(const ZeroReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroReply& operator=(ZeroReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroReply* internal_default_instance() {
    return reinterpret_cast<const ZeroReply*>(
               &_ZeroReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ZeroReply& a, ZeroReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZeroReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ZeroReply";
  }
  protected:
  explicit ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ZeroReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetMotorStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.GetMotorStatusRequest) */ {
 public:
  inline GetMotorStatusRequest() : GetMotorStatusRequest(nullptr) {}
  ~GetMotorStatusRequest() override;
  explicit constexpr GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMotorStatusRequest(const GetMotorStatusRequest& from);
  GetMotorStatusRequest(GetMotorStatusRequest&& from) noexcept
    : GetMotorStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetMotorStatusRequest& operator=(const GetMotorStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotorStatusRequest& operator=(GetMotorStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMotorStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMotorStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetMotorStatusRequest*>(
               &_GetMotorStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetMotorStatusRequest& a, GetMotorStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMotorStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMotorStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMotorStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMotorStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMotorStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMotorStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotorStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.GetMotorStatusRequest";
  }
  protected:
  explicit GetMotorStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machine_id = 1;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.GetMotorStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machine_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetMotorStatusReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.GetMotorStatusReply) */ {
 public:
  inline GetMotorStatusReply() : GetMotorStatusReply(nullptr) {}
  ~GetMotorStatusReply() override;
  explicit constexpr GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMotorStatusReply(const GetMotorStatusReply& from);
  GetMotorStatusReply(GetMotorStatusReply&& from) noexcept
    : GetMotorStatusReply() {
    *this = ::std::move(from);
  }

  inline GetMotorStatusReply& operator=(const GetMotorStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotorStatusReply& operator=(GetMotorStatusReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMotorStatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMotorStatusReply* internal_default_instance() {
    return reinterpret_cast<const GetMotorStatusReply*>(
               &_GetMotorStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetMotorStatusReply& a, GetMotorStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMotorStatusReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMotorStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMotorStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMotorStatusReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMotorStatusReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMotorStatusReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotorStatusReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.GetMotorStatusReply";
  }
  protected:
  explicit GetMotorStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorInfoFieldNumber = 1,
  };
  // repeated .htpp.interface.v1.MotorInfo motor_info = 1;
  int motor_info_size() const;
  private:
  int _internal_motor_info_size() const;
  public:
  void clear_motor_info();
  ::htpp::interface::v1::MotorInfo* mutable_motor_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MotorInfo >*
      mutable_motor_info();
  private:
  const ::htpp::interface::v1::MotorInfo& _internal_motor_info(int index) const;
  ::htpp::interface::v1::MotorInfo* _internal_add_motor_info();
  public:
  const ::htpp::interface::v1::MotorInfo& motor_info(int index) const;
  ::htpp::interface::v1::MotorInfo* add_motor_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MotorInfo >&
      motor_info() const;

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.GetMotorStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MotorInfo > motor_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MotorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MotorInfo) */ {
 public:
  inline MotorInfo() : MotorInfo(nullptr) {}
  ~MotorInfo() override;
  explicit constexpr MotorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorInfo(const MotorInfo& from);
  MotorInfo(MotorInfo&& from) noexcept
    : MotorInfo() {
    *this = ::std::move(from);
  }

  inline MotorInfo& operator=(const MotorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorInfo& operator=(MotorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorInfo* internal_default_instance() {
    return reinterpret_cast<const MotorInfo*>(
               &_MotorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MotorInfo& a, MotorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MotorInfo";
  }
  protected:
  explicit MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorStatusFieldNumber = 1,
    kInstrPosFieldNumber = 2,
    kCurrentPosFieldNumber = 3,
  };
  // .htpp.interface.v1.MotorStatus motor_status = 1;
  bool has_motor_status() const;
  private:
  bool _internal_has_motor_status() const;
  public:
  void clear_motor_status();
  const ::htpp::interface::v1::MotorStatus& motor_status() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::MotorStatus* release_motor_status();
  ::htpp::interface::v1::MotorStatus* mutable_motor_status();
  void set_allocated_motor_status(::htpp::interface::v1::MotorStatus* motor_status);
  private:
  const ::htpp::interface::v1::MotorStatus& _internal_motor_status() const;
  ::htpp::interface::v1::MotorStatus* _internal_mutable_motor_status();
  public:
  void unsafe_arena_set_allocated_motor_status(
      ::htpp::interface::v1::MotorStatus* motor_status);
  ::htpp::interface::v1::MotorStatus* unsafe_arena_release_motor_status();

  // int64 instr_pos = 2;
  void clear_instr_pos();
  int64_t instr_pos() const;
  void set_instr_pos(int64_t value);
  private:
  int64_t _internal_instr_pos() const;
  void _internal_set_instr_pos(int64_t value);
  public:

  // int64 current_pos = 3;
  void clear_current_pos();
  int64_t current_pos() const;
  void set_current_pos(int64_t value);
  private:
  int64_t _internal_current_pos() const;
  void _internal_set_current_pos(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MotorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::MotorStatus* motor_status_;
  int64_t instr_pos_;
  int64_t current_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MotorStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.MotorStatus) */ {
 public:
  inline MotorStatus() : MotorStatus(nullptr) {}
  ~MotorStatus() override;
  explicit constexpr MotorStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorStatus(const MotorStatus& from);
  MotorStatus(MotorStatus&& from) noexcept
    : MotorStatus() {
    *this = ::std::move(from);
  }

  inline MotorStatus& operator=(const MotorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorStatus& operator=(MotorStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorStatus* internal_default_instance() {
    return reinterpret_cast<const MotorStatus*>(
               &_MotorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MotorStatus& a, MotorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MotorStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.MotorStatus";
  }
  protected:
  explicit MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultFieldNumber = 1,
    kEnablingFieldNumber = 2,
    kRunningFieldNumber = 3,
    kInstructionCompletionFieldNumber = 4,
    kPathCompletionFieldNumber = 5,
    kZeroCompletionFieldNumber = 6,
  };
  // bool fault = 1;
  void clear_fault();
  bool fault() const;
  void set_fault(bool value);
  private:
  bool _internal_fault() const;
  void _internal_set_fault(bool value);
  public:

  // bool enabling = 2;
  void clear_enabling();
  bool enabling() const;
  void set_enabling(bool value);
  private:
  bool _internal_enabling() const;
  void _internal_set_enabling(bool value);
  public:

  // bool running = 3;
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // bool instruction_completion = 4;
  void clear_instruction_completion();
  bool instruction_completion() const;
  void set_instruction_completion(bool value);
  private:
  bool _internal_instruction_completion() const;
  void _internal_set_instruction_completion(bool value);
  public:

  // bool path_completion = 5;
  void clear_path_completion();
  bool path_completion() const;
  void set_path_completion(bool value);
  private:
  bool _internal_path_completion() const;
  void _internal_set_path_completion(bool value);
  public:

  // bool zero_completion = 6;
  void clear_zero_completion();
  bool zero_completion() const;
  void set_zero_completion(bool value);
  private:
  bool _internal_zero_completion() const;
  void _internal_set_zero_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.MotorStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool fault_;
  bool enabling_;
  bool running_;
  bool instruction_completion_;
  bool path_completion_;
  bool zero_completion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateCronJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.CreateCronJobRequest) */ {
 public:
  inline CreateCronJobRequest() : CreateCronJobRequest(nullptr) {}
  ~CreateCronJobRequest() override;
  explicit constexpr CreateCronJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCronJobRequest(const CreateCronJobRequest& from);
  CreateCronJobRequest(CreateCronJobRequest&& from) noexcept
    : CreateCronJobRequest() {
    *this = ::std::move(from);
  }

  inline CreateCronJobRequest& operator=(const CreateCronJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCronJobRequest& operator=(CreateCronJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCronJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCronJobRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCronJobRequest*>(
               &_CreateCronJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CreateCronJobRequest& a, CreateCronJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCronJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCronJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCronJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCronJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCronJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateCronJobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCronJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.CreateCronJobRequest";
  }
  protected:
  explicit CreateCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCronJobFieldNumber = 1,
  };
  // .htpp.interface.v1.CronJob cron_job = 1;
  bool has_cron_job() const;
  private:
  bool _internal_has_cron_job() const;
  public:
  void clear_cron_job();
  const ::htpp::interface::v1::CronJob& cron_job() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::CronJob* release_cron_job();
  ::htpp::interface::v1::CronJob* mutable_cron_job();
  void set_allocated_cron_job(::htpp::interface::v1::CronJob* cron_job);
  private:
  const ::htpp::interface::v1::CronJob& _internal_cron_job() const;
  ::htpp::interface::v1::CronJob* _internal_mutable_cron_job();
  public:
  void unsafe_arena_set_allocated_cron_job(
      ::htpp::interface::v1::CronJob* cron_job);
  ::htpp::interface::v1::CronJob* unsafe_arena_release_cron_job();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.CreateCronJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::CronJob* cron_job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class DeleteCronJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.DeleteCronJobRequest) */ {
 public:
  inline DeleteCronJobRequest() : DeleteCronJobRequest(nullptr) {}
  ~DeleteCronJobRequest() override;
  explicit constexpr DeleteCronJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCronJobRequest(const DeleteCronJobRequest& from);
  DeleteCronJobRequest(DeleteCronJobRequest&& from) noexcept
    : DeleteCronJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCronJobRequest& operator=(const DeleteCronJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCronJobRequest& operator=(DeleteCronJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCronJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCronJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCronJobRequest*>(
               &_DeleteCronJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DeleteCronJobRequest& a, DeleteCronJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCronJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCronJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCronJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCronJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCronJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCronJobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCronJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.DeleteCronJobRequest";
  }
  protected:
  explicit DeleteCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.DeleteCronJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class DeleteCronJobReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.DeleteCronJobReply) */ {
 public:
  inline DeleteCronJobReply() : DeleteCronJobReply(nullptr) {}
  ~DeleteCronJobReply() override;
  explicit constexpr DeleteCronJobReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCronJobReply(const DeleteCronJobReply& from);
  DeleteCronJobReply(DeleteCronJobReply&& from) noexcept
    : DeleteCronJobReply() {
    *this = ::std::move(from);
  }

  inline DeleteCronJobReply& operator=(const DeleteCronJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCronJobReply& operator=(DeleteCronJobReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCronJobReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCronJobReply* internal_default_instance() {
    return reinterpret_cast<const DeleteCronJobReply*>(
               &_DeleteCronJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteCronJobReply& a, DeleteCronJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCronJobReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCronJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCronJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCronJobReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCronJobReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCronJobReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCronJobReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.DeleteCronJobReply";
  }
  protected:
  explicit DeleteCronJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int64 num = 1;
  void clear_num();
  int64_t num() const;
  void set_num(int64_t value);
  private:
  int64_t _internal_num() const;
  void _internal_set_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.DeleteCronJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ListCronJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.ListCronJobRequest) */ {
 public:
  inline ListCronJobRequest() : ListCronJobRequest(nullptr) {}
  ~ListCronJobRequest() override;
  explicit constexpr ListCronJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCronJobRequest(const ListCronJobRequest& from);
  ListCronJobRequest(ListCronJobRequest&& from) noexcept
    : ListCronJobRequest() {
    *this = ::std::move(from);
  }

  inline ListCronJobRequest& operator=(const ListCronJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCronJobRequest& operator=(ListCronJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCronJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCronJobRequest* internal_default_instance() {
    return reinterpret_cast<const ListCronJobRequest*>(
               &_ListCronJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListCronJobRequest& a, ListCronJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCronJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCronJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCronJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCronJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCronJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCronJobRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCronJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.ListCronJobRequest";
  }
  protected:
  explicit ListCronJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
  };
  // int64 machineId = 1;
  void clear_machineid();
  int64_t machineid() const;
  void set_machineid(int64_t value);
  private:
  int64_t _internal_machineid() const;
  void _internal_set_machineid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.ListCronJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t machineid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CronJobReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.CronJobReply) */ {
 public:
  inline CronJobReply() : CronJobReply(nullptr) {}
  ~CronJobReply() override;
  explicit constexpr CronJobReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CronJobReply(const CronJobReply& from);
  CronJobReply(CronJobReply&& from) noexcept
    : CronJobReply() {
    *this = ::std::move(from);
  }

  inline CronJobReply& operator=(const CronJobReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CronJobReply& operator=(CronJobReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CronJobReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CronJobReply* internal_default_instance() {
    return reinterpret_cast<const CronJobReply*>(
               &_CronJobReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CronJobReply& a, CronJobReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CronJobReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CronJobReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CronJobReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CronJobReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CronJobReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CronJobReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CronJobReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.CronJobReply";
  }
  protected:
  explicit CronJobReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCronJobFieldNumber = 1,
  };
  // .htpp.interface.v1.CronJob cron_job = 1;
  bool has_cron_job() const;
  private:
  bool _internal_has_cron_job() const;
  public:
  void clear_cron_job();
  const ::htpp::interface::v1::CronJob& cron_job() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::CronJob* release_cron_job();
  ::htpp::interface::v1::CronJob* mutable_cron_job();
  void set_allocated_cron_job(::htpp::interface::v1::CronJob* cron_job);
  private:
  const ::htpp::interface::v1::CronJob& _internal_cron_job() const;
  ::htpp::interface::v1::CronJob* _internal_mutable_cron_job();
  public:
  void unsafe_arena_set_allocated_cron_job(
      ::htpp::interface::v1::CronJob* cron_job);
  ::htpp::interface::v1::CronJob* unsafe_arena_release_cron_job();

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.CronJobReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::CronJob* cron_job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CronJobsReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.CronJobsReply) */ {
 public:
  inline CronJobsReply() : CronJobsReply(nullptr) {}
  ~CronJobsReply() override;
  explicit constexpr CronJobsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CronJobsReply(const CronJobsReply& from);
  CronJobsReply(CronJobsReply&& from) noexcept
    : CronJobsReply() {
    *this = ::std::move(from);
  }

  inline CronJobsReply& operator=(const CronJobsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CronJobsReply& operator=(CronJobsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CronJobsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CronJobsReply* internal_default_instance() {
    return reinterpret_cast<const CronJobsReply*>(
               &_CronJobsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CronJobsReply& a, CronJobsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CronJobsReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CronJobsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CronJobsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CronJobsReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CronJobsReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CronJobsReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CronJobsReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.CronJobsReply";
  }
  protected:
  explicit CronJobsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCronJobsFieldNumber = 1,
  };
  // repeated .htpp.interface.v1.CronJob cron_jobs = 1;
  int cron_jobs_size() const;
  private:
  int _internal_cron_jobs_size() const;
  public:
  void clear_cron_jobs();
  ::htpp::interface::v1::CronJob* mutable_cron_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CronJob >*
      mutable_cron_jobs();
  private:
  const ::htpp::interface::v1::CronJob& _internal_cron_jobs(int index) const;
  ::htpp::interface::v1::CronJob* _internal_add_cron_jobs();
  public:
  const ::htpp::interface::v1::CronJob& cron_jobs(int index) const;
  ::htpp::interface::v1::CronJob* add_cron_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CronJob >&
      cron_jobs() const;

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.CronJobsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CronJob > cron_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CronJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.CronJob) */ {
 public:
  inline CronJob() : CronJob(nullptr) {}
  ~CronJob() override;
  explicit constexpr CronJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CronJob(const CronJob& from);
  CronJob(CronJob&& from) noexcept
    : CronJob() {
    *this = ::std::move(from);
  }

  inline CronJob& operator=(const CronJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline CronJob& operator=(CronJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CronJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const CronJob* internal_default_instance() {
    return reinterpret_cast<const CronJob*>(
               &_CronJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CronJob& a, CronJob& b) {
    a.Swap(&b);
  }
  inline void Swap(CronJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CronJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CronJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CronJob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CronJob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CronJob& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CronJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.CronJob";
  }
  protected:
  explicit CronJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckCoordinatesFieldNumber = 5,
    kCheckNameFieldNumber = 3,
    kCronStringFieldNumber = 4,
    kIdFieldNumber = 1,
    kMachineIdFieldNumber = 2,
  };
  // repeated .htpp.interface.v1.CheckCoordinate check_coordinates = 5;
  int check_coordinates_size() const;
  private:
  int _internal_check_coordinates_size() const;
  public:
  void clear_check_coordinates();
  ::htpp::interface::v1::CheckCoordinate* mutable_check_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CheckCoordinate >*
      mutable_check_coordinates();
  private:
  const ::htpp::interface::v1::CheckCoordinate& _internal_check_coordinates(int index) const;
  ::htpp::interface::v1::CheckCoordinate* _internal_add_check_coordinates();
  public:
  const ::htpp::interface::v1::CheckCoordinate& check_coordinates(int index) const;
  ::htpp::interface::v1::CheckCoordinate* add_check_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CheckCoordinate >&
      check_coordinates() const;

  // string check_name = 3;
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // string cron_string = 4;
  void clear_cron_string();
  const std::string& cron_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cron_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cron_string();
  PROTOBUF_NODISCARD std::string* release_cron_string();
  void set_allocated_cron_string(std::string* cron_string);
  private:
  const std::string& _internal_cron_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cron_string(const std::string& value);
  std::string* _internal_mutable_cron_string();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 machineId = 2;
  void clear_machineid();
  int64_t machineid() const;
  void set_machineid(int64_t value);
  private:
  int64_t _internal_machineid() const;
  void _internal_set_machineid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.CronJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CheckCoordinate > check_coordinates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cron_string_;
  int64_t id_;
  int64_t machineid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CheckCoordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.CheckCoordinate) */ {
 public:
  inline CheckCoordinate() : CheckCoordinate(nullptr) {}
  ~CheckCoordinate() override;
  explicit constexpr CheckCoordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckCoordinate(const CheckCoordinate& from);
  CheckCoordinate(CheckCoordinate&& from) noexcept
    : CheckCoordinate() {
    *this = ::std::move(from);
  }

  inline CheckCoordinate& operator=(const CheckCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckCoordinate& operator=(CheckCoordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckCoordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckCoordinate* internal_default_instance() {
    return reinterpret_cast<const CheckCoordinate*>(
               &_CheckCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CheckCoordinate& a, CheckCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckCoordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckCoordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckCoordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckCoordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CheckCoordinate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckCoordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.CheckCoordinate";
  }
  protected:
  explicit CheckCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrdFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // .htpp.interface.v1.Coordinate crd = 2;
  bool has_crd() const;
  private:
  bool _internal_has_crd() const;
  public:
  void clear_crd();
  const ::htpp::interface::v1::Coordinate& crd() const;
  PROTOBUF_NODISCARD ::htpp::interface::v1::Coordinate* release_crd();
  ::htpp::interface::v1::Coordinate* mutable_crd();
  void set_allocated_crd(::htpp::interface::v1::Coordinate* crd);
  private:
  const ::htpp::interface::v1::Coordinate& _internal_crd() const;
  ::htpp::interface::v1::Coordinate* _internal_mutable_crd();
  public:
  void unsafe_arena_set_allocated_crd(
      ::htpp::interface::v1::Coordinate* crd);
  ::htpp::interface::v1::Coordinate* unsafe_arena_release_crd();

  // int64 seq = 1;
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.CheckCoordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::htpp::interface::v1::Coordinate* crd_;
  int64_t seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Coordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.interface.v1.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  ~Coordinate() override;
  explicit constexpr Coordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coordinate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.interface.v1.Coordinate";
  }
  protected:
  explicit Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckNameFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kDelayFieldNumber = 7,
    kMachineIdFieldNumber = 8,
    kCheckFieldNumber = 6,
  };
  // string check_name = 9;
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double rx = 4;
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5;
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double delay = 7;
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // int64 machine_id = 8;
  void clear_machine_id();
  int64_t machine_id() const;
  void set_machine_id(int64_t value);
  private:
  int64_t _internal_machine_id() const;
  void _internal_set_machine_id(int64_t value);
  public:

  // bool check = 6;
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.interface.v1.Coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
  double x_;
  double y_;
  double z_;
  double rx_;
  double ry_;
  double delay_;
  int64_t machine_id_;
  bool check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest_User

// string email = 1;
inline void LoginRequest_User::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& LoginRequest_User::email() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.LoginRequest.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest_User::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.LoginRequest.User.email)
}
inline std::string* LoginRequest_User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.LoginRequest.User.email)
  return _s;
}
inline const std::string& LoginRequest_User::_internal_email() const {
  return email_.Get();
}
inline void LoginRequest_User::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest_User::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest_User::release_email() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.LoginRequest.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest_User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.LoginRequest.User.email)
}

// string password = 2;
inline void LoginRequest_User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginRequest_User::password() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.LoginRequest.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest_User::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.LoginRequest.User.password)
}
inline std::string* LoginRequest_User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.LoginRequest.User.password)
  return _s;
}
inline const std::string& LoginRequest_User::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest_User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest_User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest_User::release_password() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.LoginRequest.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest_User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.LoginRequest.User.password)
}

// -------------------------------------------------------------------

// LoginRequest

// .htpp.interface.v1.LoginRequest.User user = 1;
inline bool LoginRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool LoginRequest::has_user() const {
  return _internal_has_user();
}
inline void LoginRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::htpp::interface::v1::LoginRequest_User& LoginRequest::_internal_user() const {
  const ::htpp::interface::v1::LoginRequest_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::LoginRequest_User&>(
      ::htpp::interface::v1::_LoginRequest_User_default_instance_);
}
inline const ::htpp::interface::v1::LoginRequest_User& LoginRequest::user() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.LoginRequest.user)
  return _internal_user();
}
inline void LoginRequest::unsafe_arena_set_allocated_user(
    ::htpp::interface::v1::LoginRequest_User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.LoginRequest.user)
}
inline ::htpp::interface::v1::LoginRequest_User* LoginRequest::release_user() {
  
  ::htpp::interface::v1::LoginRequest_User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::LoginRequest_User* LoginRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.LoginRequest.user)
  
  ::htpp::interface::v1::LoginRequest_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::LoginRequest_User* LoginRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::LoginRequest_User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::htpp::interface::v1::LoginRequest_User* LoginRequest::mutable_user() {
  ::htpp::interface::v1::LoginRequest_User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.LoginRequest.user)
  return _msg;
}
inline void LoginRequest::set_allocated_user(::htpp::interface::v1::LoginRequest_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::LoginRequest_User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.LoginRequest.user)
}

// -------------------------------------------------------------------

// RegisterRequest_User

// string username = 1;
inline void RegisterRequest_User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RegisterRequest_User::username() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.RegisterRequest.User.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest_User::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.RegisterRequest.User.username)
}
inline std::string* RegisterRequest_User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.RegisterRequest.User.username)
  return _s;
}
inline const std::string& RegisterRequest_User::_internal_username() const {
  return username_.Get();
}
inline void RegisterRequest_User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::release_username() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.RegisterRequest.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest_User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.RegisterRequest.User.username)
}

// string email = 2;
inline void RegisterRequest_User::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RegisterRequest_User::email() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.RegisterRequest.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest_User::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.RegisterRequest.User.email)
}
inline std::string* RegisterRequest_User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.RegisterRequest.User.email)
  return _s;
}
inline const std::string& RegisterRequest_User::_internal_email() const {
  return email_.Get();
}
inline void RegisterRequest_User::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::release_email() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.RegisterRequest.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest_User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.RegisterRequest.User.email)
}

// string password = 3;
inline void RegisterRequest_User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RegisterRequest_User::password() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.RegisterRequest.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest_User::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.RegisterRequest.User.password)
}
inline std::string* RegisterRequest_User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.RegisterRequest.User.password)
  return _s;
}
inline const std::string& RegisterRequest_User::_internal_password() const {
  return password_.Get();
}
inline void RegisterRequest_User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest_User::release_password() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.RegisterRequest.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest_User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.RegisterRequest.User.password)
}

// -------------------------------------------------------------------

// RegisterRequest

// .htpp.interface.v1.RegisterRequest.User user = 1;
inline bool RegisterRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool RegisterRequest::has_user() const {
  return _internal_has_user();
}
inline void RegisterRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::htpp::interface::v1::RegisterRequest_User& RegisterRequest::_internal_user() const {
  const ::htpp::interface::v1::RegisterRequest_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::RegisterRequest_User&>(
      ::htpp::interface::v1::_RegisterRequest_User_default_instance_);
}
inline const ::htpp::interface::v1::RegisterRequest_User& RegisterRequest::user() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.RegisterRequest.user)
  return _internal_user();
}
inline void RegisterRequest::unsafe_arena_set_allocated_user(
    ::htpp::interface::v1::RegisterRequest_User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.RegisterRequest.user)
}
inline ::htpp::interface::v1::RegisterRequest_User* RegisterRequest::release_user() {
  
  ::htpp::interface::v1::RegisterRequest_User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::RegisterRequest_User* RegisterRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.RegisterRequest.user)
  
  ::htpp::interface::v1::RegisterRequest_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::RegisterRequest_User* RegisterRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::RegisterRequest_User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::htpp::interface::v1::RegisterRequest_User* RegisterRequest::mutable_user() {
  ::htpp::interface::v1::RegisterRequest_User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.RegisterRequest.user)
  return _msg;
}
inline void RegisterRequest::set_allocated_user(::htpp::interface::v1::RegisterRequest_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::RegisterRequest_User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.RegisterRequest.user)
}

// -------------------------------------------------------------------

// GetCurrentUserRequest

// int64 id = 1;
inline void GetCurrentUserRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t GetCurrentUserRequest::_internal_id() const {
  return id_;
}
inline int64_t GetCurrentUserRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.GetCurrentUserRequest.id)
  return _internal_id();
}
inline void GetCurrentUserRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void GetCurrentUserRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.GetCurrentUserRequest.id)
}

// -------------------------------------------------------------------

// UpdateUserRequest_User

// int64 id = 1;
inline void UpdateUserRequest_User::clear_id() {
  id_ = int64_t{0};
}
inline int64_t UpdateUserRequest_User::_internal_id() const {
  return id_;
}
inline int64_t UpdateUserRequest_User::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateUserRequest.User.id)
  return _internal_id();
}
inline void UpdateUserRequest_User::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void UpdateUserRequest_User::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UpdateUserRequest.User.id)
}

// string email = 2;
inline void UpdateUserRequest_User::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest_User::email() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateUserRequest.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest_User::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UpdateUserRequest.User.email)
}
inline std::string* UpdateUserRequest_User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UpdateUserRequest.User.email)
  return _s;
}
inline const std::string& UpdateUserRequest_User::_internal_email() const {
  return email_.Get();
}
inline void UpdateUserRequest_User::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::release_email() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UpdateUserRequest.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserRequest_User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UpdateUserRequest.User.email)
}

// string username = 4;
inline void UpdateUserRequest_User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest_User::username() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateUserRequest.User.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest_User::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UpdateUserRequest.User.username)
}
inline std::string* UpdateUserRequest_User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UpdateUserRequest.User.username)
  return _s;
}
inline const std::string& UpdateUserRequest_User::_internal_username() const {
  return username_.Get();
}
inline void UpdateUserRequest_User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::release_username() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UpdateUserRequest.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserRequest_User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UpdateUserRequest.User.username)
}

// string password = 5;
inline void UpdateUserRequest_User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest_User::password() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateUserRequest.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest_User::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UpdateUserRequest.User.password)
}
inline std::string* UpdateUserRequest_User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UpdateUserRequest.User.password)
  return _s;
}
inline const std::string& UpdateUserRequest_User::_internal_password() const {
  return password_.Get();
}
inline void UpdateUserRequest_User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest_User::release_password() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UpdateUserRequest.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateUserRequest_User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UpdateUserRequest.User.password)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .htpp.interface.v1.UpdateUserRequest.User user = 1;
inline bool UpdateUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UpdateUserRequest::has_user() const {
  return _internal_has_user();
}
inline void UpdateUserRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::htpp::interface::v1::UpdateUserRequest_User& UpdateUserRequest::_internal_user() const {
  const ::htpp::interface::v1::UpdateUserRequest_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::UpdateUserRequest_User&>(
      ::htpp::interface::v1::_UpdateUserRequest_User_default_instance_);
}
inline const ::htpp::interface::v1::UpdateUserRequest_User& UpdateUserRequest::user() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateUserRequest.user)
  return _internal_user();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_user(
    ::htpp::interface::v1::UpdateUserRequest_User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.UpdateUserRequest.user)
}
inline ::htpp::interface::v1::UpdateUserRequest_User* UpdateUserRequest::release_user() {
  
  ::htpp::interface::v1::UpdateUserRequest_User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::UpdateUserRequest_User* UpdateUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UpdateUserRequest.user)
  
  ::htpp::interface::v1::UpdateUserRequest_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::UpdateUserRequest_User* UpdateUserRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::UpdateUserRequest_User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::htpp::interface::v1::UpdateUserRequest_User* UpdateUserRequest::mutable_user() {
  ::htpp::interface::v1::UpdateUserRequest_User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UpdateUserRequest.user)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_user(::htpp::interface::v1::UpdateUserRequest_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::UpdateUserRequest_User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UpdateUserRequest.user)
}

// -------------------------------------------------------------------

// UserReply_User

// int64 id = 1;
inline void UserReply_User::clear_id() {
  id_ = int64_t{0};
}
inline int64_t UserReply_User::_internal_id() const {
  return id_;
}
inline int64_t UserReply_User::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UserReply.User.id)
  return _internal_id();
}
inline void UserReply_User::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void UserReply_User::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UserReply.User.id)
}

// string email = 2;
inline void UserReply_User::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserReply_User::email() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UserReply.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserReply_User::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UserReply.User.email)
}
inline std::string* UserReply_User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UserReply.User.email)
  return _s;
}
inline const std::string& UserReply_User::_internal_email() const {
  return email_.Get();
}
inline void UserReply_User::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserReply_User::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserReply_User::release_email() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UserReply.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserReply_User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UserReply.User.email)
}

// string token = 3;
inline void UserReply_User::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& UserReply_User::token() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UserReply.User.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserReply_User::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UserReply.User.token)
}
inline std::string* UserReply_User::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UserReply.User.token)
  return _s;
}
inline const std::string& UserReply_User::_internal_token() const {
  return token_.Get();
}
inline void UserReply_User::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserReply_User::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserReply_User::release_token() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UserReply.User.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserReply_User::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UserReply.User.token)
}

// string username = 4;
inline void UserReply_User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserReply_User::username() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UserReply.User.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserReply_User::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.UserReply.User.username)
}
inline std::string* UserReply_User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UserReply.User.username)
  return _s;
}
inline const std::string& UserReply_User::_internal_username() const {
  return username_.Get();
}
inline void UserReply_User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserReply_User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserReply_User::release_username() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UserReply.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserReply_User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UserReply.User.username)
}

// -------------------------------------------------------------------

// UserReply

// .htpp.interface.v1.UserReply.User user = 1;
inline bool UserReply::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserReply::has_user() const {
  return _internal_has_user();
}
inline void UserReply::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::htpp::interface::v1::UserReply_User& UserReply::_internal_user() const {
  const ::htpp::interface::v1::UserReply_User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::UserReply_User&>(
      ::htpp::interface::v1::_UserReply_User_default_instance_);
}
inline const ::htpp::interface::v1::UserReply_User& UserReply::user() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UserReply.user)
  return _internal_user();
}
inline void UserReply::unsafe_arena_set_allocated_user(
    ::htpp::interface::v1::UserReply_User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.UserReply.user)
}
inline ::htpp::interface::v1::UserReply_User* UserReply::release_user() {
  
  ::htpp::interface::v1::UserReply_User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::UserReply_User* UserReply::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UserReply.user)
  
  ::htpp::interface::v1::UserReply_User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::UserReply_User* UserReply::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::UserReply_User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::htpp::interface::v1::UserReply_User* UserReply::mutable_user() {
  ::htpp::interface::v1::UserReply_User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UserReply.user)
  return _msg;
}
inline void UserReply::set_allocated_user(::htpp::interface::v1::UserReply_User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::UserReply_User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UserReply.user)
}

// -------------------------------------------------------------------

// ReadOneRequest

// int64 id = 1;
inline void ReadOneRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t ReadOneRequest::_internal_id() const {
  return id_;
}
inline int64_t ReadOneRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ReadOneRequest.id)
  return _internal_id();
}
inline void ReadOneRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void ReadOneRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ReadOneRequest.id)
}

// -------------------------------------------------------------------

// ReadAllRequest

// -------------------------------------------------------------------

// ReadOneWithBinaryRequest

// int64 id = 1;
inline void ReadOneWithBinaryRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t ReadOneWithBinaryRequest::_internal_id() const {
  return id_;
}
inline int64_t ReadOneWithBinaryRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ReadOneWithBinaryRequest.id)
  return _internal_id();
}
inline void ReadOneWithBinaryRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void ReadOneWithBinaryRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ReadOneWithBinaryRequest.id)
}

// -------------------------------------------------------------------

// ReadAllWithBinaryRequest

// -------------------------------------------------------------------

// ReadOneWithBinaryAndCalAreaRequest

// int64 id = 1;
inline void ReadOneWithBinaryAndCalAreaRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t ReadOneWithBinaryAndCalAreaRequest::_internal_id() const {
  return id_;
}
inline int64_t ReadOneWithBinaryAndCalAreaRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest.id)
  return _internal_id();
}
inline void ReadOneWithBinaryAndCalAreaRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void ReadOneWithBinaryAndCalAreaRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ReadOneWithBinaryAndCalAreaRequest.id)
}

// -------------------------------------------------------------------

// ReadAllWithBinaryAndCalAreaRequest

// -------------------------------------------------------------------

// ImageReply

// .htpp.interface.v1.Image image = 1;
inline bool ImageReply::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageReply::has_image() const {
  return _internal_has_image();
}
inline void ImageReply::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::htpp::interface::v1::Image& ImageReply::_internal_image() const {
  const ::htpp::interface::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::Image&>(
      ::htpp::interface::v1::_Image_default_instance_);
}
inline const ::htpp::interface::v1::Image& ImageReply::image() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImageReply.image)
  return _internal_image();
}
inline void ImageReply::unsafe_arena_set_allocated_image(
    ::htpp::interface::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.ImageReply.image)
}
inline ::htpp::interface::v1::Image* ImageReply::release_image() {
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::Image* ImageReply::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.ImageReply.image)
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::Image* ImageReply::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::htpp::interface::v1::Image* ImageReply::mutable_image() {
  ::htpp::interface::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.ImageReply.image)
  return _msg;
}
inline void ImageReply::set_allocated_image(::htpp::interface::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.ImageReply.image)
}

// -------------------------------------------------------------------

// ImagesReply

// repeated .htpp.interface.v1.Image images = 1;
inline int ImagesReply::_internal_images_size() const {
  return images_.size();
}
inline int ImagesReply::images_size() const {
  return _internal_images_size();
}
inline void ImagesReply::clear_images() {
  images_.Clear();
}
inline ::htpp::interface::v1::Image* ImagesReply::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.ImagesReply.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::Image >*
ImagesReply::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.ImagesReply.images)
  return &images_;
}
inline const ::htpp::interface::v1::Image& ImagesReply::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::htpp::interface::v1::Image& ImagesReply::images(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImagesReply.images)
  return _internal_images(index);
}
inline ::htpp::interface::v1::Image* ImagesReply::_internal_add_images() {
  return images_.Add();
}
inline ::htpp::interface::v1::Image* ImagesReply::add_images() {
  ::htpp::interface::v1::Image* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.ImagesReply.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::Image >&
ImagesReply::images() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.ImagesReply.images)
  return images_;
}

// -------------------------------------------------------------------

// ImageWithAreaReply

// .htpp.interface.v1.Image image = 1;
inline bool ImageWithAreaReply::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImageWithAreaReply::has_image() const {
  return _internal_has_image();
}
inline void ImageWithAreaReply::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::htpp::interface::v1::Image& ImageWithAreaReply::_internal_image() const {
  const ::htpp::interface::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::Image&>(
      ::htpp::interface::v1::_Image_default_instance_);
}
inline const ::htpp::interface::v1::Image& ImageWithAreaReply::image() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImageWithAreaReply.image)
  return _internal_image();
}
inline void ImageWithAreaReply::unsafe_arena_set_allocated_image(
    ::htpp::interface::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.ImageWithAreaReply.image)
}
inline ::htpp::interface::v1::Image* ImageWithAreaReply::release_image() {
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::Image* ImageWithAreaReply::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.ImageWithAreaReply.image)
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::Image* ImageWithAreaReply::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::htpp::interface::v1::Image* ImageWithAreaReply::mutable_image() {
  ::htpp::interface::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.ImageWithAreaReply.image)
  return _msg;
}
inline void ImageWithAreaReply::set_allocated_image(::htpp::interface::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.ImageWithAreaReply.image)
}

// int64 pixels = 2;
inline void ImageWithAreaReply::clear_pixels() {
  pixels_ = int64_t{0};
}
inline int64_t ImageWithAreaReply::_internal_pixels() const {
  return pixels_;
}
inline int64_t ImageWithAreaReply::pixels() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImageWithAreaReply.pixels)
  return _internal_pixels();
}
inline void ImageWithAreaReply::_internal_set_pixels(int64_t value) {
  
  pixels_ = value;
}
inline void ImageWithAreaReply::set_pixels(int64_t value) {
  _internal_set_pixels(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ImageWithAreaReply.pixels)
}

// double area = 3;
inline void ImageWithAreaReply::clear_area() {
  area_ = 0;
}
inline double ImageWithAreaReply::_internal_area() const {
  return area_;
}
inline double ImageWithAreaReply::area() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImageWithAreaReply.area)
  return _internal_area();
}
inline void ImageWithAreaReply::_internal_set_area(double value) {
  
  area_ = value;
}
inline void ImageWithAreaReply::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ImageWithAreaReply.area)
}

// -------------------------------------------------------------------

// ImagesWithAreaReply_Data

// .htpp.interface.v1.Image image = 1;
inline bool ImagesWithAreaReply_Data::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool ImagesWithAreaReply_Data::has_image() const {
  return _internal_has_image();
}
inline void ImagesWithAreaReply_Data::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::htpp::interface::v1::Image& ImagesWithAreaReply_Data::_internal_image() const {
  const ::htpp::interface::v1::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::Image&>(
      ::htpp::interface::v1::_Image_default_instance_);
}
inline const ::htpp::interface::v1::Image& ImagesWithAreaReply_Data::image() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImagesWithAreaReply.Data.image)
  return _internal_image();
}
inline void ImagesWithAreaReply_Data::unsafe_arena_set_allocated_image(
    ::htpp::interface::v1::Image* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.ImagesWithAreaReply.Data.image)
}
inline ::htpp::interface::v1::Image* ImagesWithAreaReply_Data::release_image() {
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::Image* ImagesWithAreaReply_Data::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.ImagesWithAreaReply.Data.image)
  
  ::htpp::interface::v1::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::Image* ImagesWithAreaReply_Data::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::Image>(GetArenaForAllocation());
    image_ = p;
  }
  return image_;
}
inline ::htpp::interface::v1::Image* ImagesWithAreaReply_Data::mutable_image() {
  ::htpp::interface::v1::Image* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.ImagesWithAreaReply.Data.image)
  return _msg;
}
inline void ImagesWithAreaReply_Data::set_allocated_image(::htpp::interface::v1::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.ImagesWithAreaReply.Data.image)
}

// int64 pixels = 2;
inline void ImagesWithAreaReply_Data::clear_pixels() {
  pixels_ = int64_t{0};
}
inline int64_t ImagesWithAreaReply_Data::_internal_pixels() const {
  return pixels_;
}
inline int64_t ImagesWithAreaReply_Data::pixels() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImagesWithAreaReply.Data.pixels)
  return _internal_pixels();
}
inline void ImagesWithAreaReply_Data::_internal_set_pixels(int64_t value) {
  
  pixels_ = value;
}
inline void ImagesWithAreaReply_Data::set_pixels(int64_t value) {
  _internal_set_pixels(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ImagesWithAreaReply.Data.pixels)
}

// double area = 3;
inline void ImagesWithAreaReply_Data::clear_area() {
  area_ = 0;
}
inline double ImagesWithAreaReply_Data::_internal_area() const {
  return area_;
}
inline double ImagesWithAreaReply_Data::area() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImagesWithAreaReply.Data.area)
  return _internal_area();
}
inline void ImagesWithAreaReply_Data::_internal_set_area(double value) {
  
  area_ = value;
}
inline void ImagesWithAreaReply_Data::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ImagesWithAreaReply.Data.area)
}

// -------------------------------------------------------------------

// ImagesWithAreaReply

// repeated .htpp.interface.v1.ImagesWithAreaReply.Data data = 1;
inline int ImagesWithAreaReply::_internal_data_size() const {
  return data_.size();
}
inline int ImagesWithAreaReply::data_size() const {
  return _internal_data_size();
}
inline void ImagesWithAreaReply::clear_data() {
  data_.Clear();
}
inline ::htpp::interface::v1::ImagesWithAreaReply_Data* ImagesWithAreaReply::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.ImagesWithAreaReply.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::ImagesWithAreaReply_Data >*
ImagesWithAreaReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.ImagesWithAreaReply.data)
  return &data_;
}
inline const ::htpp::interface::v1::ImagesWithAreaReply_Data& ImagesWithAreaReply::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::htpp::interface::v1::ImagesWithAreaReply_Data& ImagesWithAreaReply::data(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ImagesWithAreaReply.data)
  return _internal_data(index);
}
inline ::htpp::interface::v1::ImagesWithAreaReply_Data* ImagesWithAreaReply::_internal_add_data() {
  return data_.Add();
}
inline ::htpp::interface::v1::ImagesWithAreaReply_Data* ImagesWithAreaReply::add_data() {
  ::htpp::interface::v1::ImagesWithAreaReply_Data* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.ImagesWithAreaReply.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::ImagesWithAreaReply_Data >&
ImagesWithAreaReply::data() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.ImagesWithAreaReply.data)
  return data_;
}

// -------------------------------------------------------------------

// Image

// bytes data = 1;
inline void Image::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Image.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Image.data)
}
inline std::string* Image::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.Image.data)
  return _s;
}
inline const std::string& Image::_internal_data() const {
  return data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.Image.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.Image.data)
}

// -------------------------------------------------------------------

// GetCurrentUserMachinesRequest

// int64 user_id = 1;
inline void GetCurrentUserMachinesRequest::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t GetCurrentUserMachinesRequest::_internal_user_id() const {
  return user_id_;
}
inline int64_t GetCurrentUserMachinesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.GetCurrentUserMachinesRequest.user_id)
  return _internal_user_id();
}
inline void GetCurrentUserMachinesRequest::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void GetCurrentUserMachinesRequest::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.GetCurrentUserMachinesRequest.user_id)
}

// -------------------------------------------------------------------

// RegisterMachineRequest

// .htpp.interface.v1.MachineStruct machine = 1;
inline bool RegisterMachineRequest::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool RegisterMachineRequest::has_machine() const {
  return _internal_has_machine();
}
inline void RegisterMachineRequest::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::htpp::interface::v1::MachineStruct& RegisterMachineRequest::_internal_machine() const {
  const ::htpp::interface::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::MachineStruct&>(
      ::htpp::interface::v1::_MachineStruct_default_instance_);
}
inline const ::htpp::interface::v1::MachineStruct& RegisterMachineRequest::machine() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.RegisterMachineRequest.machine)
  return _internal_machine();
}
inline void RegisterMachineRequest::unsafe_arena_set_allocated_machine(
    ::htpp::interface::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.RegisterMachineRequest.machine)
}
inline ::htpp::interface::v1::MachineStruct* RegisterMachineRequest::release_machine() {
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* RegisterMachineRequest::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.RegisterMachineRequest.machine)
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* RegisterMachineRequest::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::htpp::interface::v1::MachineStruct* RegisterMachineRequest::mutable_machine() {
  ::htpp::interface::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.RegisterMachineRequest.machine)
  return _msg;
}
inline void RegisterMachineRequest::set_allocated_machine(::htpp::interface::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.RegisterMachineRequest.machine)
}

// -------------------------------------------------------------------

// UpdateMachineRequest

// .htpp.interface.v1.MachineStruct machine = 1;
inline bool UpdateMachineRequest::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool UpdateMachineRequest::has_machine() const {
  return _internal_has_machine();
}
inline void UpdateMachineRequest::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::htpp::interface::v1::MachineStruct& UpdateMachineRequest::_internal_machine() const {
  const ::htpp::interface::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::MachineStruct&>(
      ::htpp::interface::v1::_MachineStruct_default_instance_);
}
inline const ::htpp::interface::v1::MachineStruct& UpdateMachineRequest::machine() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.UpdateMachineRequest.machine)
  return _internal_machine();
}
inline void UpdateMachineRequest::unsafe_arena_set_allocated_machine(
    ::htpp::interface::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.UpdateMachineRequest.machine)
}
inline ::htpp::interface::v1::MachineStruct* UpdateMachineRequest::release_machine() {
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* UpdateMachineRequest::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.UpdateMachineRequest.machine)
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* UpdateMachineRequest::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::htpp::interface::v1::MachineStruct* UpdateMachineRequest::mutable_machine() {
  ::htpp::interface::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.UpdateMachineRequest.machine)
  return _msg;
}
inline void UpdateMachineRequest::set_allocated_machine(::htpp::interface::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.UpdateMachineRequest.machine)
}

// -------------------------------------------------------------------

// GetMachineRequest

// int64 machine_id = 1;
inline void GetMachineRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t GetMachineRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t GetMachineRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.GetMachineRequest.machine_id)
  return _internal_machine_id();
}
inline void GetMachineRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void GetMachineRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.GetMachineRequest.machine_id)
}

// -------------------------------------------------------------------

// MachineReply

// .htpp.interface.v1.MachineStruct machine = 1;
inline bool MachineReply::_internal_has_machine() const {
  return this != internal_default_instance() && machine_ != nullptr;
}
inline bool MachineReply::has_machine() const {
  return _internal_has_machine();
}
inline void MachineReply::clear_machine() {
  if (GetArenaForAllocation() == nullptr && machine_ != nullptr) {
    delete machine_;
  }
  machine_ = nullptr;
}
inline const ::htpp::interface::v1::MachineStruct& MachineReply::_internal_machine() const {
  const ::htpp::interface::v1::MachineStruct* p = machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::MachineStruct&>(
      ::htpp::interface::v1::_MachineStruct_default_instance_);
}
inline const ::htpp::interface::v1::MachineStruct& MachineReply::machine() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MachineReply.machine)
  return _internal_machine();
}
inline void MachineReply::unsafe_arena_set_allocated_machine(
    ::htpp::interface::v1::MachineStruct* machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machine_);
  }
  machine_ = machine;
  if (machine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.MachineReply.machine)
}
inline ::htpp::interface::v1::MachineStruct* MachineReply::release_machine() {
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* MachineReply::unsafe_arena_release_machine() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.MachineReply.machine)
  
  ::htpp::interface::v1::MachineStruct* temp = machine_;
  machine_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::MachineStruct* MachineReply::_internal_mutable_machine() {
  
  if (machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::MachineStruct>(GetArenaForAllocation());
    machine_ = p;
  }
  return machine_;
}
inline ::htpp::interface::v1::MachineStruct* MachineReply::mutable_machine() {
  ::htpp::interface::v1::MachineStruct* _msg = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.MachineReply.machine)
  return _msg;
}
inline void MachineReply::set_allocated_machine(::htpp::interface::v1::MachineStruct* machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete machine_;
  }
  if (machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::MachineStruct>::GetOwningArena(machine);
    if (message_arena != submessage_arena) {
      machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machine, submessage_arena);
    }
    
  } else {
    
  }
  machine_ = machine;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.MachineReply.machine)
}

// -------------------------------------------------------------------

// MachinesReply

// repeated .htpp.interface.v1.MachineStruct machines = 1;
inline int MachinesReply::_internal_machines_size() const {
  return machines_.size();
}
inline int MachinesReply::machines_size() const {
  return _internal_machines_size();
}
inline void MachinesReply::clear_machines() {
  machines_.Clear();
}
inline ::htpp::interface::v1::MachineStruct* MachinesReply::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.MachinesReply.machines)
  return machines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MachineStruct >*
MachinesReply::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.MachinesReply.machines)
  return &machines_;
}
inline const ::htpp::interface::v1::MachineStruct& MachinesReply::_internal_machines(int index) const {
  return machines_.Get(index);
}
inline const ::htpp::interface::v1::MachineStruct& MachinesReply::machines(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MachinesReply.machines)
  return _internal_machines(index);
}
inline ::htpp::interface::v1::MachineStruct* MachinesReply::_internal_add_machines() {
  return machines_.Add();
}
inline ::htpp::interface::v1::MachineStruct* MachinesReply::add_machines() {
  ::htpp::interface::v1::MachineStruct* _add = _internal_add_machines();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.MachinesReply.machines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MachineStruct >&
MachinesReply::machines() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.MachinesReply.machines)
  return machines_;
}

// -------------------------------------------------------------------

// MachineStruct

// int64 machine_id = 1;
inline void MachineStruct::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t MachineStruct::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t MachineStruct::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MachineStruct.machine_id)
  return _internal_machine_id();
}
inline void MachineStruct::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void MachineStruct::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MachineStruct.machine_id)
}

// int64 user_id = 2;
inline void MachineStruct::clear_user_id() {
  user_id_ = int64_t{0};
}
inline int64_t MachineStruct::_internal_user_id() const {
  return user_id_;
}
inline int64_t MachineStruct::user_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MachineStruct.user_id)
  return _internal_user_id();
}
inline void MachineStruct::_internal_set_user_id(int64_t value) {
  
  user_id_ = value;
}
inline void MachineStruct::set_user_id(int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MachineStruct.user_id)
}

// string address = 3;
inline void MachineStruct::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& MachineStruct::address() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MachineStruct.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MachineStruct::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MachineStruct.address)
}
inline std::string* MachineStruct::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.MachineStruct.address)
  return _s;
}
inline const std::string& MachineStruct::_internal_address() const {
  return address_.Get();
}
inline void MachineStruct::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MachineStruct::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MachineStruct::release_address() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.MachineStruct.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MachineStruct::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.MachineStruct.address)
}

// -------------------------------------------------------------------

// MoveRequest

// double x = 1;
inline void MoveRequest::clear_x() {
  x_ = 0;
}
inline double MoveRequest::_internal_x() const {
  return x_;
}
inline double MoveRequest::x() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.x)
  return _internal_x();
}
inline void MoveRequest::_internal_set_x(double value) {
  
  x_ = value;
}
inline void MoveRequest::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.x)
}

// double y = 2;
inline void MoveRequest::clear_y() {
  y_ = 0;
}
inline double MoveRequest::_internal_y() const {
  return y_;
}
inline double MoveRequest::y() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.y)
  return _internal_y();
}
inline void MoveRequest::_internal_set_y(double value) {
  
  y_ = value;
}
inline void MoveRequest::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.y)
}

// double z = 3;
inline void MoveRequest::clear_z() {
  z_ = 0;
}
inline double MoveRequest::_internal_z() const {
  return z_;
}
inline double MoveRequest::z() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.z)
  return _internal_z();
}
inline void MoveRequest::_internal_set_z(double value) {
  
  z_ = value;
}
inline void MoveRequest::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.z)
}

// double rx = 4;
inline void MoveRequest::clear_rx() {
  rx_ = 0;
}
inline double MoveRequest::_internal_rx() const {
  return rx_;
}
inline double MoveRequest::rx() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.rx)
  return _internal_rx();
}
inline void MoveRequest::_internal_set_rx(double value) {
  
  rx_ = value;
}
inline void MoveRequest::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.rx)
}

// double ry = 5;
inline void MoveRequest::clear_ry() {
  ry_ = 0;
}
inline double MoveRequest::_internal_ry() const {
  return ry_;
}
inline double MoveRequest::ry() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.ry)
  return _internal_ry();
}
inline void MoveRequest::_internal_set_ry(double value) {
  
  ry_ = value;
}
inline void MoveRequest::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.ry)
}

// bool check = 6;
inline void MoveRequest::clear_check() {
  check_ = false;
}
inline bool MoveRequest::_internal_check() const {
  return check_;
}
inline bool MoveRequest::check() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.check)
  return _internal_check();
}
inline void MoveRequest::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void MoveRequest::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.check)
}

// double delay = 7;
inline void MoveRequest::clear_delay() {
  delay_ = 0;
}
inline double MoveRequest::_internal_delay() const {
  return delay_;
}
inline double MoveRequest::delay() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.delay)
  return _internal_delay();
}
inline void MoveRequest::_internal_set_delay(double value) {
  
  delay_ = value;
}
inline void MoveRequest::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.delay)
}

// int64 machine_id = 8;
inline void MoveRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t MoveRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t MoveRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.machine_id)
  return _internal_machine_id();
}
inline void MoveRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void MoveRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.machine_id)
}

// string check_name = 9;
inline void MoveRequest::clear_check_name() {
  check_name_.ClearToEmpty();
}
inline const std::string& MoveRequest::check_name() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveRequest.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveRequest::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveRequest.check_name)
}
inline std::string* MoveRequest::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.MoveRequest.check_name)
  return _s;
}
inline const std::string& MoveRequest::_internal_check_name() const {
  return check_name_.Get();
}
inline void MoveRequest::_internal_set_check_name(const std::string& value) {
  
  check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MoveRequest::_internal_mutable_check_name() {
  
  return check_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MoveRequest::release_check_name() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.MoveRequest.check_name)
  return check_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MoveRequest::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  check_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (check_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.MoveRequest.check_name)
}

// -------------------------------------------------------------------

// MoveReply

// bool status = 1;
inline void MoveReply::clear_status() {
  status_ = false;
}
inline bool MoveReply::_internal_status() const {
  return status_;
}
inline bool MoveReply::status() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MoveReply.status)
  return _internal_status();
}
inline void MoveReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void MoveReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MoveReply.status)
}

// -------------------------------------------------------------------

// ZeroRequest

// int64 machine_id = 1;
inline void ZeroRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t ZeroRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t ZeroRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ZeroRequest.machine_id)
  return _internal_machine_id();
}
inline void ZeroRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void ZeroRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ZeroRequest.machine_id)
}

// -------------------------------------------------------------------

// ZeroReply

// bool status = 1;
inline void ZeroReply::clear_status() {
  status_ = false;
}
inline bool ZeroReply::_internal_status() const {
  return status_;
}
inline bool ZeroReply::status() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ZeroReply.status)
  return _internal_status();
}
inline void ZeroReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ZeroReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ZeroReply.status)
}

// -------------------------------------------------------------------

// GetMotorStatusRequest

// int64 machine_id = 1;
inline void GetMotorStatusRequest::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t GetMotorStatusRequest::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t GetMotorStatusRequest::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.GetMotorStatusRequest.machine_id)
  return _internal_machine_id();
}
inline void GetMotorStatusRequest::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void GetMotorStatusRequest::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.GetMotorStatusRequest.machine_id)
}

// -------------------------------------------------------------------

// GetMotorStatusReply

// repeated .htpp.interface.v1.MotorInfo motor_info = 1;
inline int GetMotorStatusReply::_internal_motor_info_size() const {
  return motor_info_.size();
}
inline int GetMotorStatusReply::motor_info_size() const {
  return _internal_motor_info_size();
}
inline void GetMotorStatusReply::clear_motor_info() {
  motor_info_.Clear();
}
inline ::htpp::interface::v1::MotorInfo* GetMotorStatusReply::mutable_motor_info(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.GetMotorStatusReply.motor_info)
  return motor_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MotorInfo >*
GetMotorStatusReply::mutable_motor_info() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.GetMotorStatusReply.motor_info)
  return &motor_info_;
}
inline const ::htpp::interface::v1::MotorInfo& GetMotorStatusReply::_internal_motor_info(int index) const {
  return motor_info_.Get(index);
}
inline const ::htpp::interface::v1::MotorInfo& GetMotorStatusReply::motor_info(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.GetMotorStatusReply.motor_info)
  return _internal_motor_info(index);
}
inline ::htpp::interface::v1::MotorInfo* GetMotorStatusReply::_internal_add_motor_info() {
  return motor_info_.Add();
}
inline ::htpp::interface::v1::MotorInfo* GetMotorStatusReply::add_motor_info() {
  ::htpp::interface::v1::MotorInfo* _add = _internal_add_motor_info();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.GetMotorStatusReply.motor_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::MotorInfo >&
GetMotorStatusReply::motor_info() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.GetMotorStatusReply.motor_info)
  return motor_info_;
}

// -------------------------------------------------------------------

// MotorInfo

// .htpp.interface.v1.MotorStatus motor_status = 1;
inline bool MotorInfo::_internal_has_motor_status() const {
  return this != internal_default_instance() && motor_status_ != nullptr;
}
inline bool MotorInfo::has_motor_status() const {
  return _internal_has_motor_status();
}
inline void MotorInfo::clear_motor_status() {
  if (GetArenaForAllocation() == nullptr && motor_status_ != nullptr) {
    delete motor_status_;
  }
  motor_status_ = nullptr;
}
inline const ::htpp::interface::v1::MotorStatus& MotorInfo::_internal_motor_status() const {
  const ::htpp::interface::v1::MotorStatus* p = motor_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::MotorStatus&>(
      ::htpp::interface::v1::_MotorStatus_default_instance_);
}
inline const ::htpp::interface::v1::MotorStatus& MotorInfo::motor_status() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorInfo.motor_status)
  return _internal_motor_status();
}
inline void MotorInfo::unsafe_arena_set_allocated_motor_status(
    ::htpp::interface::v1::MotorStatus* motor_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motor_status_);
  }
  motor_status_ = motor_status;
  if (motor_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.MotorInfo.motor_status)
}
inline ::htpp::interface::v1::MotorStatus* MotorInfo::release_motor_status() {
  
  ::htpp::interface::v1::MotorStatus* temp = motor_status_;
  motor_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::MotorStatus* MotorInfo::unsafe_arena_release_motor_status() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.MotorInfo.motor_status)
  
  ::htpp::interface::v1::MotorStatus* temp = motor_status_;
  motor_status_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::MotorStatus* MotorInfo::_internal_mutable_motor_status() {
  
  if (motor_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::MotorStatus>(GetArenaForAllocation());
    motor_status_ = p;
  }
  return motor_status_;
}
inline ::htpp::interface::v1::MotorStatus* MotorInfo::mutable_motor_status() {
  ::htpp::interface::v1::MotorStatus* _msg = _internal_mutable_motor_status();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.MotorInfo.motor_status)
  return _msg;
}
inline void MotorInfo::set_allocated_motor_status(::htpp::interface::v1::MotorStatus* motor_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete motor_status_;
  }
  if (motor_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::MotorStatus>::GetOwningArena(motor_status);
    if (message_arena != submessage_arena) {
      motor_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor_status, submessage_arena);
    }
    
  } else {
    
  }
  motor_status_ = motor_status;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.MotorInfo.motor_status)
}

// int64 instr_pos = 2;
inline void MotorInfo::clear_instr_pos() {
  instr_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_instr_pos() const {
  return instr_pos_;
}
inline int64_t MotorInfo::instr_pos() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorInfo.instr_pos)
  return _internal_instr_pos();
}
inline void MotorInfo::_internal_set_instr_pos(int64_t value) {
  
  instr_pos_ = value;
}
inline void MotorInfo::set_instr_pos(int64_t value) {
  _internal_set_instr_pos(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorInfo.instr_pos)
}

// int64 current_pos = 3;
inline void MotorInfo::clear_current_pos() {
  current_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_current_pos() const {
  return current_pos_;
}
inline int64_t MotorInfo::current_pos() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorInfo.current_pos)
  return _internal_current_pos();
}
inline void MotorInfo::_internal_set_current_pos(int64_t value) {
  
  current_pos_ = value;
}
inline void MotorInfo::set_current_pos(int64_t value) {
  _internal_set_current_pos(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorInfo.current_pos)
}

// -------------------------------------------------------------------

// MotorStatus

// bool fault = 1;
inline void MotorStatus::clear_fault() {
  fault_ = false;
}
inline bool MotorStatus::_internal_fault() const {
  return fault_;
}
inline bool MotorStatus::fault() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.fault)
  return _internal_fault();
}
inline void MotorStatus::_internal_set_fault(bool value) {
  
  fault_ = value;
}
inline void MotorStatus::set_fault(bool value) {
  _internal_set_fault(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.fault)
}

// bool enabling = 2;
inline void MotorStatus::clear_enabling() {
  enabling_ = false;
}
inline bool MotorStatus::_internal_enabling() const {
  return enabling_;
}
inline bool MotorStatus::enabling() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.enabling)
  return _internal_enabling();
}
inline void MotorStatus::_internal_set_enabling(bool value) {
  
  enabling_ = value;
}
inline void MotorStatus::set_enabling(bool value) {
  _internal_set_enabling(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.enabling)
}

// bool running = 3;
inline void MotorStatus::clear_running() {
  running_ = false;
}
inline bool MotorStatus::_internal_running() const {
  return running_;
}
inline bool MotorStatus::running() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.running)
  return _internal_running();
}
inline void MotorStatus::_internal_set_running(bool value) {
  
  running_ = value;
}
inline void MotorStatus::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.running)
}

// bool instruction_completion = 4;
inline void MotorStatus::clear_instruction_completion() {
  instruction_completion_ = false;
}
inline bool MotorStatus::_internal_instruction_completion() const {
  return instruction_completion_;
}
inline bool MotorStatus::instruction_completion() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.instruction_completion)
  return _internal_instruction_completion();
}
inline void MotorStatus::_internal_set_instruction_completion(bool value) {
  
  instruction_completion_ = value;
}
inline void MotorStatus::set_instruction_completion(bool value) {
  _internal_set_instruction_completion(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.instruction_completion)
}

// bool path_completion = 5;
inline void MotorStatus::clear_path_completion() {
  path_completion_ = false;
}
inline bool MotorStatus::_internal_path_completion() const {
  return path_completion_;
}
inline bool MotorStatus::path_completion() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.path_completion)
  return _internal_path_completion();
}
inline void MotorStatus::_internal_set_path_completion(bool value) {
  
  path_completion_ = value;
}
inline void MotorStatus::set_path_completion(bool value) {
  _internal_set_path_completion(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.path_completion)
}

// bool zero_completion = 6;
inline void MotorStatus::clear_zero_completion() {
  zero_completion_ = false;
}
inline bool MotorStatus::_internal_zero_completion() const {
  return zero_completion_;
}
inline bool MotorStatus::zero_completion() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.MotorStatus.zero_completion)
  return _internal_zero_completion();
}
inline void MotorStatus::_internal_set_zero_completion(bool value) {
  
  zero_completion_ = value;
}
inline void MotorStatus::set_zero_completion(bool value) {
  _internal_set_zero_completion(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.MotorStatus.zero_completion)
}

// -------------------------------------------------------------------

// CreateCronJobRequest

// .htpp.interface.v1.CronJob cron_job = 1;
inline bool CreateCronJobRequest::_internal_has_cron_job() const {
  return this != internal_default_instance() && cron_job_ != nullptr;
}
inline bool CreateCronJobRequest::has_cron_job() const {
  return _internal_has_cron_job();
}
inline void CreateCronJobRequest::clear_cron_job() {
  if (GetArenaForAllocation() == nullptr && cron_job_ != nullptr) {
    delete cron_job_;
  }
  cron_job_ = nullptr;
}
inline const ::htpp::interface::v1::CronJob& CreateCronJobRequest::_internal_cron_job() const {
  const ::htpp::interface::v1::CronJob* p = cron_job_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::CronJob&>(
      ::htpp::interface::v1::_CronJob_default_instance_);
}
inline const ::htpp::interface::v1::CronJob& CreateCronJobRequest::cron_job() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CreateCronJobRequest.cron_job)
  return _internal_cron_job();
}
inline void CreateCronJobRequest::unsafe_arena_set_allocated_cron_job(
    ::htpp::interface::v1::CronJob* cron_job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cron_job_);
  }
  cron_job_ = cron_job;
  if (cron_job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.CreateCronJobRequest.cron_job)
}
inline ::htpp::interface::v1::CronJob* CreateCronJobRequest::release_cron_job() {
  
  ::htpp::interface::v1::CronJob* temp = cron_job_;
  cron_job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::CronJob* CreateCronJobRequest::unsafe_arena_release_cron_job() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.CreateCronJobRequest.cron_job)
  
  ::htpp::interface::v1::CronJob* temp = cron_job_;
  cron_job_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::CronJob* CreateCronJobRequest::_internal_mutable_cron_job() {
  
  if (cron_job_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::CronJob>(GetArenaForAllocation());
    cron_job_ = p;
  }
  return cron_job_;
}
inline ::htpp::interface::v1::CronJob* CreateCronJobRequest::mutable_cron_job() {
  ::htpp::interface::v1::CronJob* _msg = _internal_mutable_cron_job();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CreateCronJobRequest.cron_job)
  return _msg;
}
inline void CreateCronJobRequest::set_allocated_cron_job(::htpp::interface::v1::CronJob* cron_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cron_job_;
  }
  if (cron_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::CronJob>::GetOwningArena(cron_job);
    if (message_arena != submessage_arena) {
      cron_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cron_job, submessage_arena);
    }
    
  } else {
    
  }
  cron_job_ = cron_job;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.CreateCronJobRequest.cron_job)
}

// -------------------------------------------------------------------

// DeleteCronJobRequest

// int64 id = 1;
inline void DeleteCronJobRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t DeleteCronJobRequest::_internal_id() const {
  return id_;
}
inline int64_t DeleteCronJobRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.DeleteCronJobRequest.id)
  return _internal_id();
}
inline void DeleteCronJobRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void DeleteCronJobRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.DeleteCronJobRequest.id)
}

// -------------------------------------------------------------------

// DeleteCronJobReply

// int64 num = 1;
inline void DeleteCronJobReply::clear_num() {
  num_ = int64_t{0};
}
inline int64_t DeleteCronJobReply::_internal_num() const {
  return num_;
}
inline int64_t DeleteCronJobReply::num() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.DeleteCronJobReply.num)
  return _internal_num();
}
inline void DeleteCronJobReply::_internal_set_num(int64_t value) {
  
  num_ = value;
}
inline void DeleteCronJobReply::set_num(int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.DeleteCronJobReply.num)
}

// -------------------------------------------------------------------

// ListCronJobRequest

// int64 machineId = 1;
inline void ListCronJobRequest::clear_machineid() {
  machineid_ = int64_t{0};
}
inline int64_t ListCronJobRequest::_internal_machineid() const {
  return machineid_;
}
inline int64_t ListCronJobRequest::machineid() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.ListCronJobRequest.machineId)
  return _internal_machineid();
}
inline void ListCronJobRequest::_internal_set_machineid(int64_t value) {
  
  machineid_ = value;
}
inline void ListCronJobRequest::set_machineid(int64_t value) {
  _internal_set_machineid(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.ListCronJobRequest.machineId)
}

// -------------------------------------------------------------------

// CronJobReply

// .htpp.interface.v1.CronJob cron_job = 1;
inline bool CronJobReply::_internal_has_cron_job() const {
  return this != internal_default_instance() && cron_job_ != nullptr;
}
inline bool CronJobReply::has_cron_job() const {
  return _internal_has_cron_job();
}
inline void CronJobReply::clear_cron_job() {
  if (GetArenaForAllocation() == nullptr && cron_job_ != nullptr) {
    delete cron_job_;
  }
  cron_job_ = nullptr;
}
inline const ::htpp::interface::v1::CronJob& CronJobReply::_internal_cron_job() const {
  const ::htpp::interface::v1::CronJob* p = cron_job_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::CronJob&>(
      ::htpp::interface::v1::_CronJob_default_instance_);
}
inline const ::htpp::interface::v1::CronJob& CronJobReply::cron_job() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJobReply.cron_job)
  return _internal_cron_job();
}
inline void CronJobReply::unsafe_arena_set_allocated_cron_job(
    ::htpp::interface::v1::CronJob* cron_job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cron_job_);
  }
  cron_job_ = cron_job;
  if (cron_job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.CronJobReply.cron_job)
}
inline ::htpp::interface::v1::CronJob* CronJobReply::release_cron_job() {
  
  ::htpp::interface::v1::CronJob* temp = cron_job_;
  cron_job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::CronJob* CronJobReply::unsafe_arena_release_cron_job() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.CronJobReply.cron_job)
  
  ::htpp::interface::v1::CronJob* temp = cron_job_;
  cron_job_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::CronJob* CronJobReply::_internal_mutable_cron_job() {
  
  if (cron_job_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::CronJob>(GetArenaForAllocation());
    cron_job_ = p;
  }
  return cron_job_;
}
inline ::htpp::interface::v1::CronJob* CronJobReply::mutable_cron_job() {
  ::htpp::interface::v1::CronJob* _msg = _internal_mutable_cron_job();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CronJobReply.cron_job)
  return _msg;
}
inline void CronJobReply::set_allocated_cron_job(::htpp::interface::v1::CronJob* cron_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cron_job_;
  }
  if (cron_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::CronJob>::GetOwningArena(cron_job);
    if (message_arena != submessage_arena) {
      cron_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cron_job, submessage_arena);
    }
    
  } else {
    
  }
  cron_job_ = cron_job;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.CronJobReply.cron_job)
}

// -------------------------------------------------------------------

// CronJobsReply

// repeated .htpp.interface.v1.CronJob cron_jobs = 1;
inline int CronJobsReply::_internal_cron_jobs_size() const {
  return cron_jobs_.size();
}
inline int CronJobsReply::cron_jobs_size() const {
  return _internal_cron_jobs_size();
}
inline void CronJobsReply::clear_cron_jobs() {
  cron_jobs_.Clear();
}
inline ::htpp::interface::v1::CronJob* CronJobsReply::mutable_cron_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CronJobsReply.cron_jobs)
  return cron_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CronJob >*
CronJobsReply::mutable_cron_jobs() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.CronJobsReply.cron_jobs)
  return &cron_jobs_;
}
inline const ::htpp::interface::v1::CronJob& CronJobsReply::_internal_cron_jobs(int index) const {
  return cron_jobs_.Get(index);
}
inline const ::htpp::interface::v1::CronJob& CronJobsReply::cron_jobs(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJobsReply.cron_jobs)
  return _internal_cron_jobs(index);
}
inline ::htpp::interface::v1::CronJob* CronJobsReply::_internal_add_cron_jobs() {
  return cron_jobs_.Add();
}
inline ::htpp::interface::v1::CronJob* CronJobsReply::add_cron_jobs() {
  ::htpp::interface::v1::CronJob* _add = _internal_add_cron_jobs();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.CronJobsReply.cron_jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CronJob >&
CronJobsReply::cron_jobs() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.CronJobsReply.cron_jobs)
  return cron_jobs_;
}

// -------------------------------------------------------------------

// CronJob

// int64 id = 1;
inline void CronJob::clear_id() {
  id_ = int64_t{0};
}
inline int64_t CronJob::_internal_id() const {
  return id_;
}
inline int64_t CronJob::id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJob.id)
  return _internal_id();
}
inline void CronJob::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void CronJob::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.CronJob.id)
}

// int64 machineId = 2;
inline void CronJob::clear_machineid() {
  machineid_ = int64_t{0};
}
inline int64_t CronJob::_internal_machineid() const {
  return machineid_;
}
inline int64_t CronJob::machineid() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJob.machineId)
  return _internal_machineid();
}
inline void CronJob::_internal_set_machineid(int64_t value) {
  
  machineid_ = value;
}
inline void CronJob::set_machineid(int64_t value) {
  _internal_set_machineid(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.CronJob.machineId)
}

// string check_name = 3;
inline void CronJob::clear_check_name() {
  check_name_.ClearToEmpty();
}
inline const std::string& CronJob::check_name() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJob.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CronJob::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.CronJob.check_name)
}
inline std::string* CronJob::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CronJob.check_name)
  return _s;
}
inline const std::string& CronJob::_internal_check_name() const {
  return check_name_.Get();
}
inline void CronJob::_internal_set_check_name(const std::string& value) {
  
  check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CronJob::_internal_mutable_check_name() {
  
  return check_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CronJob::release_check_name() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.CronJob.check_name)
  return check_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CronJob::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  check_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (check_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.CronJob.check_name)
}

// string cron_string = 4;
inline void CronJob::clear_cron_string() {
  cron_string_.ClearToEmpty();
}
inline const std::string& CronJob::cron_string() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJob.cron_string)
  return _internal_cron_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CronJob::set_cron_string(ArgT0&& arg0, ArgT... args) {
 
 cron_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.CronJob.cron_string)
}
inline std::string* CronJob::mutable_cron_string() {
  std::string* _s = _internal_mutable_cron_string();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CronJob.cron_string)
  return _s;
}
inline const std::string& CronJob::_internal_cron_string() const {
  return cron_string_.Get();
}
inline void CronJob::_internal_set_cron_string(const std::string& value) {
  
  cron_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CronJob::_internal_mutable_cron_string() {
  
  return cron_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CronJob::release_cron_string() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.CronJob.cron_string)
  return cron_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CronJob::set_allocated_cron_string(std::string* cron_string) {
  if (cron_string != nullptr) {
    
  } else {
    
  }
  cron_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cron_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cron_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cron_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.CronJob.cron_string)
}

// repeated .htpp.interface.v1.CheckCoordinate check_coordinates = 5;
inline int CronJob::_internal_check_coordinates_size() const {
  return check_coordinates_.size();
}
inline int CronJob::check_coordinates_size() const {
  return _internal_check_coordinates_size();
}
inline void CronJob::clear_check_coordinates() {
  check_coordinates_.Clear();
}
inline ::htpp::interface::v1::CheckCoordinate* CronJob::mutable_check_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CronJob.check_coordinates)
  return check_coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CheckCoordinate >*
CronJob::mutable_check_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:htpp.interface.v1.CronJob.check_coordinates)
  return &check_coordinates_;
}
inline const ::htpp::interface::v1::CheckCoordinate& CronJob::_internal_check_coordinates(int index) const {
  return check_coordinates_.Get(index);
}
inline const ::htpp::interface::v1::CheckCoordinate& CronJob::check_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CronJob.check_coordinates)
  return _internal_check_coordinates(index);
}
inline ::htpp::interface::v1::CheckCoordinate* CronJob::_internal_add_check_coordinates() {
  return check_coordinates_.Add();
}
inline ::htpp::interface::v1::CheckCoordinate* CronJob::add_check_coordinates() {
  ::htpp::interface::v1::CheckCoordinate* _add = _internal_add_check_coordinates();
  // @@protoc_insertion_point(field_add:htpp.interface.v1.CronJob.check_coordinates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::interface::v1::CheckCoordinate >&
CronJob::check_coordinates() const {
  // @@protoc_insertion_point(field_list:htpp.interface.v1.CronJob.check_coordinates)
  return check_coordinates_;
}

// -------------------------------------------------------------------

// CheckCoordinate

// int64 seq = 1;
inline void CheckCoordinate::clear_seq() {
  seq_ = int64_t{0};
}
inline int64_t CheckCoordinate::_internal_seq() const {
  return seq_;
}
inline int64_t CheckCoordinate::seq() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CheckCoordinate.seq)
  return _internal_seq();
}
inline void CheckCoordinate::_internal_set_seq(int64_t value) {
  
  seq_ = value;
}
inline void CheckCoordinate::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.CheckCoordinate.seq)
}

// .htpp.interface.v1.Coordinate crd = 2;
inline bool CheckCoordinate::_internal_has_crd() const {
  return this != internal_default_instance() && crd_ != nullptr;
}
inline bool CheckCoordinate::has_crd() const {
  return _internal_has_crd();
}
inline void CheckCoordinate::clear_crd() {
  if (GetArenaForAllocation() == nullptr && crd_ != nullptr) {
    delete crd_;
  }
  crd_ = nullptr;
}
inline const ::htpp::interface::v1::Coordinate& CheckCoordinate::_internal_crd() const {
  const ::htpp::interface::v1::Coordinate* p = crd_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::interface::v1::Coordinate&>(
      ::htpp::interface::v1::_Coordinate_default_instance_);
}
inline const ::htpp::interface::v1::Coordinate& CheckCoordinate::crd() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.CheckCoordinate.crd)
  return _internal_crd();
}
inline void CheckCoordinate::unsafe_arena_set_allocated_crd(
    ::htpp::interface::v1::Coordinate* crd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crd_);
  }
  crd_ = crd;
  if (crd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.interface.v1.CheckCoordinate.crd)
}
inline ::htpp::interface::v1::Coordinate* CheckCoordinate::release_crd() {
  
  ::htpp::interface::v1::Coordinate* temp = crd_;
  crd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::interface::v1::Coordinate* CheckCoordinate::unsafe_arena_release_crd() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.CheckCoordinate.crd)
  
  ::htpp::interface::v1::Coordinate* temp = crd_;
  crd_ = nullptr;
  return temp;
}
inline ::htpp::interface::v1::Coordinate* CheckCoordinate::_internal_mutable_crd() {
  
  if (crd_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::interface::v1::Coordinate>(GetArenaForAllocation());
    crd_ = p;
  }
  return crd_;
}
inline ::htpp::interface::v1::Coordinate* CheckCoordinate::mutable_crd() {
  ::htpp::interface::v1::Coordinate* _msg = _internal_mutable_crd();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.CheckCoordinate.crd)
  return _msg;
}
inline void CheckCoordinate::set_allocated_crd(::htpp::interface::v1::Coordinate* crd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crd_;
  }
  if (crd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::htpp::interface::v1::Coordinate>::GetOwningArena(crd);
    if (message_arena != submessage_arena) {
      crd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crd, submessage_arena);
    }
    
  } else {
    
  }
  crd_ = crd;
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.CheckCoordinate.crd)
}

// -------------------------------------------------------------------

// Coordinate

// double x = 1;
inline void Coordinate::clear_x() {
  x_ = 0;
}
inline double Coordinate::_internal_x() const {
  return x_;
}
inline double Coordinate::x() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.x)
  return _internal_x();
}
inline void Coordinate::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Coordinate::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.x)
}

// double y = 2;
inline void Coordinate::clear_y() {
  y_ = 0;
}
inline double Coordinate::_internal_y() const {
  return y_;
}
inline double Coordinate::y() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.y)
  return _internal_y();
}
inline void Coordinate::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Coordinate::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.y)
}

// double z = 3;
inline void Coordinate::clear_z() {
  z_ = 0;
}
inline double Coordinate::_internal_z() const {
  return z_;
}
inline double Coordinate::z() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.z)
  return _internal_z();
}
inline void Coordinate::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Coordinate::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.z)
}

// double rx = 4;
inline void Coordinate::clear_rx() {
  rx_ = 0;
}
inline double Coordinate::_internal_rx() const {
  return rx_;
}
inline double Coordinate::rx() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.rx)
  return _internal_rx();
}
inline void Coordinate::_internal_set_rx(double value) {
  
  rx_ = value;
}
inline void Coordinate::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.rx)
}

// double ry = 5;
inline void Coordinate::clear_ry() {
  ry_ = 0;
}
inline double Coordinate::_internal_ry() const {
  return ry_;
}
inline double Coordinate::ry() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.ry)
  return _internal_ry();
}
inline void Coordinate::_internal_set_ry(double value) {
  
  ry_ = value;
}
inline void Coordinate::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.ry)
}

// bool check = 6;
inline void Coordinate::clear_check() {
  check_ = false;
}
inline bool Coordinate::_internal_check() const {
  return check_;
}
inline bool Coordinate::check() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.check)
  return _internal_check();
}
inline void Coordinate::_internal_set_check(bool value) {
  
  check_ = value;
}
inline void Coordinate::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.check)
}

// double delay = 7;
inline void Coordinate::clear_delay() {
  delay_ = 0;
}
inline double Coordinate::_internal_delay() const {
  return delay_;
}
inline double Coordinate::delay() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.delay)
  return _internal_delay();
}
inline void Coordinate::_internal_set_delay(double value) {
  
  delay_ = value;
}
inline void Coordinate::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.delay)
}

// int64 machine_id = 8;
inline void Coordinate::clear_machine_id() {
  machine_id_ = int64_t{0};
}
inline int64_t Coordinate::_internal_machine_id() const {
  return machine_id_;
}
inline int64_t Coordinate::machine_id() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.machine_id)
  return _internal_machine_id();
}
inline void Coordinate::_internal_set_machine_id(int64_t value) {
  
  machine_id_ = value;
}
inline void Coordinate::set_machine_id(int64_t value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.machine_id)
}

// string check_name = 9;
inline void Coordinate::clear_check_name() {
  check_name_.ClearToEmpty();
}
inline const std::string& Coordinate::check_name() const {
  // @@protoc_insertion_point(field_get:htpp.interface.v1.Coordinate.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Coordinate::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.interface.v1.Coordinate.check_name)
}
inline std::string* Coordinate::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:htpp.interface.v1.Coordinate.check_name)
  return _s;
}
inline const std::string& Coordinate::_internal_check_name() const {
  return check_name_.Get();
}
inline void Coordinate::_internal_set_check_name(const std::string& value) {
  
  check_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Coordinate::_internal_mutable_check_name() {
  
  return check_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Coordinate::release_check_name() {
  // @@protoc_insertion_point(field_release:htpp.interface.v1.Coordinate.check_name)
  return check_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Coordinate::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  check_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (check_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    check_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.interface.v1.Coordinate.check_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace interface
}  // namespace htpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
