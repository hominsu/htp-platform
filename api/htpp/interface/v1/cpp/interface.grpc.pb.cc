// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: interface.proto

#include "interface.pb.h"
#include "interface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace htpp {
namespace interface {
namespace v1 {

static const char* Interface_method_names[] = {
  "/htpp.interface.v1.Interface/Login",
  "/htpp.interface.v1.Interface/Register",
  "/htpp.interface.v1.Interface/GetCurrentUser",
  "/htpp.interface.v1.Interface/UpdateUser",
  "/htpp.interface.v1.Interface/ReadOne",
  "/htpp.interface.v1.Interface/ReadAll",
  "/htpp.interface.v1.Interface/ReadOneWithBinary",
  "/htpp.interface.v1.Interface/ReadAllWithBinary",
  "/htpp.interface.v1.Interface/ReadOneWithBinaryAndCalArea",
  "/htpp.interface.v1.Interface/ReadAllWithBinaryAndCalArea",
  "/htpp.interface.v1.Interface/RegisterMachine",
  "/htpp.interface.v1.Interface/UpdateMachine",
  "/htpp.interface.v1.Interface/GetMachine",
  "/htpp.interface.v1.Interface/GetCurrentUserMachines",
  "/htpp.interface.v1.Interface/Move",
  "/htpp.interface.v1.Interface/Zero",
  "/htpp.interface.v1.Interface/GetMotorStatus",
  "/htpp.interface.v1.Interface/CreateCronJob",
  "/htpp.interface.v1.Interface/DeleteCronJob",
  "/htpp.interface.v1.Interface/ListCronJob",
};

std::unique_ptr< Interface::Stub> Interface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Interface::Stub> stub(new Interface::Stub(channel, options));
  return stub;
}

Interface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(Interface_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(Interface_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentUser_(Interface_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(Interface_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOne_(Interface_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAll_(Interface_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinary_(Interface_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinary_(Interface_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinaryAndCalArea_(Interface_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinaryAndCalArea_(Interface_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterMachine_(Interface_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMachine_(Interface_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMachine_(Interface_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentUserMachines_(Interface_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(Interface_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Zero_(Interface_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMotorStatus_(Interface_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCronJob_(Interface_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCronJob_(Interface_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCronJob_(Interface_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Interface::Stub::Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::htpp::interface::v1::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void Interface::Stub::async::Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void Interface::Stub::async::Login(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::UserReply, ::htpp::interface::v1::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::htpp::interface::v1::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void Interface::Stub::async::Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Interface::Stub::async::Register(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::UserReply, ::htpp::interface::v1::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::htpp::interface::v1::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentUser_, context, request, response);
}

void Interface::Stub::async::GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentUser_, context, request, response, std::move(f));
}

void Interface::Stub::async::GetCurrentUser(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::PrepareAsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::UserReply, ::htpp::interface::v1::GetCurrentUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::AsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::htpp::interface::v1::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void Interface::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void Interface::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::UserReply, ::htpp::interface::v1::UpdateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::UserReply>* Interface::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::htpp::interface::v1::ImageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOne_, context, request, response);
}

void Interface::Stub::async::ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOne_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadOne(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOne_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* Interface::Stub::PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImageReply, ::htpp::interface::v1::ReadOneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOne_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* Interface::Stub::AsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::htpp::interface::v1::ImagesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAll_, context, request, response);
}

void Interface::Stub::async::ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadAll(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* Interface::Stub::PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImagesReply, ::htpp::interface::v1::ReadAllRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* Interface::Stub::AsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::htpp::interface::v1::ImageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinary_, context, request, response);
}

void Interface::Stub::async::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinary_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* Interface::Stub::PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImageReply, ::htpp::interface::v1::ReadOneWithBinaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageReply>* Interface::Stub::AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::htpp::interface::v1::ImagesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinary_, context, request, response);
}

void Interface::Stub::async::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinary_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* Interface::Stub::PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImagesReply, ::htpp::interface::v1::ReadAllWithBinaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesReply>* Interface::Stub::AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImageWithAreaReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response);
}

void Interface::Stub::async::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>* Interface::Stub::PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImageWithAreaReply, ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinaryAndCalArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImageWithAreaReply>* Interface::Stub::AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::htpp::interface::v1::ImagesWithAreaReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response);
}

void Interface::Stub::async::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response, std::move(f));
}

void Interface::Stub::async::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>* Interface::Stub::PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ImagesWithAreaReply, ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinaryAndCalArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ImagesWithAreaReply>* Interface::Stub::AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::htpp::interface::v1::MachineReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterMachine_, context, request, response);
}

void Interface::Stub::async::RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterMachine_, context, request, response, std::move(f));
}

void Interface::Stub::async::RegisterMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterMachine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::PrepareAsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::MachineReply, ::htpp::interface::v1::RegisterMachineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterMachine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::AsyncRegisterMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::RegisterMachineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterMachineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::htpp::interface::v1::MachineReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMachine_, context, request, response);
}

void Interface::Stub::async::UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMachine_, context, request, response, std::move(f));
}

void Interface::Stub::async::UpdateMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMachine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::PrepareAsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::MachineReply, ::htpp::interface::v1::UpdateMachineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMachine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::AsyncUpdateMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::UpdateMachineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMachineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::htpp::interface::v1::MachineReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMachine_, context, request, response);
}

void Interface::Stub::async::GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMachine_, context, request, response, std::move(f));
}

void Interface::Stub::async::GetMachine(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMachine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::PrepareAsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::MachineReply, ::htpp::interface::v1::GetMachineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMachine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachineReply>* Interface::Stub::AsyncGetMachineRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMachineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMachineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::htpp::interface::v1::MachinesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentUserMachines_, context, request, response);
}

void Interface::Stub::async::GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentUserMachines_, context, request, response, std::move(f));
}

void Interface::Stub::async::GetCurrentUserMachines(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentUserMachines_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>* Interface::Stub::PrepareAsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::MachinesReply, ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentUserMachines_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MachinesReply>* Interface::Stub::AsyncGetCurrentUserMachinesRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentUserMachinesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::htpp::interface::v1::MoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void Interface::Stub::async::Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void Interface::Stub::async::Move(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>* Interface::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::MoveReply, ::htpp::interface::v1::MoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::MoveReply>* Interface::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::htpp::interface::v1::ZeroReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Zero_, context, request, response);
}

void Interface::Stub::async::Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Zero_, context, request, response, std::move(f));
}

void Interface::Stub::async::Zero(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Zero_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>* Interface::Stub::PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::ZeroReply, ::htpp::interface::v1::ZeroRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Zero_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::ZeroReply>* Interface::Stub::AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncZeroRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::htpp::interface::v1::GetMotorStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMotorStatus_, context, request, response);
}

void Interface::Stub::async::GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMotorStatus_, context, request, response, std::move(f));
}

void Interface::Stub::async::GetMotorStatus(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMotorStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>* Interface::Stub::PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::GetMotorStatusReply, ::htpp::interface::v1::GetMotorStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMotorStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::GetMotorStatusReply>* Interface::Stub::AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMotorStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::CreateCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::CreateCronJobRequest& request, ::htpp::interface::v1::CronJobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::CreateCronJobRequest, ::htpp::interface::v1::CronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCronJob_, context, request, response);
}

void Interface::Stub::async::CreateCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::CreateCronJobRequest* request, ::htpp::interface::v1::CronJobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::CreateCronJobRequest, ::htpp::interface::v1::CronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCronJob_, context, request, response, std::move(f));
}

void Interface::Stub::async::CreateCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::CreateCronJobRequest* request, ::htpp::interface::v1::CronJobReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCronJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::CronJobReply>* Interface::Stub::PrepareAsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::CronJobReply, ::htpp::interface::v1::CreateCronJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCronJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::CronJobReply>* Interface::Stub::AsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCronJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::DeleteCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::DeleteCronJobRequest& request, ::htpp::interface::v1::DeleteCronJobReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::DeleteCronJobRequest, ::htpp::interface::v1::DeleteCronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCronJob_, context, request, response);
}

void Interface::Stub::async::DeleteCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::DeleteCronJobRequest* request, ::htpp::interface::v1::DeleteCronJobReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::DeleteCronJobRequest, ::htpp::interface::v1::DeleteCronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCronJob_, context, request, response, std::move(f));
}

void Interface::Stub::async::DeleteCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::DeleteCronJobRequest* request, ::htpp::interface::v1::DeleteCronJobReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCronJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::DeleteCronJobReply>* Interface::Stub::PrepareAsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::DeleteCronJobReply, ::htpp::interface::v1::DeleteCronJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCronJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::DeleteCronJobReply>* Interface::Stub::AsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCronJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Interface::Stub::ListCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::ListCronJobRequest& request, ::htpp::interface::v1::CronJobsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::interface::v1::ListCronJobRequest, ::htpp::interface::v1::CronJobsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListCronJob_, context, request, response);
}

void Interface::Stub::async::ListCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::ListCronJobRequest* request, ::htpp::interface::v1::CronJobsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::interface::v1::ListCronJobRequest, ::htpp::interface::v1::CronJobsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCronJob_, context, request, response, std::move(f));
}

void Interface::Stub::async::ListCronJob(::grpc::ClientContext* context, const ::htpp::interface::v1::ListCronJobRequest* request, ::htpp::interface::v1::CronJobsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListCronJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::CronJobsReply>* Interface::Stub::PrepareAsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::interface::v1::CronJobsReply, ::htpp::interface::v1::ListCronJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListCronJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::interface::v1::CronJobsReply>* Interface::Stub::AsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::interface::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListCronJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

Interface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::LoginRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::LoginRequest* req,
             ::htpp::interface::v1::UserReply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::RegisterRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::RegisterRequest* req,
             ::htpp::interface::v1::UserReply* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::GetCurrentUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::GetCurrentUserRequest* req,
             ::htpp::interface::v1::UserReply* resp) {
               return service->GetCurrentUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::UpdateUserRequest, ::htpp::interface::v1::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::UpdateUserRequest* req,
             ::htpp::interface::v1::UserReply* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadOneRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadOneRequest* req,
             ::htpp::interface::v1::ImageReply* resp) {
               return service->ReadOne(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadAllRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadAllRequest* req,
             ::htpp::interface::v1::ImagesReply* resp) {
               return service->ReadAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadOneWithBinaryRequest, ::htpp::interface::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadOneWithBinaryRequest* req,
             ::htpp::interface::v1::ImageReply* resp) {
               return service->ReadOneWithBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadAllWithBinaryRequest, ::htpp::interface::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadAllWithBinaryRequest* req,
             ::htpp::interface::v1::ImagesReply* resp) {
               return service->ReadAllWithBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* req,
             ::htpp::interface::v1::ImageWithAreaReply* resp) {
               return service->ReadOneWithBinaryAndCalArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::interface::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* req,
             ::htpp::interface::v1::ImagesWithAreaReply* resp) {
               return service->ReadAllWithBinaryAndCalArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::RegisterMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::RegisterMachineRequest* req,
             ::htpp::interface::v1::MachineReply* resp) {
               return service->RegisterMachine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::UpdateMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::UpdateMachineRequest* req,
             ::htpp::interface::v1::MachineReply* resp) {
               return service->UpdateMachine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::GetMachineRequest, ::htpp::interface::v1::MachineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::GetMachineRequest* req,
             ::htpp::interface::v1::MachineReply* resp) {
               return service->GetMachine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::GetCurrentUserMachinesRequest, ::htpp::interface::v1::MachinesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::GetCurrentUserMachinesRequest* req,
             ::htpp::interface::v1::MachinesReply* resp) {
               return service->GetCurrentUserMachines(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::MoveRequest, ::htpp::interface::v1::MoveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::MoveRequest* req,
             ::htpp::interface::v1::MoveReply* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ZeroRequest, ::htpp::interface::v1::ZeroReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ZeroRequest* req,
             ::htpp::interface::v1::ZeroReply* resp) {
               return service->Zero(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::GetMotorStatusRequest, ::htpp::interface::v1::GetMotorStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::GetMotorStatusRequest* req,
             ::htpp::interface::v1::GetMotorStatusReply* resp) {
               return service->GetMotorStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::CreateCronJobRequest, ::htpp::interface::v1::CronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::CreateCronJobRequest* req,
             ::htpp::interface::v1::CronJobReply* resp) {
               return service->CreateCronJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::DeleteCronJobRequest, ::htpp::interface::v1::DeleteCronJobReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::DeleteCronJobRequest* req,
             ::htpp::interface::v1::DeleteCronJobReply* resp) {
               return service->DeleteCronJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interface_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interface::Service, ::htpp::interface::v1::ListCronJobRequest, ::htpp::interface::v1::CronJobsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::interface::v1::ListCronJobRequest* req,
             ::htpp::interface::v1::CronJobsReply* resp) {
               return service->ListCronJob(ctx, req, resp);
             }, this)));
}

Interface::Service::~Service() {
}

::grpc::Status Interface::Service::Login(::grpc::ServerContext* context, const ::htpp::interface::v1::LoginRequest* request, ::htpp::interface::v1::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::Register(::grpc::ServerContext* context, const ::htpp::interface::v1::RegisterRequest* request, ::htpp::interface::v1::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::GetCurrentUser(::grpc::ServerContext* context, const ::htpp::interface::v1::GetCurrentUserRequest* request, ::htpp::interface::v1::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::UpdateUser(::grpc::ServerContext* context, const ::htpp::interface::v1::UpdateUserRequest* request, ::htpp::interface::v1::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadOne(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneRequest* request, ::htpp::interface::v1::ImageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadAll(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllRequest* request, ::htpp::interface::v1::ImagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadOneWithBinary(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryRequest* request, ::htpp::interface::v1::ImageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadAllWithBinary(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryRequest* request, ::htpp::interface::v1::ImagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImageWithAreaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::interface::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::interface::v1::ImagesWithAreaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::RegisterMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::RegisterMachineRequest* request, ::htpp::interface::v1::MachineReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::UpdateMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::UpdateMachineRequest* request, ::htpp::interface::v1::MachineReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::GetMachine(::grpc::ServerContext* context, const ::htpp::interface::v1::GetMachineRequest* request, ::htpp::interface::v1::MachineReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::GetCurrentUserMachines(::grpc::ServerContext* context, const ::htpp::interface::v1::GetCurrentUserMachinesRequest* request, ::htpp::interface::v1::MachinesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::Move(::grpc::ServerContext* context, const ::htpp::interface::v1::MoveRequest* request, ::htpp::interface::v1::MoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::Zero(::grpc::ServerContext* context, const ::htpp::interface::v1::ZeroRequest* request, ::htpp::interface::v1::ZeroReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::GetMotorStatus(::grpc::ServerContext* context, const ::htpp::interface::v1::GetMotorStatusRequest* request, ::htpp::interface::v1::GetMotorStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::CreateCronJob(::grpc::ServerContext* context, const ::htpp::interface::v1::CreateCronJobRequest* request, ::htpp::interface::v1::CronJobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::DeleteCronJob(::grpc::ServerContext* context, const ::htpp::interface::v1::DeleteCronJobRequest* request, ::htpp::interface::v1::DeleteCronJobReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interface::Service::ListCronJob(::grpc::ServerContext* context, const ::htpp::interface::v1::ListCronJobRequest* request, ::htpp::interface::v1::CronJobsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace htpp
}  // namespace interface
}  // namespace v1

