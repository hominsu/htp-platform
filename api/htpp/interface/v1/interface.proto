syntax = "proto3";

package htpp.interface.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "api/htpp/interface/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "htp-platform Interface API";
    version: "1.0";
    description: "";
    contact: {
      name: "htp-platform";
      url: "https://github.com/hominsu/htp-platform";
      email: "1774069959@qq.com";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

// The interface service definition.
service Interface {
  rpc Login (LoginRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/v1/users/login",
      body: "*",
    };
  }

  rpc Register (RegisterRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/v1/users",
      body: "*",
    };
  };

  rpc GetCurrentUser (GetCurrentUserRequest) returns (UserReply) {
    option (google.api.http) = {
      get: "/v1/user/{id}",
    };
  };

  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "/v1/user",
      body: "*",
    };
  };

  rpc ReadOne (ReadOneRequest) returns (ImageReply) {
    option (google.api.http) = {
      get: "/v1/capture/{id}",
    };
  }

  rpc ReadAll(ReadAllRequest) returns (ImagesReply) {
    option (google.api.http) = {
      get: "/v1/capture",
    };
  }

  rpc ReadOneWithBinary(ReadOneWithBinaryRequest) returns (ImageReply) {
    option (google.api.http) = {
      get: "/v1/capture/{id}/binary",
    };
  }

  rpc ReadAllWithBinary(ReadAllWithBinaryRequest) returns (ImagesReply) {
    option (google.api.http) = {
      get: "/v1/capture/binary",
    };
  }

  rpc ReadOneWithBinaryAndCalArea(ReadOneWithBinaryAndCalAreaRequest) returns (ImageWithAreaReply) {
    option (google.api.http) = {
      get: "/v1/capture/{id}/binary/area",
    };
  }

  rpc ReadAllWithBinaryAndCalArea(ReadAllWithBinaryAndCalAreaRequest) returns (ImagesWithAreaReply) {
    option (google.api.http) = {
      get: "/v1/capture/binary/area",
    };
  }

  rpc RegisterMachine (RegisterMachineRequest) returns (MachineReply) {
    option (google.api.http) = {
      post: "/v1/machines",
      body: "*",
    };
  }

  rpc UpdateMachine (UpdateMachineRequest) returns (MachineReply) {
    option (google.api.http) = {
      put: "/v1/machine",
      body: "*",
    };
  }

  rpc GetMachine (GetMachineRequest) returns (MachineReply) {
    option (google.api.http) = {
      get: "/v1/machines/{machine_id}",
    };
  }

  rpc GetCurrentUserMachines (GetCurrentUserMachinesRequest) returns (MachinesReply) {
    option (google.api.http) = {
      get: "/v1/machine/{user_id}",
    };
  }
}

// user

message LoginRequest {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

message GetCurrentUserRequest {
  int64 id = 1;
}

message UpdateUserRequest {
  message User {
    int64  id = 1;
    string email = 2;
    string username = 4;
    string password = 5;
  }
  User user = 1;
}

message UserReply {
  message User {
    int64  id = 1;
    string email = 2;
    string token = 3;
    string username = 4;
  }
  User user = 1;
}

// capture

message ReadOneRequest {
  int64 id = 1;
}

message ReadAllRequest {
}

message ReadOneWithBinaryRequest {
  int64 id = 1;
}

message ReadAllWithBinaryRequest {
}

message ReadOneWithBinaryAndCalAreaRequest {
  int64 id = 1;
}

message ReadAllWithBinaryAndCalAreaRequest {
}

message ImageReply {
  Image image = 1;
}

message ImagesReply {
  repeated Image images = 1;
}

message ImageWithAreaReply {
  Image image = 1;
  int64 pixels = 2;
  double area = 3;
}

message ImagesWithAreaReply {
  message Data {
    Image image = 1;
    int64 pixels = 2;
    double area = 3;
  }
  repeated Data data = 1;
}

message Image {
  bytes data = 1;
}

// machine

message GetCurrentUserMachinesRequest {
  int64 user_id = 1;
}

message RegisterMachineRequest {
  MachineStruct machine = 1;
}

message UpdateMachineRequest {
  MachineStruct machine = 1;
}

message GetMachineRequest {
  int64 machine_id = 1;
}

message MachineReply {
  MachineStruct machine = 1;
}

message MachinesReply {
  repeated MachineStruct machines = 1;
}

message MachineStruct {
  int64 machine_id = 1;
  int64 user_id = 2;
  string address = 3;
}
