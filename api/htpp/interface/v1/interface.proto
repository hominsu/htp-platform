syntax = "proto3";

package htpp.interface.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "api/htpp/interface/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "htp-platform Interface API";
    version: "1.0";
    description: "";
    contact: {
      name: "htp-platform";
      url: "https://github.com/hominsu/htp-platform";
      email: "1774069959@qq.com";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

// The greeting service definition.
service Interface {
  rpc Login (LoginRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/v1/users/login",
      body: "*",
    };
  }

  rpc Register (RegisterRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "/v1/users",
      body: "*",
    };
  };

  rpc GetCurrentUser (GetCurrentUserRequest) returns (UserReply) {
    option (google.api.http) = {
      get: "/v1/user/{id}",
    };
  };

  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "/v1/user",
      body: "*",
    };
  };
}

message LoginRequest {
  message User {
    string email = 1;
    string password = 2;
  }
  User user = 1;
}

message RegisterRequest {
  message User {
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

message GetCurrentUserRequest {
  int64 id = 1;
}

message UpdateUserRequest {
  message User {
    int64  id = 1;
    string email = 2;
    string username = 4;
    string password = 5;
  }
  User user = 1;
}

message UserReply {
  message User {
    int64  id = 1;
    string email = 2;
    string token = 3;
    string username = 4;
  }
  User user = 1;
}

