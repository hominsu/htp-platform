// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"htp-platform/app/htpp/interface/internal/biz"
	"htp-platform/app/htpp/interface/internal/conf"
	"htp-platform/app/htpp/interface/internal/data"
	"htp-platform/app/htpp/interface/internal/server"
	"htp-platform/app/htpp/interface/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, jwt *conf.Jwt, logger log.Logger) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(discovery)
	captureClient := data.NewCaptureServiceClient(discovery)
	dataData, err := data.NewData(userClient, captureClient, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, jwt, logger)
	captureRepo := data.NewCaptureRepo(dataData, logger)
	captureUsecase := biz.NewCaptureUsecase(captureRepo, logger)
	interfaceService := service.NewInterfaceService(userUsecase, captureUsecase, confData, logger)
	httpServer := server.NewHTTPServer(confServer, jwt, interfaceService, logger)
	grpcServer := server.NewGRPCServer(confServer, interfaceService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
	}, nil
}
