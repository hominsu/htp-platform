// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"htp-platform/app/machine/service/internal/data/ent/migrate"

	"htp-platform/app/machine/service/internal/data/ent/capturelog"
	"htp-platform/app/machine/service/internal/data/ent/cronjob"
	"htp-platform/app/machine/service/internal/data/ent/machine"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CaptureLog is the client for interacting with the CaptureLog builders.
	CaptureLog *CaptureLogClient
	// CronJob is the client for interacting with the CronJob builders.
	CronJob *CronJobClient
	// Machine is the client for interacting with the Machine builders.
	Machine *MachineClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CaptureLog = NewCaptureLogClient(c.config)
	c.CronJob = NewCronJobClient(c.config)
	c.Machine = NewMachineClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		CaptureLog: NewCaptureLogClient(cfg),
		CronJob:    NewCronJobClient(cfg),
		Machine:    NewMachineClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		CaptureLog: NewCaptureLogClient(cfg),
		CronJob:    NewCronJobClient(cfg),
		Machine:    NewMachineClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CaptureLog.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CaptureLog.Use(hooks...)
	c.CronJob.Use(hooks...)
	c.Machine.Use(hooks...)
}

// CaptureLogClient is a client for the CaptureLog schema.
type CaptureLogClient struct {
	config
}

// NewCaptureLogClient returns a client for the CaptureLog from the given config.
func NewCaptureLogClient(c config) *CaptureLogClient {
	return &CaptureLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `capturelog.Hooks(f(g(h())))`.
func (c *CaptureLogClient) Use(hooks ...Hook) {
	c.hooks.CaptureLog = append(c.hooks.CaptureLog, hooks...)
}

// Create returns a create builder for CaptureLog.
func (c *CaptureLogClient) Create() *CaptureLogCreate {
	mutation := newCaptureLogMutation(c.config, OpCreate)
	return &CaptureLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CaptureLog entities.
func (c *CaptureLogClient) CreateBulk(builders ...*CaptureLogCreate) *CaptureLogCreateBulk {
	return &CaptureLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CaptureLog.
func (c *CaptureLogClient) Update() *CaptureLogUpdate {
	mutation := newCaptureLogMutation(c.config, OpUpdate)
	return &CaptureLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CaptureLogClient) UpdateOne(cl *CaptureLog) *CaptureLogUpdateOne {
	mutation := newCaptureLogMutation(c.config, OpUpdateOne, withCaptureLog(cl))
	return &CaptureLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CaptureLogClient) UpdateOneID(id int64) *CaptureLogUpdateOne {
	mutation := newCaptureLogMutation(c.config, OpUpdateOne, withCaptureLogID(id))
	return &CaptureLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CaptureLog.
func (c *CaptureLogClient) Delete() *CaptureLogDelete {
	mutation := newCaptureLogMutation(c.config, OpDelete)
	return &CaptureLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CaptureLogClient) DeleteOne(cl *CaptureLog) *CaptureLogDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CaptureLogClient) DeleteOneID(id int64) *CaptureLogDeleteOne {
	builder := c.Delete().Where(capturelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CaptureLogDeleteOne{builder}
}

// Query returns a query builder for CaptureLog.
func (c *CaptureLogClient) Query() *CaptureLogQuery {
	return &CaptureLogQuery{
		config: c.config,
	}
}

// Get returns a CaptureLog entity by its id.
func (c *CaptureLogClient) Get(ctx context.Context, id int64) (*CaptureLog, error) {
	return c.Query().Where(capturelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CaptureLogClient) GetX(ctx context.Context, id int64) *CaptureLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CaptureLogClient) Hooks() []Hook {
	return c.hooks.CaptureLog
}

// CronJobClient is a client for the CronJob schema.
type CronJobClient struct {
	config
}

// NewCronJobClient returns a client for the CronJob from the given config.
func NewCronJobClient(c config) *CronJobClient {
	return &CronJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cronjob.Hooks(f(g(h())))`.
func (c *CronJobClient) Use(hooks ...Hook) {
	c.hooks.CronJob = append(c.hooks.CronJob, hooks...)
}

// Create returns a create builder for CronJob.
func (c *CronJobClient) Create() *CronJobCreate {
	mutation := newCronJobMutation(c.config, OpCreate)
	return &CronJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CronJob entities.
func (c *CronJobClient) CreateBulk(builders ...*CronJobCreate) *CronJobCreateBulk {
	return &CronJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CronJob.
func (c *CronJobClient) Update() *CronJobUpdate {
	mutation := newCronJobMutation(c.config, OpUpdate)
	return &CronJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CronJobClient) UpdateOne(cj *CronJob) *CronJobUpdateOne {
	mutation := newCronJobMutation(c.config, OpUpdateOne, withCronJob(cj))
	return &CronJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CronJobClient) UpdateOneID(id int64) *CronJobUpdateOne {
	mutation := newCronJobMutation(c.config, OpUpdateOne, withCronJobID(id))
	return &CronJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CronJob.
func (c *CronJobClient) Delete() *CronJobDelete {
	mutation := newCronJobMutation(c.config, OpDelete)
	return &CronJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CronJobClient) DeleteOne(cj *CronJob) *CronJobDeleteOne {
	return c.DeleteOneID(cj.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CronJobClient) DeleteOneID(id int64) *CronJobDeleteOne {
	builder := c.Delete().Where(cronjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CronJobDeleteOne{builder}
}

// Query returns a query builder for CronJob.
func (c *CronJobClient) Query() *CronJobQuery {
	return &CronJobQuery{
		config: c.config,
	}
}

// Get returns a CronJob entity by its id.
func (c *CronJobClient) Get(ctx context.Context, id int64) (*CronJob, error) {
	return c.Query().Where(cronjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CronJobClient) GetX(ctx context.Context, id int64) *CronJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CronJobClient) Hooks() []Hook {
	return c.hooks.CronJob
}

// MachineClient is a client for the Machine schema.
type MachineClient struct {
	config
}

// NewMachineClient returns a client for the Machine from the given config.
func NewMachineClient(c config) *MachineClient {
	return &MachineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `machine.Hooks(f(g(h())))`.
func (c *MachineClient) Use(hooks ...Hook) {
	c.hooks.Machine = append(c.hooks.Machine, hooks...)
}

// Create returns a create builder for Machine.
func (c *MachineClient) Create() *MachineCreate {
	mutation := newMachineMutation(c.config, OpCreate)
	return &MachineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Machine entities.
func (c *MachineClient) CreateBulk(builders ...*MachineCreate) *MachineCreateBulk {
	return &MachineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Machine.
func (c *MachineClient) Update() *MachineUpdate {
	mutation := newMachineMutation(c.config, OpUpdate)
	return &MachineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MachineClient) UpdateOne(m *Machine) *MachineUpdateOne {
	mutation := newMachineMutation(c.config, OpUpdateOne, withMachine(m))
	return &MachineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MachineClient) UpdateOneID(id uuid.UUID) *MachineUpdateOne {
	mutation := newMachineMutation(c.config, OpUpdateOne, withMachineID(id))
	return &MachineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Machine.
func (c *MachineClient) Delete() *MachineDelete {
	mutation := newMachineMutation(c.config, OpDelete)
	return &MachineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MachineClient) DeleteOne(m *Machine) *MachineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MachineClient) DeleteOneID(id uuid.UUID) *MachineDeleteOne {
	builder := c.Delete().Where(machine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MachineDeleteOne{builder}
}

// Query returns a query builder for Machine.
func (c *MachineClient) Query() *MachineQuery {
	return &MachineQuery{
		config: c.config,
	}
}

// Get returns a Machine entity by its id.
func (c *MachineClient) Get(ctx context.Context, id uuid.UUID) (*Machine, error) {
	return c.Query().Where(machine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MachineClient) GetX(ctx context.Context, id uuid.UUID) *Machine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MachineClient) Hooks() []Hook {
	return c.hooks.Machine
}
