// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"htp-platform/app/machine/service/internal/biz"
	"htp-platform/app/machine/service/internal/data/ent/cronjob"
	"htp-platform/app/machine/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CronJobUpdate is the builder for updating CronJob entities.
type CronJobUpdate struct {
	config
	hooks    []Hook
	mutation *CronJobMutation
}

// Where appends a list predicates to the CronJobUpdate builder.
func (cju *CronJobUpdate) Where(ps ...predicate.CronJob) *CronJobUpdate {
	cju.mutation.Where(ps...)
	return cju
}

// SetMachineID sets the "machine_id" field.
func (cju *CronJobUpdate) SetMachineID(u uuid.UUID) *CronJobUpdate {
	cju.mutation.SetMachineID(u)
	return cju
}

// SetCheckName sets the "check_name" field.
func (cju *CronJobUpdate) SetCheckName(s string) *CronJobUpdate {
	cju.mutation.SetCheckName(s)
	return cju
}

// SetCronString sets the "cron_string" field.
func (cju *CronJobUpdate) SetCronString(s string) *CronJobUpdate {
	cju.mutation.SetCronString(s)
	return cju
}

// SetCoordinates sets the "coordinates" field.
func (cju *CronJobUpdate) SetCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdate {
	cju.mutation.SetCoordinates(bc)
	return cju
}

// ClearCoordinates clears the value of the "coordinates" field.
func (cju *CronJobUpdate) ClearCoordinates() *CronJobUpdate {
	cju.mutation.ClearCoordinates()
	return cju
}

// SetCreatedAt sets the "created_at" field.
func (cju *CronJobUpdate) SetCreatedAt(t time.Time) *CronJobUpdate {
	cju.mutation.SetCreatedAt(t)
	return cju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cju *CronJobUpdate) SetNillableCreatedAt(t *time.Time) *CronJobUpdate {
	if t != nil {
		cju.SetCreatedAt(*t)
	}
	return cju
}

// SetUpdatedAt sets the "updated_at" field.
func (cju *CronJobUpdate) SetUpdatedAt(t time.Time) *CronJobUpdate {
	cju.mutation.SetUpdatedAt(t)
	return cju
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cju *CronJobUpdate) SetNillableUpdatedAt(t *time.Time) *CronJobUpdate {
	if t != nil {
		cju.SetUpdatedAt(*t)
	}
	return cju
}

// Mutation returns the CronJobMutation object of the builder.
func (cju *CronJobUpdate) Mutation() *CronJobMutation {
	return cju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cju *CronJobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cju.hooks) == 0 {
		affected, err = cju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CronJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cju.mutation = mutation
			affected, err = cju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cju.hooks) - 1; i >= 0; i-- {
			if cju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cju *CronJobUpdate) SaveX(ctx context.Context) int {
	affected, err := cju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cju *CronJobUpdate) Exec(ctx context.Context) error {
	_, err := cju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cju *CronJobUpdate) ExecX(ctx context.Context) {
	if err := cju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cju *CronJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cronjob.Table,
			Columns: cronjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cronjob.FieldID,
			},
		},
	}
	if ps := cju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cju.mutation.MachineID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cronjob.FieldMachineID,
		})
	}
	if value, ok := cju.mutation.CheckName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cronjob.FieldCheckName,
		})
	}
	if value, ok := cju.mutation.CronString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cronjob.FieldCronString,
		})
	}
	if value, ok := cju.mutation.Coordinates(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cronjob.FieldCoordinates,
		})
	}
	if cju.mutation.CoordinatesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cronjob.FieldCoordinates,
		})
	}
	if value, ok := cju.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cronjob.FieldCreatedAt,
		})
	}
	if value, ok := cju.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cronjob.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CronJobUpdateOne is the builder for updating a single CronJob entity.
type CronJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CronJobMutation
}

// SetMachineID sets the "machine_id" field.
func (cjuo *CronJobUpdateOne) SetMachineID(u uuid.UUID) *CronJobUpdateOne {
	cjuo.mutation.SetMachineID(u)
	return cjuo
}

// SetCheckName sets the "check_name" field.
func (cjuo *CronJobUpdateOne) SetCheckName(s string) *CronJobUpdateOne {
	cjuo.mutation.SetCheckName(s)
	return cjuo
}

// SetCronString sets the "cron_string" field.
func (cjuo *CronJobUpdateOne) SetCronString(s string) *CronJobUpdateOne {
	cjuo.mutation.SetCronString(s)
	return cjuo
}

// SetCoordinates sets the "coordinates" field.
func (cjuo *CronJobUpdateOne) SetCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdateOne {
	cjuo.mutation.SetCoordinates(bc)
	return cjuo
}

// ClearCoordinates clears the value of the "coordinates" field.
func (cjuo *CronJobUpdateOne) ClearCoordinates() *CronJobUpdateOne {
	cjuo.mutation.ClearCoordinates()
	return cjuo
}

// SetCreatedAt sets the "created_at" field.
func (cjuo *CronJobUpdateOne) SetCreatedAt(t time.Time) *CronJobUpdateOne {
	cjuo.mutation.SetCreatedAt(t)
	return cjuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cjuo *CronJobUpdateOne) SetNillableCreatedAt(t *time.Time) *CronJobUpdateOne {
	if t != nil {
		cjuo.SetCreatedAt(*t)
	}
	return cjuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cjuo *CronJobUpdateOne) SetUpdatedAt(t time.Time) *CronJobUpdateOne {
	cjuo.mutation.SetUpdatedAt(t)
	return cjuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjuo *CronJobUpdateOne) SetNillableUpdatedAt(t *time.Time) *CronJobUpdateOne {
	if t != nil {
		cjuo.SetUpdatedAt(*t)
	}
	return cjuo
}

// Mutation returns the CronJobMutation object of the builder.
func (cjuo *CronJobUpdateOne) Mutation() *CronJobMutation {
	return cjuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cjuo *CronJobUpdateOne) Select(field string, fields ...string) *CronJobUpdateOne {
	cjuo.fields = append([]string{field}, fields...)
	return cjuo
}

// Save executes the query and returns the updated CronJob entity.
func (cjuo *CronJobUpdateOne) Save(ctx context.Context) (*CronJob, error) {
	var (
		err  error
		node *CronJob
	)
	if len(cjuo.hooks) == 0 {
		node, err = cjuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CronJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cjuo.mutation = mutation
			node, err = cjuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cjuo.hooks) - 1; i >= 0; i-- {
			if cjuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cjuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cjuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cjuo *CronJobUpdateOne) SaveX(ctx context.Context) *CronJob {
	node, err := cjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cjuo *CronJobUpdateOne) Exec(ctx context.Context) error {
	_, err := cjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjuo *CronJobUpdateOne) ExecX(ctx context.Context) {
	if err := cjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cjuo *CronJobUpdateOne) sqlSave(ctx context.Context) (_node *CronJob, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cronjob.Table,
			Columns: cronjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cronjob.FieldID,
			},
		},
	}
	id, ok := cjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CronJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cronjob.FieldID)
		for _, f := range fields {
			if !cronjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cronjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjuo.mutation.MachineID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cronjob.FieldMachineID,
		})
	}
	if value, ok := cjuo.mutation.CheckName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cronjob.FieldCheckName,
		})
	}
	if value, ok := cjuo.mutation.CronString(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cronjob.FieldCronString,
		})
	}
	if value, ok := cjuo.mutation.Coordinates(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cronjob.FieldCoordinates,
		})
	}
	if cjuo.mutation.CoordinatesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cronjob.FieldCoordinates,
		})
	}
	if value, ok := cjuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cronjob.FieldCreatedAt,
		})
	}
	if value, ok := cjuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cronjob.FieldUpdatedAt,
		})
	}
	_node = &CronJob{config: cjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
