// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"htp-platform/app/machine/service/internal/data/ent/capturelog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CaptureLogCreate is the builder for creating a CaptureLog entity.
type CaptureLogCreate struct {
	config
	mutation *CaptureLogMutation
	hooks    []Hook
}

// SetMachineID sets the "machine_id" field.
func (clc *CaptureLogCreate) SetMachineID(u uuid.UUID) *CaptureLogCreate {
	clc.mutation.SetMachineID(u)
	return clc
}

// SetPixels sets the "pixels" field.
func (clc *CaptureLogCreate) SetPixels(i int64) *CaptureLogCreate {
	clc.mutation.SetPixels(i)
	return clc
}

// SetArea sets the "area" field.
func (clc *CaptureLogCreate) SetArea(f float64) *CaptureLogCreate {
	clc.mutation.SetArea(f)
	return clc
}

// SetSrcName sets the "src_name" field.
func (clc *CaptureLogCreate) SetSrcName(s string) *CaptureLogCreate {
	clc.mutation.SetSrcName(s)
	return clc
}

// SetProcName sets the "proc_name" field.
func (clc *CaptureLogCreate) SetProcName(s string) *CaptureLogCreate {
	clc.mutation.SetProcName(s)
	return clc
}

// SetSrcOssURL sets the "src_oss_url" field.
func (clc *CaptureLogCreate) SetSrcOssURL(s string) *CaptureLogCreate {
	clc.mutation.SetSrcOssURL(s)
	return clc
}

// SetProcOssURL sets the "proc_oss_url" field.
func (clc *CaptureLogCreate) SetProcOssURL(s string) *CaptureLogCreate {
	clc.mutation.SetProcOssURL(s)
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *CaptureLogCreate) SetCreatedAt(t time.Time) *CaptureLogCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CaptureLogCreate) SetNillableCreatedAt(t *time.Time) *CaptureLogCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *CaptureLogCreate) SetUpdatedAt(t time.Time) *CaptureLogCreate {
	clc.mutation.SetUpdatedAt(t)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *CaptureLogCreate) SetNillableUpdatedAt(t *time.Time) *CaptureLogCreate {
	if t != nil {
		clc.SetUpdatedAt(*t)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CaptureLogCreate) SetID(i int64) *CaptureLogCreate {
	clc.mutation.SetID(i)
	return clc
}

// Mutation returns the CaptureLogMutation object of the builder.
func (clc *CaptureLogCreate) Mutation() *CaptureLogMutation {
	return clc.mutation
}

// Save creates the CaptureLog in the database.
func (clc *CaptureLogCreate) Save(ctx context.Context) (*CaptureLog, error) {
	var (
		err  error
		node *CaptureLog
	)
	clc.defaults()
	if len(clc.hooks) == 0 {
		if err = clc.check(); err != nil {
			return nil, err
		}
		node, err = clc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CaptureLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = clc.check(); err != nil {
				return nil, err
			}
			clc.mutation = mutation
			if node, err = clc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(clc.hooks) - 1; i >= 0; i-- {
			if clc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, clc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CaptureLogCreate) SaveX(ctx context.Context) *CaptureLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CaptureLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CaptureLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CaptureLogCreate) defaults() {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		v := capturelog.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		v := capturelog.DefaultUpdatedAt()
		clc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CaptureLogCreate) check() error {
	if _, ok := clc.mutation.MachineID(); !ok {
		return &ValidationError{Name: "machine_id", err: errors.New(`ent: missing required field "CaptureLog.machine_id"`)}
	}
	if _, ok := clc.mutation.Pixels(); !ok {
		return &ValidationError{Name: "pixels", err: errors.New(`ent: missing required field "CaptureLog.pixels"`)}
	}
	if _, ok := clc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "CaptureLog.area"`)}
	}
	if _, ok := clc.mutation.SrcName(); !ok {
		return &ValidationError{Name: "src_name", err: errors.New(`ent: missing required field "CaptureLog.src_name"`)}
	}
	if _, ok := clc.mutation.ProcName(); !ok {
		return &ValidationError{Name: "proc_name", err: errors.New(`ent: missing required field "CaptureLog.proc_name"`)}
	}
	if _, ok := clc.mutation.SrcOssURL(); !ok {
		return &ValidationError{Name: "src_oss_url", err: errors.New(`ent: missing required field "CaptureLog.src_oss_url"`)}
	}
	if _, ok := clc.mutation.ProcOssURL(); !ok {
		return &ValidationError{Name: "proc_oss_url", err: errors.New(`ent: missing required field "CaptureLog.proc_oss_url"`)}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CaptureLog.created_at"`)}
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CaptureLog.updated_at"`)}
	}
	return nil
}

func (clc *CaptureLogCreate) sqlSave(ctx context.Context) (*CaptureLog, error) {
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (clc *CaptureLogCreate) createSpec() (*CaptureLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CaptureLog{config: clc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: capturelog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: capturelog.FieldID,
			},
		}
	)
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.MachineID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: capturelog.FieldMachineID,
		})
		_node.MachineID = value
	}
	if value, ok := clc.mutation.Pixels(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: capturelog.FieldPixels,
		})
		_node.Pixels = value
	}
	if value, ok := clc.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: capturelog.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := clc.mutation.SrcName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: capturelog.FieldSrcName,
		})
		_node.SrcName = value
	}
	if value, ok := clc.mutation.ProcName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: capturelog.FieldProcName,
		})
		_node.ProcName = value
	}
	if value, ok := clc.mutation.SrcOssURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: capturelog.FieldSrcOssURL,
		})
		_node.SrcOssURL = value
	}
	if value, ok := clc.mutation.ProcOssURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: capturelog.FieldProcOssURL,
		})
		_node.ProcOssURL = value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: capturelog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: capturelog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CaptureLogCreateBulk is the builder for creating many CaptureLog entities in bulk.
type CaptureLogCreateBulk struct {
	config
	builders []*CaptureLogCreate
}

// Save creates the CaptureLog entities in the database.
func (clcb *CaptureLogCreateBulk) Save(ctx context.Context) ([]*CaptureLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CaptureLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CaptureLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CaptureLogCreateBulk) SaveX(ctx context.Context) []*CaptureLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CaptureLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CaptureLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
